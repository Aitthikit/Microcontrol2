
LAB3_Game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008264  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800843c  0800843c  0000943c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800847c  0800847c  0000a014  2**0
                  CONTENTS
  4 .ARM          00000008  0800847c  0800847c  0000947c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008484  08008484  0000a014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008484  08008484  00009484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008488  08008488  00009488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  0800848c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  20000018  080084a0  0000a018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  080084a0  0000a2fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001565b  00000000  00000000  0000a044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002895  00000000  00000000  0001f69f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001168  00000000  00000000  00021f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d86  00000000  00000000  000230a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026b83  00000000  00000000  00023e26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000157d2  00000000  00000000  0004a9a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff75c  00000000  00000000  0006017b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015f8d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a2c  00000000  00000000  0015f91c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00164348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000018 	.word	0x20000018
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008424 	.word	0x08008424

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000001c 	.word	0x2000001c
 8000214:	08008424 	.word	0x08008424

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000508:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800050c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800050e:	f000 fdd4 	bl	80010ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000512:	f000 f8a3 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000516:	f000 fa35 	bl	8000984 <MX_GPIO_Init>
  MX_DMA_Init();
 800051a:	f000 f9f9 	bl	8000910 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800051e:	f000 f9ad 	bl	800087c <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000522:	f000 f8e7 	bl	80006f4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000526:	f000 f969 	bl	80007fc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  UARTInterruptConfig();
 800052a:	f000 fa99 	bl	8000a60 <UARTInterruptConfig>
  HAL_ADC_Start_DMA(&hadc1, JOY_RawRead, 20);
 800052e:	2214      	movs	r2, #20
 8000530:	493d      	ldr	r1, [pc, #244]	@ (8000628 <main+0x120>)
 8000532:	483e      	ldr	r0, [pc, #248]	@ (800062c <main+0x124>)
 8000534:	f001 fa2e 	bl	8001994 <HAL_ADC_Start_DMA>
//  EEPROMWriteExample();
  HAL_Delay(1000);
 8000538:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800053c:	f000 fe2e 	bl	800119c <HAL_Delay>
  EEPROMReadExample(eepromDataReadBack, 3);
 8000540:	2103      	movs	r1, #3
 8000542:	483b      	ldr	r0, [pc, #236]	@ (8000630 <main+0x128>)
 8000544:	f000 fadc 	bl	8000b00 <EEPROMReadExample>
  HAL_Delay(1000);
 8000548:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800054c:	f000 fe26 	bl	800119c <HAL_Delay>
  High_Score  = eepromDataReadBack[0];
 8000550:	4b37      	ldr	r3, [pc, #220]	@ (8000630 <main+0x128>)
 8000552:	781b      	ldrb	r3, [r3, #0]
 8000554:	461a      	mov	r2, r3
 8000556:	4b37      	ldr	r3, [pc, #220]	@ (8000634 <main+0x12c>)
 8000558:	801a      	strh	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  	  EEPROMReadExample(eepromDataReadBack, 3);
 800055a:	2103      	movs	r1, #3
 800055c:	4834      	ldr	r0, [pc, #208]	@ (8000630 <main+0x128>)
 800055e:	f000 facf 	bl	8000b00 <EEPROMReadExample>
	  	  Score = (A[2]<< 8)+ A[1];
 8000562:	4b35      	ldr	r3, [pc, #212]	@ (8000638 <main+0x130>)
 8000564:	789b      	ldrb	r3, [r3, #2]
 8000566:	021b      	lsls	r3, r3, #8
 8000568:	b29b      	uxth	r3, r3
 800056a:	4a33      	ldr	r2, [pc, #204]	@ (8000638 <main+0x130>)
 800056c:	7852      	ldrb	r2, [r2, #1]
 800056e:	4413      	add	r3, r2
 8000570:	b29a      	uxth	r2, r3
 8000572:	4b32      	ldr	r3, [pc, #200]	@ (800063c <main+0x134>)
 8000574:	801a      	strh	r2, [r3, #0]
	  	  if(High_Score < Score && Score < 30)
 8000576:	4b2f      	ldr	r3, [pc, #188]	@ (8000634 <main+0x12c>)
 8000578:	881a      	ldrh	r2, [r3, #0]
 800057a:	4b30      	ldr	r3, [pc, #192]	@ (800063c <main+0x134>)
 800057c:	881b      	ldrh	r3, [r3, #0]
 800057e:	429a      	cmp	r2, r3
 8000580:	d212      	bcs.n	80005a8 <main+0xa0>
 8000582:	4b2e      	ldr	r3, [pc, #184]	@ (800063c <main+0x134>)
 8000584:	881b      	ldrh	r3, [r3, #0]
 8000586:	2b1d      	cmp	r3, #29
 8000588:	d80e      	bhi.n	80005a8 <main+0xa0>
	  	  {
	  		High_Score = Score;
 800058a:	4b2c      	ldr	r3, [pc, #176]	@ (800063c <main+0x134>)
 800058c:	881a      	ldrh	r2, [r3, #0]
 800058e:	4b29      	ldr	r3, [pc, #164]	@ (8000634 <main+0x12c>)
 8000590:	801a      	strh	r2, [r3, #0]
	  		eepromExampleWriteFlag = 1;
 8000592:	4b2b      	ldr	r3, [pc, #172]	@ (8000640 <main+0x138>)
 8000594:	2201      	movs	r2, #1
 8000596:	701a      	strb	r2, [r3, #0]
	  		EEPROMWriteExample();
 8000598:	f000 fa88 	bl	8000aac <EEPROMWriteExample>
	  		Count++;
 800059c:	4b29      	ldr	r3, [pc, #164]	@ (8000644 <main+0x13c>)
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	3301      	adds	r3, #1
 80005a2:	b29a      	uxth	r2, r3
 80005a4:	4b27      	ldr	r3, [pc, #156]	@ (8000644 <main+0x13c>)
 80005a6:	801a      	strh	r2, [r3, #0]
	  	  }

	  	  static uint64_t timestamp =0;
	 	  if(HAL_GetTick() > timestamp)
 80005a8:	f000 fdec 	bl	8001184 <HAL_GetTick>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2200      	movs	r2, #0
 80005b0:	461c      	mov	r4, r3
 80005b2:	4615      	mov	r5, r2
 80005b4:	4b24      	ldr	r3, [pc, #144]	@ (8000648 <main+0x140>)
 80005b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005ba:	42a2      	cmp	r2, r4
 80005bc:	41ab      	sbcs	r3, r5
 80005be:	d2cc      	bcs.n	800055a <main+0x52>
	 	  {
	 	  timestamp = HAL_GetTick() + 1;//ms
 80005c0:	f000 fde0 	bl	8001184 <HAL_GetTick>
 80005c4:	4603      	mov	r3, r0
 80005c6:	3301      	adds	r3, #1
 80005c8:	2200      	movs	r2, #0
 80005ca:	4698      	mov	r8, r3
 80005cc:	4691      	mov	r9, r2
 80005ce:	4b1e      	ldr	r3, [pc, #120]	@ (8000648 <main+0x140>)
 80005d0:	e9c3 8900 	strd	r8, r9, [r3]
	 	  dataSend = JOY_RawRead[0];
 80005d4:	4b14      	ldr	r3, [pc, #80]	@ (8000628 <main+0x120>)
 80005d6:	881a      	ldrh	r2, [r3, #0]
 80005d8:	4b1c      	ldr	r3, [pc, #112]	@ (800064c <main+0x144>)
 80005da:	801a      	strh	r2, [r3, #0]
	 	  dataBytes[0] = header; // Header byte
 80005dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000650 <main+0x148>)
 80005de:	781a      	ldrb	r2, [r3, #0]
 80005e0:	4b1c      	ldr	r3, [pc, #112]	@ (8000654 <main+0x14c>)
 80005e2:	701a      	strb	r2, [r3, #0]
	 	  dataBytes[1] = (uint8_t)(dataSend & 0xFF); // Lower byte
 80005e4:	4b19      	ldr	r3, [pc, #100]	@ (800064c <main+0x144>)
 80005e6:	881b      	ldrh	r3, [r3, #0]
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	4b1a      	ldr	r3, [pc, #104]	@ (8000654 <main+0x14c>)
 80005ec:	705a      	strb	r2, [r3, #1]
	 	  dataBytes[2] = (uint8_t)((dataSend >> 8) & 0xFF); // Upper byte
 80005ee:	4b17      	ldr	r3, [pc, #92]	@ (800064c <main+0x144>)
 80005f0:	881b      	ldrh	r3, [r3, #0]
 80005f2:	0a1b      	lsrs	r3, r3, #8
 80005f4:	b29b      	uxth	r3, r3
 80005f6:	b2da      	uxtb	r2, r3
 80005f8:	4b16      	ldr	r3, [pc, #88]	@ (8000654 <main+0x14c>)
 80005fa:	709a      	strb	r2, [r3, #2]
	 	  dataBytes[3] = (uint8_t)(High_Score & 0xFF); // Lower byte
 80005fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000634 <main+0x12c>)
 80005fe:	881b      	ldrh	r3, [r3, #0]
 8000600:	b2da      	uxtb	r2, r3
 8000602:	4b14      	ldr	r3, [pc, #80]	@ (8000654 <main+0x14c>)
 8000604:	70da      	strb	r2, [r3, #3]
		  dataBytes[4] = (uint8_t)((High_Score >> 8) & 0xFF); // Upper byte
 8000606:	4b0b      	ldr	r3, [pc, #44]	@ (8000634 <main+0x12c>)
 8000608:	881b      	ldrh	r3, [r3, #0]
 800060a:	0a1b      	lsrs	r3, r3, #8
 800060c:	b29b      	uxth	r3, r3
 800060e:	b2da      	uxtb	r2, r3
 8000610:	4b10      	ldr	r3, [pc, #64]	@ (8000654 <main+0x14c>)
 8000612:	711a      	strb	r2, [r3, #4]
	 	  dataBytes[5] = 0x0A;
 8000614:	4b0f      	ldr	r3, [pc, #60]	@ (8000654 <main+0x14c>)
 8000616:	220a      	movs	r2, #10
 8000618:	715a      	strb	r2, [r3, #5]
	 	  HAL_UART_Transmit(&hlpuart1, dataBytes, sizeof(dataBytes), 5);
 800061a:	2305      	movs	r3, #5
 800061c:	2206      	movs	r2, #6
 800061e:	490d      	ldr	r1, [pc, #52]	@ (8000654 <main+0x14c>)
 8000620:	480d      	ldr	r0, [pc, #52]	@ (8000658 <main+0x150>)
 8000622:	f005 fdf7 	bl	8006214 <HAL_UART_Transmit>
  {
 8000626:	e798      	b.n	800055a <main+0x52>
 8000628:	200002b8 	.word	0x200002b8
 800062c:	20000034 	.word	0x20000034
 8000630:	200002ac 	.word	0x200002ac
 8000634:	200002ea 	.word	0x200002ea
 8000638:	200002b0 	.word	0x200002b0
 800063c:	200002e8 	.word	0x200002e8
 8000640:	200002a8 	.word	0x200002a8
 8000644:	200002ec 	.word	0x200002ec
 8000648:	200002f0 	.word	0x200002f0
 800064c:	200002e6 	.word	0x200002e6
 8000650:	20000001 	.word	0x20000001
 8000654:	200002e0 	.word	0x200002e0
 8000658:	20000214 	.word	0x20000214

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	@ 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 0318 	add.w	r3, r7, #24
 8000666:	2238      	movs	r2, #56	@ 0x38
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f007 feae 	bl	80083cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800067e:	2000      	movs	r0, #0
 8000680:	f004 fd48 	bl	8005114 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000684:	2302      	movs	r3, #2
 8000686:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000688:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800068c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800068e:	2340      	movs	r3, #64	@ 0x40
 8000690:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000692:	2302      	movs	r3, #2
 8000694:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000696:	2302      	movs	r3, #2
 8000698:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800069a:	2304      	movs	r3, #4
 800069c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800069e:	2355      	movs	r3, #85	@ 0x55
 80006a0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006a6:	2302      	movs	r3, #2
 80006a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ae:	f107 0318 	add.w	r3, r7, #24
 80006b2:	4618      	mov	r0, r3
 80006b4:	f004 fde2 	bl	800527c <HAL_RCC_OscConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006be:	f000 fa5f 	bl	8000b80 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c2:	230f      	movs	r3, #15
 80006c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006c6:	2303      	movs	r3, #3
 80006c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	2104      	movs	r1, #4
 80006da:	4618      	mov	r0, r3
 80006dc:	f005 f8e0 	bl	80058a0 <HAL_RCC_ClockConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006e6:	f000 fa4b 	bl	8000b80 <Error_Handler>
  }
}
 80006ea:	bf00      	nop
 80006ec:	3750      	adds	r7, #80	@ 0x50
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b08c      	sub	sp, #48	@ 0x30
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	2220      	movs	r2, #32
 800070a:	2100      	movs	r1, #0
 800070c:	4618      	mov	r0, r3
 800070e:	f007 fe5d 	bl	80083cc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000712:	4b38      	ldr	r3, [pc, #224]	@ (80007f4 <MX_ADC1_Init+0x100>)
 8000714:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000718:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800071a:	4b36      	ldr	r3, [pc, #216]	@ (80007f4 <MX_ADC1_Init+0x100>)
 800071c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000720:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000722:	4b34      	ldr	r3, [pc, #208]	@ (80007f4 <MX_ADC1_Init+0x100>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000728:	4b32      	ldr	r3, [pc, #200]	@ (80007f4 <MX_ADC1_Init+0x100>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800072e:	4b31      	ldr	r3, [pc, #196]	@ (80007f4 <MX_ADC1_Init+0x100>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000734:	4b2f      	ldr	r3, [pc, #188]	@ (80007f4 <MX_ADC1_Init+0x100>)
 8000736:	2201      	movs	r2, #1
 8000738:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800073a:	4b2e      	ldr	r3, [pc, #184]	@ (80007f4 <MX_ADC1_Init+0x100>)
 800073c:	2204      	movs	r2, #4
 800073e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000740:	4b2c      	ldr	r3, [pc, #176]	@ (80007f4 <MX_ADC1_Init+0x100>)
 8000742:	2200      	movs	r2, #0
 8000744:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000746:	4b2b      	ldr	r3, [pc, #172]	@ (80007f4 <MX_ADC1_Init+0x100>)
 8000748:	2201      	movs	r2, #1
 800074a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 800074c:	4b29      	ldr	r3, [pc, #164]	@ (80007f4 <MX_ADC1_Init+0x100>)
 800074e:	2202      	movs	r2, #2
 8000750:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000752:	4b28      	ldr	r3, [pc, #160]	@ (80007f4 <MX_ADC1_Init+0x100>)
 8000754:	2200      	movs	r2, #0
 8000756:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800075a:	4b26      	ldr	r3, [pc, #152]	@ (80007f4 <MX_ADC1_Init+0x100>)
 800075c:	2200      	movs	r2, #0
 800075e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000760:	4b24      	ldr	r3, [pc, #144]	@ (80007f4 <MX_ADC1_Init+0x100>)
 8000762:	2200      	movs	r2, #0
 8000764:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000766:	4b23      	ldr	r3, [pc, #140]	@ (80007f4 <MX_ADC1_Init+0x100>)
 8000768:	2201      	movs	r2, #1
 800076a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800076e:	4b21      	ldr	r3, [pc, #132]	@ (80007f4 <MX_ADC1_Init+0x100>)
 8000770:	2200      	movs	r2, #0
 8000772:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000774:	4b1f      	ldr	r3, [pc, #124]	@ (80007f4 <MX_ADC1_Init+0x100>)
 8000776:	2200      	movs	r2, #0
 8000778:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800077c:	481d      	ldr	r0, [pc, #116]	@ (80007f4 <MX_ADC1_Init+0x100>)
 800077e:	f000 ff4d 	bl	800161c <HAL_ADC_Init>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000788:	f000 f9fa 	bl	8000b80 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800078c:	2300      	movs	r3, #0
 800078e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000790:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000794:	4619      	mov	r1, r3
 8000796:	4817      	ldr	r0, [pc, #92]	@ (80007f4 <MX_ADC1_Init+0x100>)
 8000798:	f001 ff7e 	bl	8002698 <HAL_ADCEx_MultiModeConfigChannel>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80007a2:	f000 f9ed 	bl	8000b80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007a6:	4b14      	ldr	r3, [pc, #80]	@ (80007f8 <MX_ADC1_Init+0x104>)
 80007a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007aa:	2306      	movs	r3, #6
 80007ac:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007b2:	237f      	movs	r3, #127	@ 0x7f
 80007b4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007b6:	2304      	movs	r3, #4
 80007b8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	4619      	mov	r1, r3
 80007c2:	480c      	ldr	r0, [pc, #48]	@ (80007f4 <MX_ADC1_Init+0x100>)
 80007c4:	f001 f9d8 	bl	8001b78 <HAL_ADC_ConfigChannel>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80007ce:	f000 f9d7 	bl	8000b80 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80007d2:	230c      	movs	r3, #12
 80007d4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	1d3b      	adds	r3, r7, #4
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	@ (80007f4 <MX_ADC1_Init+0x100>)
 80007dc:	f001 f9cc 	bl	8001b78 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0xf6>
  {
    Error_Handler();
 80007e6:	f000 f9cb 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3730      	adds	r7, #48	@ 0x30
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000034 	.word	0x20000034
 80007f8:	04300002 	.word	0x04300002

080007fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000800:	4b1b      	ldr	r3, [pc, #108]	@ (8000870 <MX_I2C1_Init+0x74>)
 8000802:	4a1c      	ldr	r2, [pc, #112]	@ (8000874 <MX_I2C1_Init+0x78>)
 8000804:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8000806:	4b1a      	ldr	r3, [pc, #104]	@ (8000870 <MX_I2C1_Init+0x74>)
 8000808:	4a1b      	ldr	r2, [pc, #108]	@ (8000878 <MX_I2C1_Init+0x7c>)
 800080a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800080c:	4b18      	ldr	r3, [pc, #96]	@ (8000870 <MX_I2C1_Init+0x74>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000812:	4b17      	ldr	r3, [pc, #92]	@ (8000870 <MX_I2C1_Init+0x74>)
 8000814:	2201      	movs	r2, #1
 8000816:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000818:	4b15      	ldr	r3, [pc, #84]	@ (8000870 <MX_I2C1_Init+0x74>)
 800081a:	2200      	movs	r2, #0
 800081c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800081e:	4b14      	ldr	r3, [pc, #80]	@ (8000870 <MX_I2C1_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000824:	4b12      	ldr	r3, [pc, #72]	@ (8000870 <MX_I2C1_Init+0x74>)
 8000826:	2200      	movs	r2, #0
 8000828:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800082a:	4b11      	ldr	r3, [pc, #68]	@ (8000870 <MX_I2C1_Init+0x74>)
 800082c:	2200      	movs	r2, #0
 800082e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000830:	4b0f      	ldr	r3, [pc, #60]	@ (8000870 <MX_I2C1_Init+0x74>)
 8000832:	2200      	movs	r2, #0
 8000834:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000836:	480e      	ldr	r0, [pc, #56]	@ (8000870 <MX_I2C1_Init+0x74>)
 8000838:	f002 fe38 	bl	80034ac <HAL_I2C_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000842:	f000 f99d 	bl	8000b80 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000846:	2100      	movs	r1, #0
 8000848:	4809      	ldr	r0, [pc, #36]	@ (8000870 <MX_I2C1_Init+0x74>)
 800084a:	f004 fbcb 	bl	8004fe4 <HAL_I2CEx_ConfigAnalogFilter>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000854:	f000 f994 	bl	8000b80 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000858:	2100      	movs	r1, #0
 800085a:	4805      	ldr	r0, [pc, #20]	@ (8000870 <MX_I2C1_Init+0x74>)
 800085c:	f004 fc0d 	bl	800507a <HAL_I2CEx_ConfigDigitalFilter>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000866:	f000 f98b 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000100 	.word	0x20000100
 8000874:	40005400 	.word	0x40005400
 8000878:	30a0a7fb 	.word	0x30a0a7fb

0800087c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000880:	4b21      	ldr	r3, [pc, #132]	@ (8000908 <MX_LPUART1_UART_Init+0x8c>)
 8000882:	4a22      	ldr	r2, [pc, #136]	@ (800090c <MX_LPUART1_UART_Init+0x90>)
 8000884:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 57600;
 8000886:	4b20      	ldr	r3, [pc, #128]	@ (8000908 <MX_LPUART1_UART_Init+0x8c>)
 8000888:	f44f 4261 	mov.w	r2, #57600	@ 0xe100
 800088c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800088e:	4b1e      	ldr	r3, [pc, #120]	@ (8000908 <MX_LPUART1_UART_Init+0x8c>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000894:	4b1c      	ldr	r3, [pc, #112]	@ (8000908 <MX_LPUART1_UART_Init+0x8c>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800089a:	4b1b      	ldr	r3, [pc, #108]	@ (8000908 <MX_LPUART1_UART_Init+0x8c>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80008a0:	4b19      	ldr	r3, [pc, #100]	@ (8000908 <MX_LPUART1_UART_Init+0x8c>)
 80008a2:	220c      	movs	r2, #12
 80008a4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a6:	4b18      	ldr	r3, [pc, #96]	@ (8000908 <MX_LPUART1_UART_Init+0x8c>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ac:	4b16      	ldr	r3, [pc, #88]	@ (8000908 <MX_LPUART1_UART_Init+0x8c>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008b2:	4b15      	ldr	r3, [pc, #84]	@ (8000908 <MX_LPUART1_UART_Init+0x8c>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b8:	4b13      	ldr	r3, [pc, #76]	@ (8000908 <MX_LPUART1_UART_Init+0x8c>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80008be:	4812      	ldr	r0, [pc, #72]	@ (8000908 <MX_LPUART1_UART_Init+0x8c>)
 80008c0:	f005 fc58 	bl	8006174 <HAL_UART_Init>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80008ca:	f000 f959 	bl	8000b80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ce:	2100      	movs	r1, #0
 80008d0:	480d      	ldr	r0, [pc, #52]	@ (8000908 <MX_LPUART1_UART_Init+0x8c>)
 80008d2:	f007 fcb0 	bl	8008236 <HAL_UARTEx_SetTxFifoThreshold>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80008dc:	f000 f950 	bl	8000b80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008e0:	2100      	movs	r1, #0
 80008e2:	4809      	ldr	r0, [pc, #36]	@ (8000908 <MX_LPUART1_UART_Init+0x8c>)
 80008e4:	f007 fce5 	bl	80082b2 <HAL_UARTEx_SetRxFifoThreshold>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80008ee:	f000 f947 	bl	8000b80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80008f2:	4805      	ldr	r0, [pc, #20]	@ (8000908 <MX_LPUART1_UART_Init+0x8c>)
 80008f4:	f007 fc66 	bl	80081c4 <HAL_UARTEx_DisableFifoMode>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80008fe:	f000 f93f 	bl	8000b80 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000214 	.word	0x20000214
 800090c:	40008000 	.word	0x40008000

08000910 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000916:	4b1a      	ldr	r3, [pc, #104]	@ (8000980 <MX_DMA_Init+0x70>)
 8000918:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800091a:	4a19      	ldr	r2, [pc, #100]	@ (8000980 <MX_DMA_Init+0x70>)
 800091c:	f043 0304 	orr.w	r3, r3, #4
 8000920:	6493      	str	r3, [r2, #72]	@ 0x48
 8000922:	4b17      	ldr	r3, [pc, #92]	@ (8000980 <MX_DMA_Init+0x70>)
 8000924:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000926:	f003 0304 	and.w	r3, r3, #4
 800092a:	607b      	str	r3, [r7, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800092e:	4b14      	ldr	r3, [pc, #80]	@ (8000980 <MX_DMA_Init+0x70>)
 8000930:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000932:	4a13      	ldr	r2, [pc, #76]	@ (8000980 <MX_DMA_Init+0x70>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6493      	str	r3, [r2, #72]	@ 0x48
 800093a:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <MX_DMA_Init+0x70>)
 800093c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	603b      	str	r3, [r7, #0]
 8000944:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000946:	2200      	movs	r2, #0
 8000948:	2100      	movs	r1, #0
 800094a:	200b      	movs	r0, #11
 800094c:	f002 f887 	bl	8002a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000950:	200b      	movs	r0, #11
 8000952:	f002 f89e 	bl	8002a92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000956:	2200      	movs	r2, #0
 8000958:	2100      	movs	r1, #0
 800095a:	200c      	movs	r0, #12
 800095c:	f002 f87f 	bl	8002a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000960:	200c      	movs	r0, #12
 8000962:	f002 f896 	bl	8002a92 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000966:	2200      	movs	r2, #0
 8000968:	2100      	movs	r1, #0
 800096a:	200d      	movs	r0, #13
 800096c:	f002 f877 	bl	8002a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000970:	200d      	movs	r0, #13
 8000972:	f002 f88e 	bl	8002a92 <HAL_NVIC_EnableIRQ>

}
 8000976:	bf00      	nop
 8000978:	3708      	adds	r7, #8
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40021000 	.word	0x40021000

08000984 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	@ 0x28
 8000988:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	60da      	str	r2, [r3, #12]
 8000998:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800099a:	4b2f      	ldr	r3, [pc, #188]	@ (8000a58 <MX_GPIO_Init+0xd4>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800099e:	4a2e      	ldr	r2, [pc, #184]	@ (8000a58 <MX_GPIO_Init+0xd4>)
 80009a0:	f043 0304 	orr.w	r3, r3, #4
 80009a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009a6:	4b2c      	ldr	r3, [pc, #176]	@ (8000a58 <MX_GPIO_Init+0xd4>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009aa:	f003 0304 	and.w	r3, r3, #4
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009b2:	4b29      	ldr	r3, [pc, #164]	@ (8000a58 <MX_GPIO_Init+0xd4>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009b6:	4a28      	ldr	r2, [pc, #160]	@ (8000a58 <MX_GPIO_Init+0xd4>)
 80009b8:	f043 0320 	orr.w	r3, r3, #32
 80009bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009be:	4b26      	ldr	r3, [pc, #152]	@ (8000a58 <MX_GPIO_Init+0xd4>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009c2:	f003 0320 	and.w	r3, r3, #32
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	4b23      	ldr	r3, [pc, #140]	@ (8000a58 <MX_GPIO_Init+0xd4>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009ce:	4a22      	ldr	r2, [pc, #136]	@ (8000a58 <MX_GPIO_Init+0xd4>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009d6:	4b20      	ldr	r3, [pc, #128]	@ (8000a58 <MX_GPIO_Init+0xd4>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a58 <MX_GPIO_Init+0xd4>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009e6:	4a1c      	ldr	r2, [pc, #112]	@ (8000a58 <MX_GPIO_Init+0xd4>)
 80009e8:	f043 0302 	orr.w	r3, r3, #2
 80009ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80009ee:	4b1a      	ldr	r3, [pc, #104]	@ (8000a58 <MX_GPIO_Init+0xd4>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80009f2:	f003 0302 	and.w	r3, r3, #2
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2120      	movs	r1, #32
 80009fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a02:	f002 fd23 	bl	800344c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a0c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000a10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	480f      	ldr	r0, [pc, #60]	@ (8000a5c <MX_GPIO_Init+0xd8>)
 8000a1e:	f002 fb93 	bl	8003148 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a22:	2320      	movs	r3, #32
 8000a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	4619      	mov	r1, r3
 8000a38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a3c:	f002 fb84 	bl	8003148 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2100      	movs	r1, #0
 8000a44:	2028      	movs	r0, #40	@ 0x28
 8000a46:	f002 f80a 	bl	8002a5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a4a:	2028      	movs	r0, #40	@ 0x28
 8000a4c:	f002 f821 	bl	8002a92 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a50:	bf00      	nop
 8000a52:	3728      	adds	r7, #40	@ 0x28
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	48000800 	.word	0x48000800

08000a60 <UARTInterruptConfig>:

/* USER CODE BEGIN 4 */
void UARTInterruptConfig()
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&hlpuart1, A,4);
 8000a64:	2204      	movs	r2, #4
 8000a66:	4903      	ldr	r1, [pc, #12]	@ (8000a74 <UARTInterruptConfig+0x14>)
 8000a68:	4803      	ldr	r0, [pc, #12]	@ (8000a78 <UARTInterruptConfig+0x18>)
 8000a6a:	f005 fc61 	bl	8006330 <HAL_UART_Receive_IT>
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	200002b0 	.word	0x200002b0
 8000a78:	20000214 	.word	0x20000214

08000a7c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]

	if(huart == &hlpuart1)
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a07      	ldr	r2, [pc, #28]	@ (8000aa4 <HAL_UART_RxCpltCallback+0x28>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d107      	bne.n	8000a9c <HAL_UART_RxCpltCallback+0x20>
	{
		A[5] = '\0';
 8000a8c:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <HAL_UART_RxCpltCallback+0x2c>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	715a      	strb	r2, [r3, #5]
		HAL_UART_Receive_IT(&hlpuart1, A, 4);
 8000a92:	2204      	movs	r2, #4
 8000a94:	4904      	ldr	r1, [pc, #16]	@ (8000aa8 <HAL_UART_RxCpltCallback+0x2c>)
 8000a96:	4803      	ldr	r0, [pc, #12]	@ (8000aa4 <HAL_UART_RxCpltCallback+0x28>)
 8000a98:	f005 fc4a 	bl	8006330 <HAL_UART_Receive_IT>
	}
}
 8000a9c:	bf00      	nop
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	20000214 	.word	0x20000214
 8000aa8:	200002b0 	.word	0x200002b0

08000aac <EEPROMWriteExample>:
void EEPROMWriteExample() {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af02      	add	r7, sp, #8
if (eepromExampleWriteFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8000ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8000af0 <EEPROMWriteExample+0x44>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d017      	beq.n	8000aea <EEPROMWriteExample+0x3e>
 8000aba:	4b0e      	ldr	r3, [pc, #56]	@ (8000af4 <EEPROMWriteExample+0x48>)
 8000abc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000ac0:	b2db      	uxtb	r3, r3
 8000ac2:	2b20      	cmp	r3, #32
 8000ac4:	d111      	bne.n	8000aea <EEPROMWriteExample+0x3e>
static uint8_t data[4] = { 0x00, 0x02, 0x55, 0xaa };
data[0] = High_Score;
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <EEPROMWriteExample+0x4c>)
 8000ac8:	881b      	ldrh	r3, [r3, #0]
 8000aca:	b2da      	uxtb	r2, r3
 8000acc:	4b0b      	ldr	r3, [pc, #44]	@ (8000afc <EEPROMWriteExample+0x50>)
 8000ace:	701a      	strb	r2, [r3, #0]
//data[0] = 5;
HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDR, 0x2C, I2C_MEMADD_SIZE_16BIT,data, 4);
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	9301      	str	r3, [sp, #4]
 8000ad4:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <EEPROMWriteExample+0x50>)
 8000ad6:	9300      	str	r3, [sp, #0]
 8000ad8:	2302      	movs	r3, #2
 8000ada:	222c      	movs	r2, #44	@ 0x2c
 8000adc:	21a0      	movs	r1, #160	@ 0xa0
 8000ade:	4805      	ldr	r0, [pc, #20]	@ (8000af4 <EEPROMWriteExample+0x48>)
 8000ae0:	f002 fd80 	bl	80035e4 <HAL_I2C_Mem_Write_IT>

eepromExampleWriteFlag = 0;
 8000ae4:	4b02      	ldr	r3, [pc, #8]	@ (8000af0 <EEPROMWriteExample+0x44>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	701a      	strb	r2, [r3, #0]
}
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	200002a8 	.word	0x200002a8
 8000af4:	20000100 	.word	0x20000100
 8000af8:	200002ea 	.word	0x200002ea
 8000afc:	20000004 	.word	0x20000004

08000b00 <EEPROMReadExample>:
void EEPROMReadExample(uint8_t *Rdata, uint16_t len) {
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af02      	add	r7, sp, #8
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	460b      	mov	r3, r1
 8000b0a:	807b      	strh	r3, [r7, #2]
if (eepromExampleReadFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8000b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b44 <EEPROMReadExample+0x44>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d012      	beq.n	8000b3a <EEPROMReadExample+0x3a>
 8000b14:	4b0c      	ldr	r3, [pc, #48]	@ (8000b48 <EEPROMReadExample+0x48>)
 8000b16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	2b20      	cmp	r3, #32
 8000b1e:	d10c      	bne.n	8000b3a <EEPROMReadExample+0x3a>
HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDR, 0x2c, I2C_MEMADD_SIZE_16BIT,Rdata, len);
 8000b20:	887b      	ldrh	r3, [r7, #2]
 8000b22:	9301      	str	r3, [sp, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	9300      	str	r3, [sp, #0]
 8000b28:	2302      	movs	r3, #2
 8000b2a:	222c      	movs	r2, #44	@ 0x2c
 8000b2c:	21a0      	movs	r1, #160	@ 0xa0
 8000b2e:	4806      	ldr	r0, [pc, #24]	@ (8000b48 <EEPROMReadExample+0x48>)
 8000b30:	f002 fde2 	bl	80036f8 <HAL_I2C_Mem_Read_IT>
eepromExampleReadFlag = 0;
 8000b34:	4b03      	ldr	r3, [pc, #12]	@ (8000b44 <EEPROMReadExample+0x44>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	701a      	strb	r2, [r3, #0]
}
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000000 	.word	0x20000000
 8000b48:	20000100 	.word	0x20000100

08000b4c <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8000b56:	88fb      	ldrh	r3, [r7, #6]
 8000b58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b5c:	d107      	bne.n	8000b6e <HAL_GPIO_EXTI_Callback+0x22>
	{
		eepromExampleWriteFlag = 1;
 8000b5e:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000b60:	2201      	movs	r2, #1
 8000b62:	701a      	strb	r2, [r3, #0]
		High_Score = 0;
 8000b64:	4b05      	ldr	r3, [pc, #20]	@ (8000b7c <HAL_GPIO_EXTI_Callback+0x30>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	801a      	strh	r2, [r3, #0]
		EEPROMWriteExample();
 8000b6a:	f7ff ff9f 	bl	8000aac <EEPROMWriteExample>
	}
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	200002a8 	.word	0x200002a8
 8000b7c:	200002ea 	.word	0x200002ea

08000b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b84:	b672      	cpsid	i
}
 8000b86:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <Error_Handler+0x8>

08000b8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b92:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd0 <HAL_MspInit+0x44>)
 8000b94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b96:	4a0e      	ldr	r2, [pc, #56]	@ (8000bd0 <HAL_MspInit+0x44>)
 8000b98:	f043 0301 	orr.w	r3, r3, #1
 8000b9c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8000bd0 <HAL_MspInit+0x44>)
 8000ba0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ba2:	f003 0301 	and.w	r3, r3, #1
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	4b09      	ldr	r3, [pc, #36]	@ (8000bd0 <HAL_MspInit+0x44>)
 8000bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bae:	4a08      	ldr	r2, [pc, #32]	@ (8000bd0 <HAL_MspInit+0x44>)
 8000bb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bb4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bb6:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <HAL_MspInit+0x44>)
 8000bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000bc2:	f004 fb4b 	bl	800525c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	3708      	adds	r7, #8
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b09e      	sub	sp, #120	@ 0x78
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bdc:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000be0:	2200      	movs	r2, #0
 8000be2:	601a      	str	r2, [r3, #0]
 8000be4:	605a      	str	r2, [r3, #4]
 8000be6:	609a      	str	r2, [r3, #8]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bec:	f107 0310 	add.w	r3, r7, #16
 8000bf0:	2254      	movs	r2, #84	@ 0x54
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f007 fbe9 	bl	80083cc <memset>
  if(hadc->Instance==ADC1)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000c02:	d15f      	bne.n	8000cc4 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000c04:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000c08:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000c0a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000c0e:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c10:	f107 0310 	add.w	r3, r7, #16
 8000c14:	4618      	mov	r0, r3
 8000c16:	f005 f85f 	bl	8005cd8 <HAL_RCCEx_PeriphCLKConfig>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000c20:	f7ff ffae 	bl	8000b80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000c24:	4b29      	ldr	r3, [pc, #164]	@ (8000ccc <HAL_ADC_MspInit+0xf8>)
 8000c26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c28:	4a28      	ldr	r2, [pc, #160]	@ (8000ccc <HAL_ADC_MspInit+0xf8>)
 8000c2a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000c2e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c30:	4b26      	ldr	r3, [pc, #152]	@ (8000ccc <HAL_ADC_MspInit+0xf8>)
 8000c32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c38:	60fb      	str	r3, [r7, #12]
 8000c3a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3c:	4b23      	ldr	r3, [pc, #140]	@ (8000ccc <HAL_ADC_MspInit+0xf8>)
 8000c3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c40:	4a22      	ldr	r2, [pc, #136]	@ (8000ccc <HAL_ADC_MspInit+0xf8>)
 8000c42:	f043 0301 	orr.w	r3, r3, #1
 8000c46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c48:	4b20      	ldr	r3, [pc, #128]	@ (8000ccc <HAL_ADC_MspInit+0xf8>)
 8000c4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4c:	f003 0301 	and.w	r3, r3, #1
 8000c50:	60bb      	str	r3, [r7, #8]
 8000c52:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c54:	2301      	movs	r3, #1
 8000c56:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c60:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000c64:	4619      	mov	r1, r3
 8000c66:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000c6a:	f002 fa6d 	bl	8003148 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8000c6e:	4b18      	ldr	r3, [pc, #96]	@ (8000cd0 <HAL_ADC_MspInit+0xfc>)
 8000c70:	4a18      	ldr	r2, [pc, #96]	@ (8000cd4 <HAL_ADC_MspInit+0x100>)
 8000c72:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000c74:	4b16      	ldr	r3, [pc, #88]	@ (8000cd0 <HAL_ADC_MspInit+0xfc>)
 8000c76:	2205      	movs	r2, #5
 8000c78:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c7a:	4b15      	ldr	r3, [pc, #84]	@ (8000cd0 <HAL_ADC_MspInit+0xfc>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c80:	4b13      	ldr	r3, [pc, #76]	@ (8000cd0 <HAL_ADC_MspInit+0xfc>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c86:	4b12      	ldr	r3, [pc, #72]	@ (8000cd0 <HAL_ADC_MspInit+0xfc>)
 8000c88:	2280      	movs	r2, #128	@ 0x80
 8000c8a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c8c:	4b10      	ldr	r3, [pc, #64]	@ (8000cd0 <HAL_ADC_MspInit+0xfc>)
 8000c8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c92:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c94:	4b0e      	ldr	r3, [pc, #56]	@ (8000cd0 <HAL_ADC_MspInit+0xfc>)
 8000c96:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c9a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd0 <HAL_ADC_MspInit+0xfc>)
 8000c9e:	2220      	movs	r2, #32
 8000ca0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd0 <HAL_ADC_MspInit+0xfc>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ca8:	4809      	ldr	r0, [pc, #36]	@ (8000cd0 <HAL_ADC_MspInit+0xfc>)
 8000caa:	f001 ff0d 	bl	8002ac8 <HAL_DMA_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8000cb4:	f7ff ff64 	bl	8000b80 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4a05      	ldr	r2, [pc, #20]	@ (8000cd0 <HAL_ADC_MspInit+0xfc>)
 8000cbc:	655a      	str	r2, [r3, #84]	@ 0x54
 8000cbe:	4a04      	ldr	r2, [pc, #16]	@ (8000cd0 <HAL_ADC_MspInit+0xfc>)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cc4:	bf00      	nop
 8000cc6:	3778      	adds	r7, #120	@ 0x78
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	200000a0 	.word	0x200000a0
 8000cd4:	40020030 	.word	0x40020030

08000cd8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b0a0      	sub	sp, #128	@ 0x80
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce0:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	605a      	str	r2, [r3, #4]
 8000cea:	609a      	str	r2, [r3, #8]
 8000cec:	60da      	str	r2, [r3, #12]
 8000cee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cf0:	f107 0318 	add.w	r3, r7, #24
 8000cf4:	2254      	movs	r2, #84	@ 0x54
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f007 fb67 	bl	80083cc <memset>
  if(hi2c->Instance==I2C1)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a5f      	ldr	r2, [pc, #380]	@ (8000e80 <HAL_I2C_MspInit+0x1a8>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	f040 80b7 	bne.w	8000e78 <HAL_I2C_MspInit+0x1a0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000d0a:	2340      	movs	r3, #64	@ 0x40
 8000d0c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d12:	f107 0318 	add.w	r3, r7, #24
 8000d16:	4618      	mov	r0, r3
 8000d18:	f004 ffde 	bl	8005cd8 <HAL_RCCEx_PeriphCLKConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000d22:	f7ff ff2d 	bl	8000b80 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d26:	4b57      	ldr	r3, [pc, #348]	@ (8000e84 <HAL_I2C_MspInit+0x1ac>)
 8000d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d2a:	4a56      	ldr	r2, [pc, #344]	@ (8000e84 <HAL_I2C_MspInit+0x1ac>)
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d32:	4b54      	ldr	r3, [pc, #336]	@ (8000e84 <HAL_I2C_MspInit+0x1ac>)
 8000d34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	617b      	str	r3, [r7, #20]
 8000d3c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3e:	4b51      	ldr	r3, [pc, #324]	@ (8000e84 <HAL_I2C_MspInit+0x1ac>)
 8000d40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d42:	4a50      	ldr	r2, [pc, #320]	@ (8000e84 <HAL_I2C_MspInit+0x1ac>)
 8000d44:	f043 0302 	orr.w	r3, r3, #2
 8000d48:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d4a:	4b4e      	ldr	r3, [pc, #312]	@ (8000e84 <HAL_I2C_MspInit+0x1ac>)
 8000d4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d5c:	2312      	movs	r3, #18
 8000d5e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d68:	2304      	movs	r3, #4
 8000d6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000d70:	4619      	mov	r1, r3
 8000d72:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d76:	f002 f9e7 	bl	8003148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d7e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d80:	2312      	movs	r3, #18
 8000d82:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d8c:	2304      	movs	r3, #4
 8000d8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d90:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000d94:	4619      	mov	r1, r3
 8000d96:	483c      	ldr	r0, [pc, #240]	@ (8000e88 <HAL_I2C_MspInit+0x1b0>)
 8000d98:	f002 f9d6 	bl	8003148 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d9c:	4b39      	ldr	r3, [pc, #228]	@ (8000e84 <HAL_I2C_MspInit+0x1ac>)
 8000d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000da0:	4a38      	ldr	r2, [pc, #224]	@ (8000e84 <HAL_I2C_MspInit+0x1ac>)
 8000da2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000da6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000da8:	4b36      	ldr	r3, [pc, #216]	@ (8000e84 <HAL_I2C_MspInit+0x1ac>)
 8000daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel1;
 8000db4:	4b35      	ldr	r3, [pc, #212]	@ (8000e8c <HAL_I2C_MspInit+0x1b4>)
 8000db6:	4a36      	ldr	r2, [pc, #216]	@ (8000e90 <HAL_I2C_MspInit+0x1b8>)
 8000db8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8000dba:	4b34      	ldr	r3, [pc, #208]	@ (8000e8c <HAL_I2C_MspInit+0x1b4>)
 8000dbc:	2210      	movs	r2, #16
 8000dbe:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dc0:	4b32      	ldr	r3, [pc, #200]	@ (8000e8c <HAL_I2C_MspInit+0x1b4>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dc6:	4b31      	ldr	r3, [pc, #196]	@ (8000e8c <HAL_I2C_MspInit+0x1b4>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dcc:	4b2f      	ldr	r3, [pc, #188]	@ (8000e8c <HAL_I2C_MspInit+0x1b4>)
 8000dce:	2280      	movs	r2, #128	@ 0x80
 8000dd0:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dd2:	4b2e      	ldr	r3, [pc, #184]	@ (8000e8c <HAL_I2C_MspInit+0x1b4>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dd8:	4b2c      	ldr	r3, [pc, #176]	@ (8000e8c <HAL_I2C_MspInit+0x1b4>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000dde:	4b2b      	ldr	r3, [pc, #172]	@ (8000e8c <HAL_I2C_MspInit+0x1b4>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000de4:	4b29      	ldr	r3, [pc, #164]	@ (8000e8c <HAL_I2C_MspInit+0x1b4>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000dea:	4828      	ldr	r0, [pc, #160]	@ (8000e8c <HAL_I2C_MspInit+0x1b4>)
 8000dec:	f001 fe6c 	bl	8002ac8 <HAL_DMA_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <HAL_I2C_MspInit+0x122>
    {
      Error_Handler();
 8000df6:	f7ff fec3 	bl	8000b80 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a23      	ldr	r2, [pc, #140]	@ (8000e8c <HAL_I2C_MspInit+0x1b4>)
 8000dfe:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e00:	4a22      	ldr	r2, [pc, #136]	@ (8000e8c <HAL_I2C_MspInit+0x1b4>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8000e06:	4b23      	ldr	r3, [pc, #140]	@ (8000e94 <HAL_I2C_MspInit+0x1bc>)
 8000e08:	4a23      	ldr	r2, [pc, #140]	@ (8000e98 <HAL_I2C_MspInit+0x1c0>)
 8000e0a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8000e0c:	4b21      	ldr	r3, [pc, #132]	@ (8000e94 <HAL_I2C_MspInit+0x1bc>)
 8000e0e:	2211      	movs	r2, #17
 8000e10:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e12:	4b20      	ldr	r3, [pc, #128]	@ (8000e94 <HAL_I2C_MspInit+0x1bc>)
 8000e14:	2210      	movs	r2, #16
 8000e16:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e18:	4b1e      	ldr	r3, [pc, #120]	@ (8000e94 <HAL_I2C_MspInit+0x1bc>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e1e:	4b1d      	ldr	r3, [pc, #116]	@ (8000e94 <HAL_I2C_MspInit+0x1bc>)
 8000e20:	2280      	movs	r2, #128	@ 0x80
 8000e22:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e24:	4b1b      	ldr	r3, [pc, #108]	@ (8000e94 <HAL_I2C_MspInit+0x1bc>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000e94 <HAL_I2C_MspInit+0x1bc>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000e30:	4b18      	ldr	r3, [pc, #96]	@ (8000e94 <HAL_I2C_MspInit+0x1bc>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e36:	4b17      	ldr	r3, [pc, #92]	@ (8000e94 <HAL_I2C_MspInit+0x1bc>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000e3c:	4815      	ldr	r0, [pc, #84]	@ (8000e94 <HAL_I2C_MspInit+0x1bc>)
 8000e3e:	f001 fe43 	bl	8002ac8 <HAL_DMA_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <HAL_I2C_MspInit+0x174>
    {
      Error_Handler();
 8000e48:	f7ff fe9a 	bl	8000b80 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a11      	ldr	r2, [pc, #68]	@ (8000e94 <HAL_I2C_MspInit+0x1bc>)
 8000e50:	639a      	str	r2, [r3, #56]	@ 0x38
 8000e52:	4a10      	ldr	r2, [pc, #64]	@ (8000e94 <HAL_I2C_MspInit+0x1bc>)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	201f      	movs	r0, #31
 8000e5e:	f001 fdfe 	bl	8002a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000e62:	201f      	movs	r0, #31
 8000e64:	f001 fe15 	bl	8002a92 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	2020      	movs	r0, #32
 8000e6e:	f001 fdf6 	bl	8002a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000e72:	2020      	movs	r0, #32
 8000e74:	f001 fe0d 	bl	8002a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e78:	bf00      	nop
 8000e7a:	3780      	adds	r7, #128	@ 0x80
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40005400 	.word	0x40005400
 8000e84:	40021000 	.word	0x40021000
 8000e88:	48000400 	.word	0x48000400
 8000e8c:	20000154 	.word	0x20000154
 8000e90:	40020008 	.word	0x40020008
 8000e94:	200001b4 	.word	0x200001b4
 8000e98:	4002001c 	.word	0x4002001c

08000e9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b09e      	sub	sp, #120	@ 0x78
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eb4:	f107 0310 	add.w	r3, r7, #16
 8000eb8:	2254      	movs	r2, #84	@ 0x54
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f007 fa85 	bl	80083cc <memset>
  if(huart->Instance==LPUART1)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a23      	ldr	r2, [pc, #140]	@ (8000f54 <HAL_UART_MspInit+0xb8>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d13e      	bne.n	8000f4a <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000ecc:	2320      	movs	r3, #32
 8000ece:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ed4:	f107 0310 	add.w	r3, r7, #16
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f004 fefd 	bl	8005cd8 <HAL_RCCEx_PeriphCLKConfig>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ee4:	f7ff fe4c 	bl	8000b80 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f58 <HAL_UART_MspInit+0xbc>)
 8000eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000eec:	4a1a      	ldr	r2, [pc, #104]	@ (8000f58 <HAL_UART_MspInit+0xbc>)
 8000eee:	f043 0301 	orr.w	r3, r3, #1
 8000ef2:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000ef4:	4b18      	ldr	r3, [pc, #96]	@ (8000f58 <HAL_UART_MspInit+0xbc>)
 8000ef6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ef8:	f003 0301 	and.w	r3, r3, #1
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f00:	4b15      	ldr	r3, [pc, #84]	@ (8000f58 <HAL_UART_MspInit+0xbc>)
 8000f02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f04:	4a14      	ldr	r2, [pc, #80]	@ (8000f58 <HAL_UART_MspInit+0xbc>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f0c:	4b12      	ldr	r3, [pc, #72]	@ (8000f58 <HAL_UART_MspInit+0xbc>)
 8000f0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000f18:	230c      	movs	r3, #12
 8000f1a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f24:	2300      	movs	r3, #0
 8000f26:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000f28:	230c      	movs	r3, #12
 8000f2a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f30:	4619      	mov	r1, r3
 8000f32:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f36:	f002 f907 	bl	8003148 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	205b      	movs	r0, #91	@ 0x5b
 8000f40:	f001 fd8d 	bl	8002a5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000f44:	205b      	movs	r0, #91	@ 0x5b
 8000f46:	f001 fda4 	bl	8002a92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000f4a:	bf00      	nop
 8000f4c:	3778      	adds	r7, #120	@ 0x78
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40008000 	.word	0x40008000
 8000f58:	40021000 	.word	0x40021000

08000f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <NMI_Handler+0x4>

08000f64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <HardFault_Handler+0x4>

08000f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f70:	bf00      	nop
 8000f72:	e7fd      	b.n	8000f70 <MemManage_Handler+0x4>

08000f74 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <BusFault_Handler+0x4>

08000f7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <UsageFault_Handler+0x4>

08000f84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f92:	b480      	push	{r7}
 8000f94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb2:	f000 f8d5 	bl	8001160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000fc0:	4802      	ldr	r0, [pc, #8]	@ (8000fcc <DMA1_Channel1_IRQHandler+0x10>)
 8000fc2:	f001 ff64 	bl	8002e8e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	20000154 	.word	0x20000154

08000fd0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000fd4:	4802      	ldr	r0, [pc, #8]	@ (8000fe0 <DMA1_Channel2_IRQHandler+0x10>)
 8000fd6:	f001 ff5a 	bl	8002e8e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	200001b4 	.word	0x200001b4

08000fe4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fe8:	4802      	ldr	r0, [pc, #8]	@ (8000ff4 <DMA1_Channel3_IRQHandler+0x10>)
 8000fea:	f001 ff50 	bl	8002e8e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	200000a0 	.word	0x200000a0

08000ff8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000ffc:	4802      	ldr	r0, [pc, #8]	@ (8001008 <I2C1_EV_IRQHandler+0x10>)
 8000ffe:	f002 fc01 	bl	8003804 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001002:	bf00      	nop
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	20000100 	.word	0x20000100

0800100c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001010:	4802      	ldr	r0, [pc, #8]	@ (800101c <I2C1_ER_IRQHandler+0x10>)
 8001012:	f002 fc11 	bl	8003838 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000100 	.word	0x20000100

08001020 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001024:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001028:	f002 fa28 	bl	800347c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}

08001030 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001034:	4802      	ldr	r0, [pc, #8]	@ (8001040 <LPUART1_IRQHandler+0x10>)
 8001036:	f005 f9c7 	bl	80063c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20000214 	.word	0x20000214

08001044 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001048:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <SystemInit+0x20>)
 800104a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800104e:	4a05      	ldr	r2, [pc, #20]	@ (8001064 <SystemInit+0x20>)
 8001050:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001054:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	e000ed00 	.word	0xe000ed00

08001068 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001068:	480d      	ldr	r0, [pc, #52]	@ (80010a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800106a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800106c:	f7ff ffea 	bl	8001044 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001070:	480c      	ldr	r0, [pc, #48]	@ (80010a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001072:	490d      	ldr	r1, [pc, #52]	@ (80010a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001074:	4a0d      	ldr	r2, [pc, #52]	@ (80010ac <LoopForever+0xe>)
  movs r3, #0
 8001076:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001078:	e002      	b.n	8001080 <LoopCopyDataInit>

0800107a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800107c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800107e:	3304      	adds	r3, #4

08001080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001084:	d3f9      	bcc.n	800107a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001086:	4a0a      	ldr	r2, [pc, #40]	@ (80010b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001088:	4c0a      	ldr	r4, [pc, #40]	@ (80010b4 <LoopForever+0x16>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800108c:	e001      	b.n	8001092 <LoopFillZerobss>

0800108e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800108e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001090:	3204      	adds	r2, #4

08001092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001094:	d3fb      	bcc.n	800108e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001096:	f007 f9a1 	bl	80083dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800109a:	f7ff fa35 	bl	8000508 <main>

0800109e <LoopForever>:

LoopForever:
    b LoopForever
 800109e:	e7fe      	b.n	800109e <LoopForever>
  ldr   r0, =_estack
 80010a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80010ac:	0800848c 	.word	0x0800848c
  ldr r2, =_sbss
 80010b0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80010b4:	200002fc 	.word	0x200002fc

080010b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010b8:	e7fe      	b.n	80010b8 <ADC1_2_IRQHandler>

080010ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010c0:	2300      	movs	r3, #0
 80010c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c4:	2003      	movs	r0, #3
 80010c6:	f001 fcbf 	bl	8002a48 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010ca:	2000      	movs	r0, #0
 80010cc:	f000 f80e 	bl	80010ec <HAL_InitTick>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d002      	beq.n	80010dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	71fb      	strb	r3, [r7, #7]
 80010da:	e001      	b.n	80010e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010dc:	f7ff fd56 	bl	8000b8c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010e0:	79fb      	ldrb	r3, [r7, #7]

}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
	...

080010ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010f4:	2300      	movs	r3, #0
 80010f6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80010f8:	4b16      	ldr	r3, [pc, #88]	@ (8001154 <HAL_InitTick+0x68>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d022      	beq.n	8001146 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001100:	4b15      	ldr	r3, [pc, #84]	@ (8001158 <HAL_InitTick+0x6c>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b13      	ldr	r3, [pc, #76]	@ (8001154 <HAL_InitTick+0x68>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800110c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001110:	fbb2 f3f3 	udiv	r3, r2, r3
 8001114:	4618      	mov	r0, r3
 8001116:	f001 fcca 	bl	8002aae <HAL_SYSTICK_Config>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d10f      	bne.n	8001140 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b0f      	cmp	r3, #15
 8001124:	d809      	bhi.n	800113a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001126:	2200      	movs	r2, #0
 8001128:	6879      	ldr	r1, [r7, #4]
 800112a:	f04f 30ff 	mov.w	r0, #4294967295
 800112e:	f001 fc96 	bl	8002a5e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001132:	4a0a      	ldr	r2, [pc, #40]	@ (800115c <HAL_InitTick+0x70>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	e007      	b.n	800114a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	73fb      	strb	r3, [r7, #15]
 800113e:	e004      	b.n	800114a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	73fb      	strb	r3, [r7, #15]
 8001144:	e001      	b.n	800114a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001146:	2301      	movs	r3, #1
 8001148:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800114a:	7bfb      	ldrb	r3, [r7, #15]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	20000010 	.word	0x20000010
 8001158:	20000008 	.word	0x20000008
 800115c:	2000000c 	.word	0x2000000c

08001160 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001164:	4b05      	ldr	r3, [pc, #20]	@ (800117c <HAL_IncTick+0x1c>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4b05      	ldr	r3, [pc, #20]	@ (8001180 <HAL_IncTick+0x20>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4413      	add	r3, r2
 800116e:	4a03      	ldr	r2, [pc, #12]	@ (800117c <HAL_IncTick+0x1c>)
 8001170:	6013      	str	r3, [r2, #0]
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	200002f8 	.word	0x200002f8
 8001180:	20000010 	.word	0x20000010

08001184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return uwTick;
 8001188:	4b03      	ldr	r3, [pc, #12]	@ (8001198 <HAL_GetTick+0x14>)
 800118a:	681b      	ldr	r3, [r3, #0]
}
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	200002f8 	.word	0x200002f8

0800119c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b084      	sub	sp, #16
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a4:	f7ff ffee 	bl	8001184 <HAL_GetTick>
 80011a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011b4:	d004      	beq.n	80011c0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b6:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <HAL_Delay+0x40>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	4413      	add	r3, r2
 80011be:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011c0:	bf00      	nop
 80011c2:	f7ff ffdf 	bl	8001184 <HAL_GetTick>
 80011c6:	4602      	mov	r2, r0
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	68fa      	ldr	r2, [r7, #12]
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d8f7      	bhi.n	80011c2 <HAL_Delay+0x26>
  {
  }
}
 80011d2:	bf00      	nop
 80011d4:	bf00      	nop
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20000010 	.word	0x20000010

080011e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	689b      	ldr	r3, [r3, #8]
 80011ee:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	431a      	orrs	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	609a      	str	r2, [r3, #8]
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001206:	b480      	push	{r7}
 8001208:	b083      	sub	sp, #12
 800120a:	af00      	add	r7, sp, #0
 800120c:	6078      	str	r0, [r7, #4]
 800120e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	431a      	orrs	r2, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	609a      	str	r2, [r3, #8]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800123c:	4618      	mov	r0, r3
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001248:	b480      	push	{r7}
 800124a:	b087      	sub	sp, #28
 800124c:	af00      	add	r7, sp, #0
 800124e:	60f8      	str	r0, [r7, #12]
 8001250:	60b9      	str	r1, [r7, #8]
 8001252:	607a      	str	r2, [r7, #4]
 8001254:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	3360      	adds	r3, #96	@ 0x60
 800125a:	461a      	mov	r2, r3
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	4413      	add	r3, r2
 8001262:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b08      	ldr	r3, [pc, #32]	@ (800128c <LL_ADC_SetOffset+0x44>)
 800126a:	4013      	ands	r3, r2
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001272:	683a      	ldr	r2, [r7, #0]
 8001274:	430a      	orrs	r2, r1
 8001276:	4313      	orrs	r3, r2
 8001278:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001280:	bf00      	nop
 8001282:	371c      	adds	r7, #28
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	03fff000 	.word	0x03fff000

08001290 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3360      	adds	r3, #96	@ 0x60
 800129e:	461a      	mov	r2, r3
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	4413      	add	r3, r2
 80012a6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80012bc:	b480      	push	{r7}
 80012be:	b087      	sub	sp, #28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	60f8      	str	r0, [r7, #12]
 80012c4:	60b9      	str	r1, [r7, #8]
 80012c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	3360      	adds	r3, #96	@ 0x60
 80012cc:	461a      	mov	r2, r3
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	431a      	orrs	r2, r3
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80012e6:	bf00      	nop
 80012e8:	371c      	adds	r7, #28
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80012f2:	b480      	push	{r7}
 80012f4:	b087      	sub	sp, #28
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	60f8      	str	r0, [r7, #12]
 80012fa:	60b9      	str	r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	3360      	adds	r3, #96	@ 0x60
 8001302:	461a      	mov	r2, r3
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	4413      	add	r3, r2
 800130a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	431a      	orrs	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800131c:	bf00      	nop
 800131e:	371c      	adds	r7, #28
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001328:	b480      	push	{r7}
 800132a:	b087      	sub	sp, #28
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	3360      	adds	r3, #96	@ 0x60
 8001338:	461a      	mov	r2, r3
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	009b      	lsls	r3, r3, #2
 800133e:	4413      	add	r3, r2
 8001340:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	431a      	orrs	r2, r3
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001352:	bf00      	nop
 8001354:	371c      	adds	r7, #28
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800135e:	b480      	push	{r7}
 8001360:	b083      	sub	sp, #12
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
 8001366:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	431a      	orrs	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	615a      	str	r2, [r3, #20]
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001394:	2b00      	cmp	r3, #0
 8001396:	d101      	bne.n	800139c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001398:	2301      	movs	r3, #1
 800139a:	e000      	b.n	800139e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b087      	sub	sp, #28
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	60f8      	str	r0, [r7, #12]
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	3330      	adds	r3, #48	@ 0x30
 80013ba:	461a      	mov	r2, r3
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	0a1b      	lsrs	r3, r3, #8
 80013c0:	009b      	lsls	r3, r3, #2
 80013c2:	f003 030c 	and.w	r3, r3, #12
 80013c6:	4413      	add	r3, r2
 80013c8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	f003 031f 	and.w	r3, r3, #31
 80013d4:	211f      	movs	r1, #31
 80013d6:	fa01 f303 	lsl.w	r3, r1, r3
 80013da:	43db      	mvns	r3, r3
 80013dc:	401a      	ands	r2, r3
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	0e9b      	lsrs	r3, r3, #26
 80013e2:	f003 011f 	and.w	r1, r3, #31
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	f003 031f 	and.w	r3, r3, #31
 80013ec:	fa01 f303 	lsl.w	r3, r1, r3
 80013f0:	431a      	orrs	r2, r3
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80013f6:	bf00      	nop
 80013f8:	371c      	adds	r7, #28
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001402:	b480      	push	{r7}
 8001404:	b087      	sub	sp, #28
 8001406:	af00      	add	r7, sp, #0
 8001408:	60f8      	str	r0, [r7, #12]
 800140a:	60b9      	str	r1, [r7, #8]
 800140c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	3314      	adds	r3, #20
 8001412:	461a      	mov	r2, r3
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	0e5b      	lsrs	r3, r3, #25
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	f003 0304 	and.w	r3, r3, #4
 800141e:	4413      	add	r3, r2
 8001420:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	0d1b      	lsrs	r3, r3, #20
 800142a:	f003 031f 	and.w	r3, r3, #31
 800142e:	2107      	movs	r1, #7
 8001430:	fa01 f303 	lsl.w	r3, r1, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	401a      	ands	r2, r3
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	0d1b      	lsrs	r3, r3, #20
 800143c:	f003 031f 	and.w	r3, r3, #31
 8001440:	6879      	ldr	r1, [r7, #4]
 8001442:	fa01 f303 	lsl.w	r3, r1, r3
 8001446:	431a      	orrs	r2, r3
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800144c:	bf00      	nop
 800144e:	371c      	adds	r7, #28
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001470:	43db      	mvns	r3, r3
 8001472:	401a      	ands	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	f003 0318 	and.w	r3, r3, #24
 800147a:	4908      	ldr	r1, [pc, #32]	@ (800149c <LL_ADC_SetChannelSingleDiff+0x44>)
 800147c:	40d9      	lsrs	r1, r3
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	400b      	ands	r3, r1
 8001482:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001486:	431a      	orrs	r2, r3
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800148e:	bf00      	nop
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	0007ffff 	.word	0x0007ffff

080014a0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f003 031f 	and.w	r3, r3, #31
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	370c      	adds	r7, #12
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80014cc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80014d0:	687a      	ldr	r2, [r7, #4]
 80014d2:	6093      	str	r3, [r2, #8]
}
 80014d4:	bf00      	nop
 80014d6:	370c      	adds	r7, #12
 80014d8:	46bd      	mov	sp, r7
 80014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014de:	4770      	bx	lr

080014e0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80014f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80014f4:	d101      	bne.n	80014fa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80014f6:	2301      	movs	r3, #1
 80014f8:	e000      	b.n	80014fc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001518:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800151c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001540:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001544:	d101      	bne.n	800154a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001546:	2301      	movs	r3, #1
 8001548:	e000      	b.n	800154c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001568:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800156c:	f043 0201 	orr.w	r2, r3, #1
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	689b      	ldr	r3, [r3, #8]
 800158c:	f003 0301 	and.w	r3, r3, #1
 8001590:	2b01      	cmp	r3, #1
 8001592:	d101      	bne.n	8001598 <LL_ADC_IsEnabled+0x18>
 8001594:	2301      	movs	r3, #1
 8001596:	e000      	b.n	800159a <LL_ADC_IsEnabled+0x1a>
 8001598:	2300      	movs	r3, #0
}
 800159a:	4618      	mov	r0, r3
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80015b6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80015ba:	f043 0204 	orr.w	r2, r3, #4
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80015ce:	b480      	push	{r7}
 80015d0:	b083      	sub	sp, #12
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f003 0304 	and.w	r3, r3, #4
 80015de:	2b04      	cmp	r3, #4
 80015e0:	d101      	bne.n	80015e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80015e2:	2301      	movs	r3, #1
 80015e4:	e000      	b.n	80015e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80015e6:	2300      	movs	r3, #0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f003 0308 	and.w	r3, r3, #8
 8001604:	2b08      	cmp	r3, #8
 8001606:	d101      	bne.n	800160c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001608:	2301      	movs	r3, #1
 800160a:	e000      	b.n	800160e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
	...

0800161c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800161c:	b590      	push	{r4, r7, lr}
 800161e:	b089      	sub	sp, #36	@ 0x24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001624:	2300      	movs	r3, #0
 8001626:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e1a9      	b.n	800198a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	695b      	ldr	r3, [r3, #20]
 800163a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001640:	2b00      	cmp	r3, #0
 8001642:	d109      	bne.n	8001658 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff fac5 	bl	8000bd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2200      	movs	r2, #0
 800164e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff ff3f 	bl	80014e0 <LL_ADC_IsDeepPowerDownEnabled>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d004      	beq.n	8001672 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ff25 	bl	80014bc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff ff5a 	bl	8001530 <LL_ADC_IsInternalRegulatorEnabled>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d115      	bne.n	80016ae <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4618      	mov	r0, r3
 8001688:	f7ff ff3e 	bl	8001508 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800168c:	4b9c      	ldr	r3, [pc, #624]	@ (8001900 <HAL_ADC_Init+0x2e4>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	099b      	lsrs	r3, r3, #6
 8001692:	4a9c      	ldr	r2, [pc, #624]	@ (8001904 <HAL_ADC_Init+0x2e8>)
 8001694:	fba2 2303 	umull	r2, r3, r2, r3
 8001698:	099b      	lsrs	r3, r3, #6
 800169a:	3301      	adds	r3, #1
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80016a0:	e002      	b.n	80016a8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	3b01      	subs	r3, #1
 80016a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f9      	bne.n	80016a2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7ff ff3c 	bl	8001530 <LL_ADC_IsInternalRegulatorEnabled>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d10d      	bne.n	80016da <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016c2:	f043 0210 	orr.w	r2, r3, #16
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016ce:	f043 0201 	orr.w	r2, r3, #1
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
 80016d8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff ff75 	bl	80015ce <LL_ADC_REG_IsConversionOngoing>
 80016e4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016ea:	f003 0310 	and.w	r3, r3, #16
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f040 8142 	bne.w	8001978 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f040 813e 	bne.w	8001978 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001700:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001704:	f043 0202 	orr.w	r2, r3, #2
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff ff35 	bl	8001580 <LL_ADC_IsEnabled>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d141      	bne.n	80017a0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001724:	d004      	beq.n	8001730 <HAL_ADC_Init+0x114>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a77      	ldr	r2, [pc, #476]	@ (8001908 <HAL_ADC_Init+0x2ec>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d10f      	bne.n	8001750 <HAL_ADC_Init+0x134>
 8001730:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001734:	f7ff ff24 	bl	8001580 <LL_ADC_IsEnabled>
 8001738:	4604      	mov	r4, r0
 800173a:	4873      	ldr	r0, [pc, #460]	@ (8001908 <HAL_ADC_Init+0x2ec>)
 800173c:	f7ff ff20 	bl	8001580 <LL_ADC_IsEnabled>
 8001740:	4603      	mov	r3, r0
 8001742:	4323      	orrs	r3, r4
 8001744:	2b00      	cmp	r3, #0
 8001746:	bf0c      	ite	eq
 8001748:	2301      	moveq	r3, #1
 800174a:	2300      	movne	r3, #0
 800174c:	b2db      	uxtb	r3, r3
 800174e:	e012      	b.n	8001776 <HAL_ADC_Init+0x15a>
 8001750:	486e      	ldr	r0, [pc, #440]	@ (800190c <HAL_ADC_Init+0x2f0>)
 8001752:	f7ff ff15 	bl	8001580 <LL_ADC_IsEnabled>
 8001756:	4604      	mov	r4, r0
 8001758:	486d      	ldr	r0, [pc, #436]	@ (8001910 <HAL_ADC_Init+0x2f4>)
 800175a:	f7ff ff11 	bl	8001580 <LL_ADC_IsEnabled>
 800175e:	4603      	mov	r3, r0
 8001760:	431c      	orrs	r4, r3
 8001762:	486c      	ldr	r0, [pc, #432]	@ (8001914 <HAL_ADC_Init+0x2f8>)
 8001764:	f7ff ff0c 	bl	8001580 <LL_ADC_IsEnabled>
 8001768:	4603      	mov	r3, r0
 800176a:	4323      	orrs	r3, r4
 800176c:	2b00      	cmp	r3, #0
 800176e:	bf0c      	ite	eq
 8001770:	2301      	moveq	r3, #1
 8001772:	2300      	movne	r3, #0
 8001774:	b2db      	uxtb	r3, r3
 8001776:	2b00      	cmp	r3, #0
 8001778:	d012      	beq.n	80017a0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001782:	d004      	beq.n	800178e <HAL_ADC_Init+0x172>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a5f      	ldr	r2, [pc, #380]	@ (8001908 <HAL_ADC_Init+0x2ec>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d101      	bne.n	8001792 <HAL_ADC_Init+0x176>
 800178e:	4a62      	ldr	r2, [pc, #392]	@ (8001918 <HAL_ADC_Init+0x2fc>)
 8001790:	e000      	b.n	8001794 <HAL_ADC_Init+0x178>
 8001792:	4a62      	ldr	r2, [pc, #392]	@ (800191c <HAL_ADC_Init+0x300>)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	4619      	mov	r1, r3
 800179a:	4610      	mov	r0, r2
 800179c:	f7ff fd20 	bl	80011e0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	7f5b      	ldrb	r3, [r3, #29]
 80017a4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017aa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80017b0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80017b6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80017be:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80017c0:	4313      	orrs	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d106      	bne.n	80017dc <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017d2:	3b01      	subs	r3, #1
 80017d4:	045b      	lsls	r3, r3, #17
 80017d6:	69ba      	ldr	r2, [r7, #24]
 80017d8:	4313      	orrs	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d009      	beq.n	80017f8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017e8:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	68da      	ldr	r2, [r3, #12]
 80017fe:	4b48      	ldr	r3, [pc, #288]	@ (8001920 <HAL_ADC_Init+0x304>)
 8001800:	4013      	ands	r3, r2
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	6812      	ldr	r2, [r2, #0]
 8001806:	69b9      	ldr	r1, [r7, #24]
 8001808:	430b      	orrs	r3, r1
 800180a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4618      	mov	r0, r3
 8001828:	f7ff fee4 	bl	80015f4 <LL_ADC_INJ_IsConversionOngoing>
 800182c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d17f      	bne.n	8001934 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d17c      	bne.n	8001934 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800183e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001846:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001848:	4313      	orrs	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001856:	f023 0302 	bic.w	r3, r3, #2
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	6812      	ldr	r2, [r2, #0]
 800185e:	69b9      	ldr	r1, [r7, #24]
 8001860:	430b      	orrs	r3, r1
 8001862:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d017      	beq.n	800189c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	691a      	ldr	r2, [r3, #16]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800187a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8001884:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001888:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6911      	ldr	r1, [r2, #16]
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	6812      	ldr	r2, [r2, #0]
 8001894:	430b      	orrs	r3, r1
 8001896:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800189a:	e013      	b.n	80018c4 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	691a      	ldr	r2, [r3, #16]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80018aa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	6812      	ldr	r2, [r2, #0]
 80018b8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80018bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80018c0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d12a      	bne.n	8001924 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80018d8:	f023 0304 	bic.w	r3, r3, #4
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80018e4:	4311      	orrs	r1, r2
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80018ea:	4311      	orrs	r1, r2
 80018ec:	687a      	ldr	r2, [r7, #4]
 80018ee:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80018f0:	430a      	orrs	r2, r1
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f042 0201 	orr.w	r2, r2, #1
 80018fc:	611a      	str	r2, [r3, #16]
 80018fe:	e019      	b.n	8001934 <HAL_ADC_Init+0x318>
 8001900:	20000008 	.word	0x20000008
 8001904:	053e2d63 	.word	0x053e2d63
 8001908:	50000100 	.word	0x50000100
 800190c:	50000400 	.word	0x50000400
 8001910:	50000500 	.word	0x50000500
 8001914:	50000600 	.word	0x50000600
 8001918:	50000300 	.word	0x50000300
 800191c:	50000700 	.word	0x50000700
 8001920:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	691a      	ldr	r2, [r3, #16]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 0201 	bic.w	r2, r2, #1
 8001932:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	695b      	ldr	r3, [r3, #20]
 8001938:	2b01      	cmp	r3, #1
 800193a:	d10c      	bne.n	8001956 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	f023 010f 	bic.w	r1, r3, #15
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a1b      	ldr	r3, [r3, #32]
 800194a:	1e5a      	subs	r2, r3, #1
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	430a      	orrs	r2, r1
 8001952:	631a      	str	r2, [r3, #48]	@ 0x30
 8001954:	e007      	b.n	8001966 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 020f 	bic.w	r2, r2, #15
 8001964:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800196a:	f023 0303 	bic.w	r3, r3, #3
 800196e:	f043 0201 	orr.w	r2, r3, #1
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001976:	e007      	b.n	8001988 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800197c:	f043 0210 	orr.w	r2, r3, #16
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001988:	7ffb      	ldrb	r3, [r7, #31]
}
 800198a:	4618      	mov	r0, r3
 800198c:	3724      	adds	r7, #36	@ 0x24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd90      	pop	{r4, r7, pc}
 8001992:	bf00      	nop

08001994 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019a8:	d004      	beq.n	80019b4 <HAL_ADC_Start_DMA+0x20>
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a5a      	ldr	r2, [pc, #360]	@ (8001b18 <HAL_ADC_Start_DMA+0x184>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d101      	bne.n	80019b8 <HAL_ADC_Start_DMA+0x24>
 80019b4:	4b59      	ldr	r3, [pc, #356]	@ (8001b1c <HAL_ADC_Start_DMA+0x188>)
 80019b6:	e000      	b.n	80019ba <HAL_ADC_Start_DMA+0x26>
 80019b8:	4b59      	ldr	r3, [pc, #356]	@ (8001b20 <HAL_ADC_Start_DMA+0x18c>)
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fd70 	bl	80014a0 <LL_ADC_GetMultimode>
 80019c0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff fe01 	bl	80015ce <LL_ADC_REG_IsConversionOngoing>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f040 809b 	bne.w	8001b0a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d101      	bne.n	80019e2 <HAL_ADC_Start_DMA+0x4e>
 80019de:	2302      	movs	r3, #2
 80019e0:	e096      	b.n	8001b10 <HAL_ADC_Start_DMA+0x17c>
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	2201      	movs	r2, #1
 80019e6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a4d      	ldr	r2, [pc, #308]	@ (8001b24 <HAL_ADC_Start_DMA+0x190>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d008      	beq.n	8001a06 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d005      	beq.n	8001a06 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	2b05      	cmp	r3, #5
 80019fe:	d002      	beq.n	8001a06 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	2b09      	cmp	r3, #9
 8001a04:	d17a      	bne.n	8001afc <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001a06:	68f8      	ldr	r0, [r7, #12]
 8001a08:	f000 fcf6 	bl	80023f8 <ADC_Enable>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001a10:	7dfb      	ldrb	r3, [r7, #23]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d16d      	bne.n	8001af2 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a1a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001a1e:	f023 0301 	bic.w	r3, r3, #1
 8001a22:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a3a      	ldr	r2, [pc, #232]	@ (8001b18 <HAL_ADC_Start_DMA+0x184>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d009      	beq.n	8001a48 <HAL_ADC_Start_DMA+0xb4>
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a3b      	ldr	r2, [pc, #236]	@ (8001b28 <HAL_ADC_Start_DMA+0x194>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d002      	beq.n	8001a44 <HAL_ADC_Start_DMA+0xb0>
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	e003      	b.n	8001a4c <HAL_ADC_Start_DMA+0xb8>
 8001a44:	4b39      	ldr	r3, [pc, #228]	@ (8001b2c <HAL_ADC_Start_DMA+0x198>)
 8001a46:	e001      	b.n	8001a4c <HAL_ADC_Start_DMA+0xb8>
 8001a48:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001a4c:	68fa      	ldr	r2, [r7, #12]
 8001a4e:	6812      	ldr	r2, [r2, #0]
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d002      	beq.n	8001a5a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d105      	bne.n	8001a66 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a5e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a6a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d006      	beq.n	8001a80 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a76:	f023 0206 	bic.w	r2, r3, #6
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	661a      	str	r2, [r3, #96]	@ 0x60
 8001a7e:	e002      	b.n	8001a86 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2200      	movs	r2, #0
 8001a84:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a8a:	4a29      	ldr	r2, [pc, #164]	@ (8001b30 <HAL_ADC_Start_DMA+0x19c>)
 8001a8c:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a92:	4a28      	ldr	r2, [pc, #160]	@ (8001b34 <HAL_ADC_Start_DMA+0x1a0>)
 8001a94:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a9a:	4a27      	ldr	r2, [pc, #156]	@ (8001b38 <HAL_ADC_Start_DMA+0x1a4>)
 8001a9c:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	221c      	movs	r2, #28
 8001aa4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f042 0210 	orr.w	r2, r2, #16
 8001abc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68da      	ldr	r2, [r3, #12]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f042 0201 	orr.w	r2, r2, #1
 8001acc:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	3340      	adds	r3, #64	@ 0x40
 8001ad8:	4619      	mov	r1, r3
 8001ada:	68ba      	ldr	r2, [r7, #8]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f001 f89b 	bl	8002c18 <HAL_DMA_Start_IT>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff fd5b 	bl	80015a6 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001af0:	e00d      	b.n	8001b0e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2200      	movs	r2, #0
 8001af6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8001afa:	e008      	b.n	8001b0e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2200      	movs	r2, #0
 8001b04:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8001b08:	e001      	b.n	8001b0e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3718      	adds	r7, #24
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	50000100 	.word	0x50000100
 8001b1c:	50000300 	.word	0x50000300
 8001b20:	50000700 	.word	0x50000700
 8001b24:	50000600 	.word	0x50000600
 8001b28:	50000500 	.word	0x50000500
 8001b2c:	50000400 	.word	0x50000400
 8001b30:	08002525 	.word	0x08002525
 8001b34:	080025fd 	.word	0x080025fd
 8001b38:	08002619 	.word	0x08002619

08001b3c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001b58:	bf00      	nop
 8001b5a:	370c      	adds	r7, #12
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr

08001b78 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b0b6      	sub	sp, #216	@ 0xd8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b82:	2300      	movs	r3, #0
 8001b84:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d102      	bne.n	8001b9c <HAL_ADC_ConfigChannel+0x24>
 8001b96:	2302      	movs	r3, #2
 8001b98:	f000 bc13 	b.w	80023c2 <HAL_ADC_ConfigChannel+0x84a>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff fd10 	bl	80015ce <LL_ADC_REG_IsConversionOngoing>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f040 83f3 	bne.w	800239c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6818      	ldr	r0, [r3, #0]
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	6859      	ldr	r1, [r3, #4]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	f7ff fbf1 	bl	80013aa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff fcfe 	bl	80015ce <LL_ADC_REG_IsConversionOngoing>
 8001bd2:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff fd0a 	bl	80015f4 <LL_ADC_INJ_IsConversionOngoing>
 8001be0:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001be4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f040 81d9 	bne.w	8001fa0 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f040 81d4 	bne.w	8001fa0 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001c00:	d10f      	bne.n	8001c22 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6818      	ldr	r0, [r3, #0]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f7ff fbf8 	bl	8001402 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff fb9f 	bl	800135e <LL_ADC_SetSamplingTimeCommonConfig>
 8001c20:	e00e      	b.n	8001c40 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6818      	ldr	r0, [r3, #0]
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	6819      	ldr	r1, [r3, #0]
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	f7ff fbe7 	bl	8001402 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	2100      	movs	r1, #0
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff fb8f 	bl	800135e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	695a      	ldr	r2, [r3, #20]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	08db      	lsrs	r3, r3, #3
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	d022      	beq.n	8001ca8 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6818      	ldr	r0, [r3, #0]
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	6919      	ldr	r1, [r3, #16]
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001c72:	f7ff fae9 	bl	8001248 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6818      	ldr	r0, [r3, #0]
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	6919      	ldr	r1, [r3, #16]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	461a      	mov	r2, r3
 8001c84:	f7ff fb35 	bl	80012f2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6818      	ldr	r0, [r3, #0]
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d102      	bne.n	8001c9e <HAL_ADC_ConfigChannel+0x126>
 8001c98:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c9c:	e000      	b.n	8001ca0 <HAL_ADC_ConfigChannel+0x128>
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	f7ff fb41 	bl	8001328 <LL_ADC_SetOffsetSaturation>
 8001ca6:	e17b      	b.n	8001fa0 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2100      	movs	r1, #0
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff faee 	bl	8001290 <LL_ADC_GetOffsetChannel>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d10a      	bne.n	8001cd4 <HAL_ADC_ConfigChannel+0x15c>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff fae3 	bl	8001290 <LL_ADC_GetOffsetChannel>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	0e9b      	lsrs	r3, r3, #26
 8001cce:	f003 021f 	and.w	r2, r3, #31
 8001cd2:	e01e      	b.n	8001d12 <HAL_ADC_ConfigChannel+0x19a>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2100      	movs	r1, #0
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fad8 	bl	8001290 <LL_ADC_GetOffsetChannel>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001cea:	fa93 f3a3 	rbit	r3, r3
 8001cee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001cf2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001cf6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001cfa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001d02:	2320      	movs	r3, #32
 8001d04:	e004      	b.n	8001d10 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001d06:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d0a:	fab3 f383 	clz	r3, r3
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d105      	bne.n	8001d2a <HAL_ADC_ConfigChannel+0x1b2>
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	0e9b      	lsrs	r3, r3, #26
 8001d24:	f003 031f 	and.w	r3, r3, #31
 8001d28:	e018      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x1e4>
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d32:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001d36:	fa93 f3a3 	rbit	r3, r3
 8001d3a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8001d3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8001d46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001d4e:	2320      	movs	r3, #32
 8001d50:	e004      	b.n	8001d5c <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001d52:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001d56:	fab3 f383 	clz	r3, r3
 8001d5a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d106      	bne.n	8001d6e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2200      	movs	r2, #0
 8001d66:	2100      	movs	r1, #0
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff faa7 	bl	80012bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2101      	movs	r1, #1
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff fa8b 	bl	8001290 <LL_ADC_GetOffsetChannel>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10a      	bne.n	8001d9a <HAL_ADC_ConfigChannel+0x222>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2101      	movs	r1, #1
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fa80 	bl	8001290 <LL_ADC_GetOffsetChannel>
 8001d90:	4603      	mov	r3, r0
 8001d92:	0e9b      	lsrs	r3, r3, #26
 8001d94:	f003 021f 	and.w	r2, r3, #31
 8001d98:	e01e      	b.n	8001dd8 <HAL_ADC_ConfigChannel+0x260>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2101      	movs	r1, #1
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff fa75 	bl	8001290 <LL_ADC_GetOffsetChannel>
 8001da6:	4603      	mov	r3, r0
 8001da8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001db0:	fa93 f3a3 	rbit	r3, r3
 8001db4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8001db8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8001dbc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8001dc0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d101      	bne.n	8001dcc <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001dc8:	2320      	movs	r3, #32
 8001dca:	e004      	b.n	8001dd6 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001dcc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001dd0:	fab3 f383 	clz	r3, r3
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d105      	bne.n	8001df0 <HAL_ADC_ConfigChannel+0x278>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	0e9b      	lsrs	r3, r3, #26
 8001dea:	f003 031f 	and.w	r3, r3, #31
 8001dee:	e018      	b.n	8001e22 <HAL_ADC_ConfigChannel+0x2aa>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001df8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001dfc:	fa93 f3a3 	rbit	r3, r3
 8001e00:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8001e04:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001e08:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8001e0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d101      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001e14:	2320      	movs	r3, #32
 8001e16:	e004      	b.n	8001e22 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001e18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001e1c:	fab3 f383 	clz	r3, r3
 8001e20:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d106      	bne.n	8001e34 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff fa44 	bl	80012bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2102      	movs	r1, #2
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7ff fa28 	bl	8001290 <LL_ADC_GetOffsetChannel>
 8001e40:	4603      	mov	r3, r0
 8001e42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10a      	bne.n	8001e60 <HAL_ADC_ConfigChannel+0x2e8>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2102      	movs	r1, #2
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff fa1d 	bl	8001290 <LL_ADC_GetOffsetChannel>
 8001e56:	4603      	mov	r3, r0
 8001e58:	0e9b      	lsrs	r3, r3, #26
 8001e5a:	f003 021f 	and.w	r2, r3, #31
 8001e5e:	e01e      	b.n	8001e9e <HAL_ADC_ConfigChannel+0x326>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	2102      	movs	r1, #2
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff fa12 	bl	8001290 <LL_ADC_GetOffsetChannel>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e72:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001e76:	fa93 f3a3 	rbit	r3, r3
 8001e7a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8001e7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001e82:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8001e86:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001e8e:	2320      	movs	r3, #32
 8001e90:	e004      	b.n	8001e9c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001e92:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001e96:	fab3 f383 	clz	r3, r3
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d105      	bne.n	8001eb6 <HAL_ADC_ConfigChannel+0x33e>
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	0e9b      	lsrs	r3, r3, #26
 8001eb0:	f003 031f 	and.w	r3, r3, #31
 8001eb4:	e016      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x36c>
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebe:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001ec2:	fa93 f3a3 	rbit	r3, r3
 8001ec6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8001ec8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001eca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8001ece:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001ed6:	2320      	movs	r3, #32
 8001ed8:	e004      	b.n	8001ee4 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001eda:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001ede:	fab3 f383 	clz	r3, r3
 8001ee2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d106      	bne.n	8001ef6 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2200      	movs	r2, #0
 8001eee:	2102      	movs	r1, #2
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff f9e3 	bl	80012bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	2103      	movs	r1, #3
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7ff f9c7 	bl	8001290 <LL_ADC_GetOffsetChannel>
 8001f02:	4603      	mov	r3, r0
 8001f04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d10a      	bne.n	8001f22 <HAL_ADC_ConfigChannel+0x3aa>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	2103      	movs	r1, #3
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff f9bc 	bl	8001290 <LL_ADC_GetOffsetChannel>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	0e9b      	lsrs	r3, r3, #26
 8001f1c:	f003 021f 	and.w	r2, r3, #31
 8001f20:	e017      	b.n	8001f52 <HAL_ADC_ConfigChannel+0x3da>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2103      	movs	r1, #3
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff f9b1 	bl	8001290 <LL_ADC_GetOffsetChannel>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8001f34:	fa93 f3a3 	rbit	r3, r3
 8001f38:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8001f3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f3c:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8001f3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8001f44:	2320      	movs	r3, #32
 8001f46:	e003      	b.n	8001f50 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8001f48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8001f4a:	fab3 f383 	clz	r3, r3
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d105      	bne.n	8001f6a <HAL_ADC_ConfigChannel+0x3f2>
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	0e9b      	lsrs	r3, r3, #26
 8001f64:	f003 031f 	and.w	r3, r3, #31
 8001f68:	e011      	b.n	8001f8e <HAL_ADC_ConfigChannel+0x416>
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001f72:	fa93 f3a3 	rbit	r3, r3
 8001f76:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8001f78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001f7a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8001f7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8001f82:	2320      	movs	r3, #32
 8001f84:	e003      	b.n	8001f8e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8001f86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001f88:	fab3 f383 	clz	r3, r3
 8001f8c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d106      	bne.n	8001fa0 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2200      	movs	r2, #0
 8001f98:	2103      	movs	r1, #3
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff f98e 	bl	80012bc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff faeb 	bl	8001580 <LL_ADC_IsEnabled>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	f040 813d 	bne.w	800222c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6818      	ldr	r0, [r3, #0]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	6819      	ldr	r1, [r3, #0]
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	68db      	ldr	r3, [r3, #12]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	f7ff fa4a 	bl	8001458 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	4aa2      	ldr	r2, [pc, #648]	@ (8002254 <HAL_ADC_ConfigChannel+0x6dc>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	f040 812e 	bne.w	800222c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d10b      	bne.n	8001ff8 <HAL_ADC_ConfigChannel+0x480>
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	0e9b      	lsrs	r3, r3, #26
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	f003 031f 	and.w	r3, r3, #31
 8001fec:	2b09      	cmp	r3, #9
 8001fee:	bf94      	ite	ls
 8001ff0:	2301      	movls	r3, #1
 8001ff2:	2300      	movhi	r3, #0
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	e019      	b.n	800202c <HAL_ADC_ConfigChannel+0x4b4>
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ffe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002000:	fa93 f3a3 	rbit	r3, r3
 8002004:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002006:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002008:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800200a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800200c:	2b00      	cmp	r3, #0
 800200e:	d101      	bne.n	8002014 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002010:	2320      	movs	r3, #32
 8002012:	e003      	b.n	800201c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002014:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002016:	fab3 f383 	clz	r3, r3
 800201a:	b2db      	uxtb	r3, r3
 800201c:	3301      	adds	r3, #1
 800201e:	f003 031f 	and.w	r3, r3, #31
 8002022:	2b09      	cmp	r3, #9
 8002024:	bf94      	ite	ls
 8002026:	2301      	movls	r3, #1
 8002028:	2300      	movhi	r3, #0
 800202a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800202c:	2b00      	cmp	r3, #0
 800202e:	d079      	beq.n	8002124 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002038:	2b00      	cmp	r3, #0
 800203a:	d107      	bne.n	800204c <HAL_ADC_ConfigChannel+0x4d4>
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	0e9b      	lsrs	r3, r3, #26
 8002042:	3301      	adds	r3, #1
 8002044:	069b      	lsls	r3, r3, #26
 8002046:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800204a:	e015      	b.n	8002078 <HAL_ADC_ConfigChannel+0x500>
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002052:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002054:	fa93 f3a3 	rbit	r3, r3
 8002058:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800205a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800205c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 800205e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002064:	2320      	movs	r3, #32
 8002066:	e003      	b.n	8002070 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002068:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800206a:	fab3 f383 	clz	r3, r3
 800206e:	b2db      	uxtb	r3, r3
 8002070:	3301      	adds	r3, #1
 8002072:	069b      	lsls	r3, r3, #26
 8002074:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002080:	2b00      	cmp	r3, #0
 8002082:	d109      	bne.n	8002098 <HAL_ADC_ConfigChannel+0x520>
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	0e9b      	lsrs	r3, r3, #26
 800208a:	3301      	adds	r3, #1
 800208c:	f003 031f 	and.w	r3, r3, #31
 8002090:	2101      	movs	r1, #1
 8002092:	fa01 f303 	lsl.w	r3, r1, r3
 8002096:	e017      	b.n	80020c8 <HAL_ADC_ConfigChannel+0x550>
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020a0:	fa93 f3a3 	rbit	r3, r3
 80020a4:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80020a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80020aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80020b0:	2320      	movs	r3, #32
 80020b2:	e003      	b.n	80020bc <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80020b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80020b6:	fab3 f383 	clz	r3, r3
 80020ba:	b2db      	uxtb	r3, r3
 80020bc:	3301      	adds	r3, #1
 80020be:	f003 031f 	and.w	r3, r3, #31
 80020c2:	2101      	movs	r1, #1
 80020c4:	fa01 f303 	lsl.w	r3, r1, r3
 80020c8:	ea42 0103 	orr.w	r1, r2, r3
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10a      	bne.n	80020ee <HAL_ADC_ConfigChannel+0x576>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	0e9b      	lsrs	r3, r3, #26
 80020de:	3301      	adds	r3, #1
 80020e0:	f003 021f 	and.w	r2, r3, #31
 80020e4:	4613      	mov	r3, r2
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	4413      	add	r3, r2
 80020ea:	051b      	lsls	r3, r3, #20
 80020ec:	e018      	b.n	8002120 <HAL_ADC_ConfigChannel+0x5a8>
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80020f6:	fa93 f3a3 	rbit	r3, r3
 80020fa:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 80020fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002100:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002102:	2b00      	cmp	r3, #0
 8002104:	d101      	bne.n	800210a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002106:	2320      	movs	r3, #32
 8002108:	e003      	b.n	8002112 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800210a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800210c:	fab3 f383 	clz	r3, r3
 8002110:	b2db      	uxtb	r3, r3
 8002112:	3301      	adds	r3, #1
 8002114:	f003 021f 	and.w	r2, r3, #31
 8002118:	4613      	mov	r3, r2
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	4413      	add	r3, r2
 800211e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002120:	430b      	orrs	r3, r1
 8002122:	e07e      	b.n	8002222 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800212c:	2b00      	cmp	r3, #0
 800212e:	d107      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x5c8>
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	0e9b      	lsrs	r3, r3, #26
 8002136:	3301      	adds	r3, #1
 8002138:	069b      	lsls	r3, r3, #26
 800213a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800213e:	e015      	b.n	800216c <HAL_ADC_ConfigChannel+0x5f4>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002146:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002148:	fa93 f3a3 	rbit	r3, r3
 800214c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 800214e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002150:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002154:	2b00      	cmp	r3, #0
 8002156:	d101      	bne.n	800215c <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002158:	2320      	movs	r3, #32
 800215a:	e003      	b.n	8002164 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 800215c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800215e:	fab3 f383 	clz	r3, r3
 8002162:	b2db      	uxtb	r3, r3
 8002164:	3301      	adds	r3, #1
 8002166:	069b      	lsls	r3, r3, #26
 8002168:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002174:	2b00      	cmp	r3, #0
 8002176:	d109      	bne.n	800218c <HAL_ADC_ConfigChannel+0x614>
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	0e9b      	lsrs	r3, r3, #26
 800217e:	3301      	adds	r3, #1
 8002180:	f003 031f 	and.w	r3, r3, #31
 8002184:	2101      	movs	r1, #1
 8002186:	fa01 f303 	lsl.w	r3, r1, r3
 800218a:	e017      	b.n	80021bc <HAL_ADC_ConfigChannel+0x644>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002192:	6a3b      	ldr	r3, [r7, #32]
 8002194:	fa93 f3a3 	rbit	r3, r3
 8002198:	61fb      	str	r3, [r7, #28]
  return result;
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800219e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80021a4:	2320      	movs	r3, #32
 80021a6:	e003      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80021a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021aa:	fab3 f383 	clz	r3, r3
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	3301      	adds	r3, #1
 80021b2:	f003 031f 	and.w	r3, r3, #31
 80021b6:	2101      	movs	r1, #1
 80021b8:	fa01 f303 	lsl.w	r3, r1, r3
 80021bc:	ea42 0103 	orr.w	r1, r2, r3
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10d      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x670>
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	0e9b      	lsrs	r3, r3, #26
 80021d2:	3301      	adds	r3, #1
 80021d4:	f003 021f 	and.w	r2, r3, #31
 80021d8:	4613      	mov	r3, r2
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	4413      	add	r3, r2
 80021de:	3b1e      	subs	r3, #30
 80021e0:	051b      	lsls	r3, r3, #20
 80021e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80021e6:	e01b      	b.n	8002220 <HAL_ADC_ConfigChannel+0x6a8>
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	fa93 f3a3 	rbit	r3, r3
 80021f4:	613b      	str	r3, [r7, #16]
  return result;
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002200:	2320      	movs	r3, #32
 8002202:	e003      	b.n	800220c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002204:	69bb      	ldr	r3, [r7, #24]
 8002206:	fab3 f383 	clz	r3, r3
 800220a:	b2db      	uxtb	r3, r3
 800220c:	3301      	adds	r3, #1
 800220e:	f003 021f 	and.w	r2, r3, #31
 8002212:	4613      	mov	r3, r2
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	4413      	add	r3, r2
 8002218:	3b1e      	subs	r3, #30
 800221a:	051b      	lsls	r3, r3, #20
 800221c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002220:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002226:	4619      	mov	r1, r3
 8002228:	f7ff f8eb 	bl	8001402 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	4b09      	ldr	r3, [pc, #36]	@ (8002258 <HAL_ADC_ConfigChannel+0x6e0>)
 8002232:	4013      	ands	r3, r2
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 80be 	beq.w	80023b6 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002242:	d004      	beq.n	800224e <HAL_ADC_ConfigChannel+0x6d6>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a04      	ldr	r2, [pc, #16]	@ (800225c <HAL_ADC_ConfigChannel+0x6e4>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d10a      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x6ec>
 800224e:	4b04      	ldr	r3, [pc, #16]	@ (8002260 <HAL_ADC_ConfigChannel+0x6e8>)
 8002250:	e009      	b.n	8002266 <HAL_ADC_ConfigChannel+0x6ee>
 8002252:	bf00      	nop
 8002254:	407f0000 	.word	0x407f0000
 8002258:	80080000 	.word	0x80080000
 800225c:	50000100 	.word	0x50000100
 8002260:	50000300 	.word	0x50000300
 8002264:	4b59      	ldr	r3, [pc, #356]	@ (80023cc <HAL_ADC_ConfigChannel+0x854>)
 8002266:	4618      	mov	r0, r3
 8002268:	f7fe ffe0 	bl	800122c <LL_ADC_GetCommonPathInternalCh>
 800226c:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a56      	ldr	r2, [pc, #344]	@ (80023d0 <HAL_ADC_ConfigChannel+0x858>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d004      	beq.n	8002284 <HAL_ADC_ConfigChannel+0x70c>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a55      	ldr	r2, [pc, #340]	@ (80023d4 <HAL_ADC_ConfigChannel+0x85c>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d13a      	bne.n	80022fa <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002284:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002288:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d134      	bne.n	80022fa <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002298:	d005      	beq.n	80022a6 <HAL_ADC_ConfigChannel+0x72e>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a4e      	ldr	r2, [pc, #312]	@ (80023d8 <HAL_ADC_ConfigChannel+0x860>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	f040 8085 	bne.w	80023b0 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80022ae:	d004      	beq.n	80022ba <HAL_ADC_ConfigChannel+0x742>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a49      	ldr	r2, [pc, #292]	@ (80023dc <HAL_ADC_ConfigChannel+0x864>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d101      	bne.n	80022be <HAL_ADC_ConfigChannel+0x746>
 80022ba:	4a49      	ldr	r2, [pc, #292]	@ (80023e0 <HAL_ADC_ConfigChannel+0x868>)
 80022bc:	e000      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x748>
 80022be:	4a43      	ldr	r2, [pc, #268]	@ (80023cc <HAL_ADC_ConfigChannel+0x854>)
 80022c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80022c4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80022c8:	4619      	mov	r1, r3
 80022ca:	4610      	mov	r0, r2
 80022cc:	f7fe ff9b 	bl	8001206 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022d0:	4b44      	ldr	r3, [pc, #272]	@ (80023e4 <HAL_ADC_ConfigChannel+0x86c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	099b      	lsrs	r3, r3, #6
 80022d6:	4a44      	ldr	r2, [pc, #272]	@ (80023e8 <HAL_ADC_ConfigChannel+0x870>)
 80022d8:	fba2 2303 	umull	r2, r3, r2, r3
 80022dc:	099b      	lsrs	r3, r3, #6
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	4613      	mov	r3, r2
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	4413      	add	r3, r2
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80022ea:	e002      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	3b01      	subs	r3, #1
 80022f0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1f9      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022f8:	e05a      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a3b      	ldr	r2, [pc, #236]	@ (80023ec <HAL_ADC_ConfigChannel+0x874>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d125      	bne.n	8002350 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002304:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002308:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d11f      	bne.n	8002350 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a31      	ldr	r2, [pc, #196]	@ (80023dc <HAL_ADC_ConfigChannel+0x864>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d104      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x7ac>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a34      	ldr	r2, [pc, #208]	@ (80023f0 <HAL_ADC_ConfigChannel+0x878>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d047      	beq.n	80023b4 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800232c:	d004      	beq.n	8002338 <HAL_ADC_ConfigChannel+0x7c0>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a2a      	ldr	r2, [pc, #168]	@ (80023dc <HAL_ADC_ConfigChannel+0x864>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d101      	bne.n	800233c <HAL_ADC_ConfigChannel+0x7c4>
 8002338:	4a29      	ldr	r2, [pc, #164]	@ (80023e0 <HAL_ADC_ConfigChannel+0x868>)
 800233a:	e000      	b.n	800233e <HAL_ADC_ConfigChannel+0x7c6>
 800233c:	4a23      	ldr	r2, [pc, #140]	@ (80023cc <HAL_ADC_ConfigChannel+0x854>)
 800233e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002342:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002346:	4619      	mov	r1, r3
 8002348:	4610      	mov	r0, r2
 800234a:	f7fe ff5c 	bl	8001206 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800234e:	e031      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a27      	ldr	r2, [pc, #156]	@ (80023f4 <HAL_ADC_ConfigChannel+0x87c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d12d      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800235a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800235e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d127      	bne.n	80023b6 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a1c      	ldr	r2, [pc, #112]	@ (80023dc <HAL_ADC_ConfigChannel+0x864>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d022      	beq.n	80023b6 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002378:	d004      	beq.n	8002384 <HAL_ADC_ConfigChannel+0x80c>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a17      	ldr	r2, [pc, #92]	@ (80023dc <HAL_ADC_ConfigChannel+0x864>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d101      	bne.n	8002388 <HAL_ADC_ConfigChannel+0x810>
 8002384:	4a16      	ldr	r2, [pc, #88]	@ (80023e0 <HAL_ADC_ConfigChannel+0x868>)
 8002386:	e000      	b.n	800238a <HAL_ADC_ConfigChannel+0x812>
 8002388:	4a10      	ldr	r2, [pc, #64]	@ (80023cc <HAL_ADC_ConfigChannel+0x854>)
 800238a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800238e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002392:	4619      	mov	r1, r3
 8002394:	4610      	mov	r0, r2
 8002396:	f7fe ff36 	bl	8001206 <LL_ADC_SetCommonPathInternalCh>
 800239a:	e00c      	b.n	80023b6 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023a0:	f043 0220 	orr.w	r2, r3, #32
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80023ae:	e002      	b.n	80023b6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023b0:	bf00      	nop
 80023b2:	e000      	b.n	80023b6 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023b4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 80023be:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	37d8      	adds	r7, #216	@ 0xd8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	50000700 	.word	0x50000700
 80023d0:	c3210000 	.word	0xc3210000
 80023d4:	90c00010 	.word	0x90c00010
 80023d8:	50000600 	.word	0x50000600
 80023dc:	50000100 	.word	0x50000100
 80023e0:	50000300 	.word	0x50000300
 80023e4:	20000008 	.word	0x20000008
 80023e8:	053e2d63 	.word	0x053e2d63
 80023ec:	c7520000 	.word	0xc7520000
 80023f0:	50000500 	.word	0x50000500
 80023f4:	cb840000 	.word	0xcb840000

080023f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002400:	2300      	movs	r3, #0
 8002402:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff f8b9 	bl	8001580 <LL_ADC_IsEnabled>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d176      	bne.n	8002502 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689a      	ldr	r2, [r3, #8]
 800241a:	4b3c      	ldr	r3, [pc, #240]	@ (800250c <ADC_Enable+0x114>)
 800241c:	4013      	ands	r3, r2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00d      	beq.n	800243e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002426:	f043 0210 	orr.w	r2, r3, #16
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002432:	f043 0201 	orr.w	r2, r3, #1
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e062      	b.n	8002504 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff f888 	bl	8001558 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002450:	d004      	beq.n	800245c <ADC_Enable+0x64>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a2e      	ldr	r2, [pc, #184]	@ (8002510 <ADC_Enable+0x118>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d101      	bne.n	8002460 <ADC_Enable+0x68>
 800245c:	4b2d      	ldr	r3, [pc, #180]	@ (8002514 <ADC_Enable+0x11c>)
 800245e:	e000      	b.n	8002462 <ADC_Enable+0x6a>
 8002460:	4b2d      	ldr	r3, [pc, #180]	@ (8002518 <ADC_Enable+0x120>)
 8002462:	4618      	mov	r0, r3
 8002464:	f7fe fee2 	bl	800122c <LL_ADC_GetCommonPathInternalCh>
 8002468:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800246a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800246e:	2b00      	cmp	r3, #0
 8002470:	d013      	beq.n	800249a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002472:	4b2a      	ldr	r3, [pc, #168]	@ (800251c <ADC_Enable+0x124>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	099b      	lsrs	r3, r3, #6
 8002478:	4a29      	ldr	r2, [pc, #164]	@ (8002520 <ADC_Enable+0x128>)
 800247a:	fba2 2303 	umull	r2, r3, r2, r3
 800247e:	099b      	lsrs	r3, r3, #6
 8002480:	1c5a      	adds	r2, r3, #1
 8002482:	4613      	mov	r3, r2
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	4413      	add	r3, r2
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800248c:	e002      	b.n	8002494 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	3b01      	subs	r3, #1
 8002492:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1f9      	bne.n	800248e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800249a:	f7fe fe73 	bl	8001184 <HAL_GetTick>
 800249e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024a0:	e028      	b.n	80024f4 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7ff f86a 	bl	8001580 <LL_ADC_IsEnabled>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d104      	bne.n	80024bc <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff f84e 	bl	8001558 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024bc:	f7fe fe62 	bl	8001184 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d914      	bls.n	80024f4 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0301 	and.w	r3, r3, #1
 80024d4:	2b01      	cmp	r3, #1
 80024d6:	d00d      	beq.n	80024f4 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024dc:	f043 0210 	orr.w	r2, r3, #16
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024e8:	f043 0201 	orr.w	r2, r3, #1
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e007      	b.n	8002504 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d1cf      	bne.n	80024a2 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	8000003f 	.word	0x8000003f
 8002510:	50000100 	.word	0x50000100
 8002514:	50000300 	.word	0x50000300
 8002518:	50000700 	.word	0x50000700
 800251c:	20000008 	.word	0x20000008
 8002520:	053e2d63 	.word	0x053e2d63

08002524 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002530:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002536:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800253a:	2b00      	cmp	r3, #0
 800253c:	d14b      	bne.n	80025d6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002542:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0308 	and.w	r3, r3, #8
 8002554:	2b00      	cmp	r3, #0
 8002556:	d021      	beq.n	800259c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f7fe ff11 	bl	8001384 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d032      	beq.n	80025ce <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d12b      	bne.n	80025ce <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800257a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002586:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d11f      	bne.n	80025ce <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002592:	f043 0201 	orr.w	r2, r3, #1
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	65da      	str	r2, [r3, #92]	@ 0x5c
 800259a:	e018      	b.n	80025ce <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d111      	bne.n	80025ce <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d105      	bne.n	80025ce <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c6:	f043 0201 	orr.w	r2, r3, #1
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f7ff fab4 	bl	8001b3c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80025d4:	e00e      	b.n	80025f4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025da:	f003 0310 	and.w	r3, r3, #16
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f7ff fabe 	bl	8001b64 <HAL_ADC_ErrorCallback>
}
 80025e8:	e004      	b.n	80025f4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	4798      	blx	r3
}
 80025f4:	bf00      	nop
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002608:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800260a:	68f8      	ldr	r0, [r7, #12]
 800260c:	f7ff faa0 	bl	8001b50 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002610:	bf00      	nop
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002624:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800262a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002636:	f043 0204 	orr.w	r2, r3, #4
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800263e:	68f8      	ldr	r0, [r7, #12]
 8002640:	f7ff fa90 	bl	8001b64 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002644:	bf00      	nop
 8002646:	3710      	adds	r7, #16
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <LL_ADC_IsEnabled>:
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 0301 	and.w	r3, r3, #1
 800265c:	2b01      	cmp	r3, #1
 800265e:	d101      	bne.n	8002664 <LL_ADC_IsEnabled+0x18>
 8002660:	2301      	movs	r3, #1
 8002662:	e000      	b.n	8002666 <LL_ADC_IsEnabled+0x1a>
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <LL_ADC_REG_IsConversionOngoing>:
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	2b04      	cmp	r3, #4
 8002684:	d101      	bne.n	800268a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002686:	2301      	movs	r3, #1
 8002688:	e000      	b.n	800268c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002698:	b590      	push	{r4, r7, lr}
 800269a:	b0a1      	sub	sp, #132	@ 0x84
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026a2:	2300      	movs	r3, #0
 80026a4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d101      	bne.n	80026b6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80026b2:	2302      	movs	r3, #2
 80026b4:	e0e7      	b.n	8002886 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80026be:	2300      	movs	r3, #0
 80026c0:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80026c2:	2300      	movs	r3, #0
 80026c4:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026ce:	d102      	bne.n	80026d6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80026d0:	4b6f      	ldr	r3, [pc, #444]	@ (8002890 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80026d2:	60bb      	str	r3, [r7, #8]
 80026d4:	e009      	b.n	80026ea <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a6e      	ldr	r2, [pc, #440]	@ (8002894 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d102      	bne.n	80026e6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80026e0:	4b6d      	ldr	r3, [pc, #436]	@ (8002898 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80026e2:	60bb      	str	r3, [r7, #8]
 80026e4:	e001      	b.n	80026ea <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80026e6:	2300      	movs	r3, #0
 80026e8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d10b      	bne.n	8002708 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026f4:	f043 0220 	orr.w	r2, r3, #32
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e0be      	b.n	8002886 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff ffb1 	bl	8002672 <LL_ADC_REG_IsConversionOngoing>
 8002710:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff ffab 	bl	8002672 <LL_ADC_REG_IsConversionOngoing>
 800271c:	4603      	mov	r3, r0
 800271e:	2b00      	cmp	r3, #0
 8002720:	f040 80a0 	bne.w	8002864 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002724:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002726:	2b00      	cmp	r3, #0
 8002728:	f040 809c 	bne.w	8002864 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002734:	d004      	beq.n	8002740 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a55      	ldr	r2, [pc, #340]	@ (8002890 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d101      	bne.n	8002744 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002740:	4b56      	ldr	r3, [pc, #344]	@ (800289c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002742:	e000      	b.n	8002746 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002744:	4b56      	ldr	r3, [pc, #344]	@ (80028a0 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002746:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d04b      	beq.n	80027e8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002750:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	6859      	ldr	r1, [r3, #4]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002762:	035b      	lsls	r3, r3, #13
 8002764:	430b      	orrs	r3, r1
 8002766:	431a      	orrs	r2, r3
 8002768:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800276a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002774:	d004      	beq.n	8002780 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a45      	ldr	r2, [pc, #276]	@ (8002890 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d10f      	bne.n	80027a0 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002780:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002784:	f7ff ff62 	bl	800264c <LL_ADC_IsEnabled>
 8002788:	4604      	mov	r4, r0
 800278a:	4841      	ldr	r0, [pc, #260]	@ (8002890 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800278c:	f7ff ff5e 	bl	800264c <LL_ADC_IsEnabled>
 8002790:	4603      	mov	r3, r0
 8002792:	4323      	orrs	r3, r4
 8002794:	2b00      	cmp	r3, #0
 8002796:	bf0c      	ite	eq
 8002798:	2301      	moveq	r3, #1
 800279a:	2300      	movne	r3, #0
 800279c:	b2db      	uxtb	r3, r3
 800279e:	e012      	b.n	80027c6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80027a0:	483c      	ldr	r0, [pc, #240]	@ (8002894 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80027a2:	f7ff ff53 	bl	800264c <LL_ADC_IsEnabled>
 80027a6:	4604      	mov	r4, r0
 80027a8:	483b      	ldr	r0, [pc, #236]	@ (8002898 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80027aa:	f7ff ff4f 	bl	800264c <LL_ADC_IsEnabled>
 80027ae:	4603      	mov	r3, r0
 80027b0:	431c      	orrs	r4, r3
 80027b2:	483c      	ldr	r0, [pc, #240]	@ (80028a4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80027b4:	f7ff ff4a 	bl	800264c <LL_ADC_IsEnabled>
 80027b8:	4603      	mov	r3, r0
 80027ba:	4323      	orrs	r3, r4
 80027bc:	2b00      	cmp	r3, #0
 80027be:	bf0c      	ite	eq
 80027c0:	2301      	moveq	r3, #1
 80027c2:	2300      	movne	r3, #0
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d056      	beq.n	8002878 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80027ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80027d2:	f023 030f 	bic.w	r3, r3, #15
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	6811      	ldr	r1, [r2, #0]
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	6892      	ldr	r2, [r2, #8]
 80027de:	430a      	orrs	r2, r1
 80027e0:	431a      	orrs	r2, r3
 80027e2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027e4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80027e6:	e047      	b.n	8002878 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80027e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80027f2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027fc:	d004      	beq.n	8002808 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a23      	ldr	r2, [pc, #140]	@ (8002890 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d10f      	bne.n	8002828 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002808:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800280c:	f7ff ff1e 	bl	800264c <LL_ADC_IsEnabled>
 8002810:	4604      	mov	r4, r0
 8002812:	481f      	ldr	r0, [pc, #124]	@ (8002890 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002814:	f7ff ff1a 	bl	800264c <LL_ADC_IsEnabled>
 8002818:	4603      	mov	r3, r0
 800281a:	4323      	orrs	r3, r4
 800281c:	2b00      	cmp	r3, #0
 800281e:	bf0c      	ite	eq
 8002820:	2301      	moveq	r3, #1
 8002822:	2300      	movne	r3, #0
 8002824:	b2db      	uxtb	r3, r3
 8002826:	e012      	b.n	800284e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002828:	481a      	ldr	r0, [pc, #104]	@ (8002894 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800282a:	f7ff ff0f 	bl	800264c <LL_ADC_IsEnabled>
 800282e:	4604      	mov	r4, r0
 8002830:	4819      	ldr	r0, [pc, #100]	@ (8002898 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002832:	f7ff ff0b 	bl	800264c <LL_ADC_IsEnabled>
 8002836:	4603      	mov	r3, r0
 8002838:	431c      	orrs	r4, r3
 800283a:	481a      	ldr	r0, [pc, #104]	@ (80028a4 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800283c:	f7ff ff06 	bl	800264c <LL_ADC_IsEnabled>
 8002840:	4603      	mov	r3, r0
 8002842:	4323      	orrs	r3, r4
 8002844:	2b00      	cmp	r3, #0
 8002846:	bf0c      	ite	eq
 8002848:	2301      	moveq	r3, #1
 800284a:	2300      	movne	r3, #0
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d012      	beq.n	8002878 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002852:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 800285a:	f023 030f 	bic.w	r3, r3, #15
 800285e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8002860:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002862:	e009      	b.n	8002878 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002868:	f043 0220 	orr.w	r2, r3, #32
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8002876:	e000      	b.n	800287a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002878:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002882:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8002886:	4618      	mov	r0, r3
 8002888:	3784      	adds	r7, #132	@ 0x84
 800288a:	46bd      	mov	sp, r7
 800288c:	bd90      	pop	{r4, r7, pc}
 800288e:	bf00      	nop
 8002890:	50000100 	.word	0x50000100
 8002894:	50000400 	.word	0x50000400
 8002898:	50000500 	.word	0x50000500
 800289c:	50000300 	.word	0x50000300
 80028a0:	50000700 	.word	0x50000700
 80028a4:	50000600 	.word	0x50000600

080028a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028b8:	4b0c      	ldr	r3, [pc, #48]	@ (80028ec <__NVIC_SetPriorityGrouping+0x44>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028be:	68ba      	ldr	r2, [r7, #8]
 80028c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028c4:	4013      	ands	r3, r2
 80028c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028da:	4a04      	ldr	r2, [pc, #16]	@ (80028ec <__NVIC_SetPriorityGrouping+0x44>)
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	60d3      	str	r3, [r2, #12]
}
 80028e0:	bf00      	nop
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	e000ed00 	.word	0xe000ed00

080028f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028f4:	4b04      	ldr	r3, [pc, #16]	@ (8002908 <__NVIC_GetPriorityGrouping+0x18>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	0a1b      	lsrs	r3, r3, #8
 80028fa:	f003 0307 	and.w	r3, r3, #7
}
 80028fe:	4618      	mov	r0, r3
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	e000ed00 	.word	0xe000ed00

0800290c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291a:	2b00      	cmp	r3, #0
 800291c:	db0b      	blt.n	8002936 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800291e:	79fb      	ldrb	r3, [r7, #7]
 8002920:	f003 021f 	and.w	r2, r3, #31
 8002924:	4907      	ldr	r1, [pc, #28]	@ (8002944 <__NVIC_EnableIRQ+0x38>)
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	095b      	lsrs	r3, r3, #5
 800292c:	2001      	movs	r0, #1
 800292e:	fa00 f202 	lsl.w	r2, r0, r2
 8002932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	e000e100 	.word	0xe000e100

08002948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	6039      	str	r1, [r7, #0]
 8002952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002958:	2b00      	cmp	r3, #0
 800295a:	db0a      	blt.n	8002972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	b2da      	uxtb	r2, r3
 8002960:	490c      	ldr	r1, [pc, #48]	@ (8002994 <__NVIC_SetPriority+0x4c>)
 8002962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002966:	0112      	lsls	r2, r2, #4
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	440b      	add	r3, r1
 800296c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002970:	e00a      	b.n	8002988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	b2da      	uxtb	r2, r3
 8002976:	4908      	ldr	r1, [pc, #32]	@ (8002998 <__NVIC_SetPriority+0x50>)
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	3b04      	subs	r3, #4
 8002980:	0112      	lsls	r2, r2, #4
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	440b      	add	r3, r1
 8002986:	761a      	strb	r2, [r3, #24]
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	e000e100 	.word	0xe000e100
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800299c:	b480      	push	{r7}
 800299e:	b089      	sub	sp, #36	@ 0x24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f1c3 0307 	rsb	r3, r3, #7
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	bf28      	it	cs
 80029ba:	2304      	movcs	r3, #4
 80029bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	3304      	adds	r3, #4
 80029c2:	2b06      	cmp	r3, #6
 80029c4:	d902      	bls.n	80029cc <NVIC_EncodePriority+0x30>
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	3b03      	subs	r3, #3
 80029ca:	e000      	b.n	80029ce <NVIC_EncodePriority+0x32>
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d0:	f04f 32ff 	mov.w	r2, #4294967295
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43da      	mvns	r2, r3
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	401a      	ands	r2, r3
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029e4:	f04f 31ff 	mov.w	r1, #4294967295
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	fa01 f303 	lsl.w	r3, r1, r3
 80029ee:	43d9      	mvns	r1, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f4:	4313      	orrs	r3, r2
         );
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3724      	adds	r7, #36	@ 0x24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
	...

08002a04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a14:	d301      	bcc.n	8002a1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a16:	2301      	movs	r3, #1
 8002a18:	e00f      	b.n	8002a3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a44 <SysTick_Config+0x40>)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a22:	210f      	movs	r1, #15
 8002a24:	f04f 30ff 	mov.w	r0, #4294967295
 8002a28:	f7ff ff8e 	bl	8002948 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a2c:	4b05      	ldr	r3, [pc, #20]	@ (8002a44 <SysTick_Config+0x40>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a32:	4b04      	ldr	r3, [pc, #16]	@ (8002a44 <SysTick_Config+0x40>)
 8002a34:	2207      	movs	r2, #7
 8002a36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	e000e010 	.word	0xe000e010

08002a48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7ff ff29 	bl	80028a8 <__NVIC_SetPriorityGrouping>
}
 8002a56:	bf00      	nop
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b086      	sub	sp, #24
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	4603      	mov	r3, r0
 8002a66:	60b9      	str	r1, [r7, #8]
 8002a68:	607a      	str	r2, [r7, #4]
 8002a6a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a6c:	f7ff ff40 	bl	80028f0 <__NVIC_GetPriorityGrouping>
 8002a70:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	68b9      	ldr	r1, [r7, #8]
 8002a76:	6978      	ldr	r0, [r7, #20]
 8002a78:	f7ff ff90 	bl	800299c <NVIC_EncodePriority>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a82:	4611      	mov	r1, r2
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff ff5f 	bl	8002948 <__NVIC_SetPriority>
}
 8002a8a:	bf00      	nop
 8002a8c:	3718      	adds	r7, #24
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b082      	sub	sp, #8
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	4603      	mov	r3, r0
 8002a9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff ff33 	bl	800290c <__NVIC_EnableIRQ>
}
 8002aa6:	bf00      	nop
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f7ff ffa4 	bl	8002a04 <SysTick_Config>
 8002abc:	4603      	mov	r3, r0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}
	...

08002ac8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e08d      	b.n	8002bf6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	4b47      	ldr	r3, [pc, #284]	@ (8002c00 <HAL_DMA_Init+0x138>)
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d80f      	bhi.n	8002b06 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	461a      	mov	r2, r3
 8002aec:	4b45      	ldr	r3, [pc, #276]	@ (8002c04 <HAL_DMA_Init+0x13c>)
 8002aee:	4413      	add	r3, r2
 8002af0:	4a45      	ldr	r2, [pc, #276]	@ (8002c08 <HAL_DMA_Init+0x140>)
 8002af2:	fba2 2303 	umull	r2, r3, r2, r3
 8002af6:	091b      	lsrs	r3, r3, #4
 8002af8:	009a      	lsls	r2, r3, #2
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a42      	ldr	r2, [pc, #264]	@ (8002c0c <HAL_DMA_Init+0x144>)
 8002b02:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b04:	e00e      	b.n	8002b24 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	4b40      	ldr	r3, [pc, #256]	@ (8002c10 <HAL_DMA_Init+0x148>)
 8002b0e:	4413      	add	r3, r2
 8002b10:	4a3d      	ldr	r2, [pc, #244]	@ (8002c08 <HAL_DMA_Init+0x140>)
 8002b12:	fba2 2303 	umull	r2, r3, r2, r3
 8002b16:	091b      	lsrs	r3, r3, #4
 8002b18:	009a      	lsls	r2, r3, #2
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a3c      	ldr	r2, [pc, #240]	@ (8002c14 <HAL_DMA_Init+0x14c>)
 8002b22:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2202      	movs	r2, #2
 8002b28:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002b3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b3e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002b48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002b68:	68fa      	ldr	r2, [r7, #12]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f000 fa84 	bl	8003084 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002b84:	d102      	bne.n	8002b8c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002ba0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d010      	beq.n	8002bcc <HAL_DMA_Init+0x104>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d80c      	bhi.n	8002bcc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 faa4 	bl	8003100 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002bc8:	605a      	str	r2, [r3, #4]
 8002bca:	e008      	b.n	8002bde <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40020407 	.word	0x40020407
 8002c04:	bffdfff8 	.word	0xbffdfff8
 8002c08:	cccccccd 	.word	0xcccccccd
 8002c0c:	40020000 	.word	0x40020000
 8002c10:	bffdfbf8 	.word	0xbffdfbf8
 8002c14:	40020400 	.word	0x40020400

08002c18 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b086      	sub	sp, #24
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
 8002c24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c26:	2300      	movs	r3, #0
 8002c28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d101      	bne.n	8002c38 <HAL_DMA_Start_IT+0x20>
 8002c34:	2302      	movs	r3, #2
 8002c36:	e066      	b.n	8002d06 <HAL_DMA_Start_IT+0xee>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d155      	bne.n	8002cf8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2202      	movs	r2, #2
 8002c50:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2200      	movs	r2, #0
 8002c58:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0201 	bic.w	r2, r2, #1
 8002c68:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	68b9      	ldr	r1, [r7, #8]
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 f9c9 	bl	8003008 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d008      	beq.n	8002c90 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f042 020e 	orr.w	r2, r2, #14
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	e00f      	b.n	8002cb0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 0204 	bic.w	r2, r2, #4
 8002c9e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f042 020a 	orr.w	r2, r2, #10
 8002cae:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d007      	beq.n	8002cce <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cc8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ccc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d007      	beq.n	8002ce6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ce0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ce4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f042 0201 	orr.w	r2, r2, #1
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	e005      	b.n	8002d04 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002d00:	2302      	movs	r3, #2
 8002d02:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d0e:	b480      	push	{r7}
 8002d10:	b085      	sub	sp, #20
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d16:	2300      	movs	r3, #0
 8002d18:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d005      	beq.n	8002d32 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2204      	movs	r2, #4
 8002d2a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	73fb      	strb	r3, [r7, #15]
 8002d30:	e037      	b.n	8002da2 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 020e 	bic.w	r2, r2, #14
 8002d40:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d50:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0201 	bic.w	r2, r2, #1
 8002d60:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d66:	f003 021f 	and.w	r2, r3, #31
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6e:	2101      	movs	r1, #1
 8002d70:	fa01 f202 	lsl.w	r2, r1, r2
 8002d74:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002d7e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00c      	beq.n	8002da2 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d92:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d96:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002da0:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d00d      	beq.n	8002df4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2204      	movs	r2, #4
 8002ddc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2201      	movs	r2, #1
 8002de2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	73fb      	strb	r3, [r7, #15]
 8002df2:	e047      	b.n	8002e84 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 020e 	bic.w	r2, r2, #14
 8002e02:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 0201 	bic.w	r2, r2, #1
 8002e12:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e1e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e22:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e28:	f003 021f 	and.w	r2, r3, #31
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e30:	2101      	movs	r1, #1
 8002e32:	fa01 f202 	lsl.w	r2, r1, r2
 8002e36:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002e40:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00c      	beq.n	8002e64 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e54:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e58:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002e62:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	4798      	blx	r3
    }
  }
  return status;
 8002e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b084      	sub	sp, #16
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eaa:	f003 031f 	and.w	r3, r3, #31
 8002eae:	2204      	movs	r2, #4
 8002eb0:	409a      	lsls	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d026      	beq.n	8002f08 <HAL_DMA_IRQHandler+0x7a>
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	f003 0304 	and.w	r3, r3, #4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d021      	beq.n	8002f08 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0320 	and.w	r3, r3, #32
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d107      	bne.n	8002ee2 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0204 	bic.w	r2, r2, #4
 8002ee0:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee6:	f003 021f 	and.w	r2, r3, #31
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eee:	2104      	movs	r1, #4
 8002ef0:	fa01 f202 	lsl.w	r2, r1, r2
 8002ef4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d071      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002f06:	e06c      	b.n	8002fe2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f0c:	f003 031f 	and.w	r3, r3, #31
 8002f10:	2202      	movs	r2, #2
 8002f12:	409a      	lsls	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	4013      	ands	r3, r2
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d02e      	beq.n	8002f7a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d029      	beq.n	8002f7a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0320 	and.w	r3, r3, #32
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10b      	bne.n	8002f4c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 020a 	bic.w	r2, r2, #10
 8002f42:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f50:	f003 021f 	and.w	r2, r3, #31
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f58:	2102      	movs	r1, #2
 8002f5a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f5e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d038      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002f78:	e033      	b.n	8002fe2 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f7e:	f003 031f 	and.w	r3, r3, #31
 8002f82:	2208      	movs	r2, #8
 8002f84:	409a      	lsls	r2, r3
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d02a      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	f003 0308 	and.w	r3, r3, #8
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d025      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 020e 	bic.w	r2, r2, #14
 8002fa6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fac:	f003 021f 	and.w	r2, r3, #31
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	fa01 f202 	lsl.w	r2, r1, r2
 8002fba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d004      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002fe2:	bf00      	nop
 8002fe4:	bf00      	nop
}
 8002fe6:	3710      	adds	r7, #16
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}

08002fec <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002ffa:	b2db      	uxtb	r3, r3
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
 8003014:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800301e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003024:	2b00      	cmp	r3, #0
 8003026:	d004      	beq.n	8003032 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003030:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003036:	f003 021f 	and.w	r2, r3, #31
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303e:	2101      	movs	r1, #1
 8003040:	fa01 f202 	lsl.w	r2, r1, r2
 8003044:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	2b10      	cmp	r3, #16
 8003054:	d108      	bne.n	8003068 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003066:	e007      	b.n	8003078 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68ba      	ldr	r2, [r7, #8]
 800306e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	60da      	str	r2, [r3, #12]
}
 8003078:	bf00      	nop
 800307a:	3714      	adds	r7, #20
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003084:	b480      	push	{r7}
 8003086:	b087      	sub	sp, #28
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	461a      	mov	r2, r3
 8003092:	4b16      	ldr	r3, [pc, #88]	@ (80030ec <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003094:	429a      	cmp	r2, r3
 8003096:	d802      	bhi.n	800309e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003098:	4b15      	ldr	r3, [pc, #84]	@ (80030f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800309a:	617b      	str	r3, [r7, #20]
 800309c:	e001      	b.n	80030a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800309e:	4b15      	ldr	r3, [pc, #84]	@ (80030f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80030a0:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	3b08      	subs	r3, #8
 80030ae:	4a12      	ldr	r2, [pc, #72]	@ (80030f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80030b0:	fba2 2303 	umull	r2, r3, r2, r3
 80030b4:	091b      	lsrs	r3, r3, #4
 80030b6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030bc:	089b      	lsrs	r3, r3, #2
 80030be:	009a      	lsls	r2, r3, #2
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	4413      	add	r3, r2
 80030c4:	461a      	mov	r2, r3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a0b      	ldr	r2, [pc, #44]	@ (80030fc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80030ce:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f003 031f 	and.w	r3, r3, #31
 80030d6:	2201      	movs	r2, #1
 80030d8:	409a      	lsls	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80030de:	bf00      	nop
 80030e0:	371c      	adds	r7, #28
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	40020407 	.word	0x40020407
 80030f0:	40020800 	.word	0x40020800
 80030f4:	40020820 	.word	0x40020820
 80030f8:	cccccccd 	.word	0xcccccccd
 80030fc:	40020880 	.word	0x40020880

08003100 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	b2db      	uxtb	r3, r3
 800310e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	4b0b      	ldr	r3, [pc, #44]	@ (8003140 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003114:	4413      	add	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	461a      	mov	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a08      	ldr	r2, [pc, #32]	@ (8003144 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003122:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	3b01      	subs	r3, #1
 8003128:	f003 031f 	and.w	r3, r3, #31
 800312c:	2201      	movs	r2, #1
 800312e:	409a      	lsls	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003134:	bf00      	nop
 8003136:	3714      	adds	r7, #20
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	1000823f 	.word	0x1000823f
 8003144:	40020940 	.word	0x40020940

08003148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003148:	b480      	push	{r7}
 800314a:	b087      	sub	sp, #28
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003152:	2300      	movs	r3, #0
 8003154:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003156:	e15a      	b.n	800340e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	2101      	movs	r1, #1
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	fa01 f303 	lsl.w	r3, r1, r3
 8003164:	4013      	ands	r3, r2
 8003166:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 814c 	beq.w	8003408 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	f003 0303 	and.w	r3, r3, #3
 8003178:	2b01      	cmp	r3, #1
 800317a:	d005      	beq.n	8003188 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003184:	2b02      	cmp	r3, #2
 8003186:	d130      	bne.n	80031ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	2203      	movs	r2, #3
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	43db      	mvns	r3, r3
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	4013      	ands	r3, r2
 800319e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	68da      	ldr	r2, [r3, #12]
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	005b      	lsls	r3, r3, #1
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	693a      	ldr	r2, [r7, #16]
 80031b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80031be:	2201      	movs	r2, #1
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	43db      	mvns	r3, r3
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	4013      	ands	r3, r2
 80031cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	091b      	lsrs	r3, r3, #4
 80031d4:	f003 0201 	and.w	r2, r3, #1
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	fa02 f303 	lsl.w	r3, r2, r3
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f003 0303 	and.w	r3, r3, #3
 80031f2:	2b03      	cmp	r3, #3
 80031f4:	d017      	beq.n	8003226 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	005b      	lsls	r3, r3, #1
 8003200:	2203      	movs	r2, #3
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	43db      	mvns	r3, r3
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	4013      	ands	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	689a      	ldr	r2, [r3, #8]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	fa02 f303 	lsl.w	r3, r2, r3
 800321a:	693a      	ldr	r2, [r7, #16]
 800321c:	4313      	orrs	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f003 0303 	and.w	r3, r3, #3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d123      	bne.n	800327a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	08da      	lsrs	r2, r3, #3
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	3208      	adds	r2, #8
 800323a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800323e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	220f      	movs	r2, #15
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	43db      	mvns	r3, r3
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	4013      	ands	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	691a      	ldr	r2, [r3, #16]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	009b      	lsls	r3, r3, #2
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	4313      	orrs	r3, r2
 800326a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	08da      	lsrs	r2, r3, #3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	3208      	adds	r2, #8
 8003274:	6939      	ldr	r1, [r7, #16]
 8003276:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	2203      	movs	r2, #3
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	43db      	mvns	r3, r3
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	4013      	ands	r3, r2
 8003290:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f003 0203 	and.w	r2, r3, #3
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	fa02 f303 	lsl.w	r3, r2, r3
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 80a6 	beq.w	8003408 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032bc:	4b5b      	ldr	r3, [pc, #364]	@ (800342c <HAL_GPIO_Init+0x2e4>)
 80032be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032c0:	4a5a      	ldr	r2, [pc, #360]	@ (800342c <HAL_GPIO_Init+0x2e4>)
 80032c2:	f043 0301 	orr.w	r3, r3, #1
 80032c6:	6613      	str	r3, [r2, #96]	@ 0x60
 80032c8:	4b58      	ldr	r3, [pc, #352]	@ (800342c <HAL_GPIO_Init+0x2e4>)
 80032ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032cc:	f003 0301 	and.w	r3, r3, #1
 80032d0:	60bb      	str	r3, [r7, #8]
 80032d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032d4:	4a56      	ldr	r2, [pc, #344]	@ (8003430 <HAL_GPIO_Init+0x2e8>)
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	089b      	lsrs	r3, r3, #2
 80032da:	3302      	adds	r3, #2
 80032dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f003 0303 	and.w	r3, r3, #3
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	220f      	movs	r2, #15
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	43db      	mvns	r3, r3
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	4013      	ands	r3, r2
 80032f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80032fe:	d01f      	beq.n	8003340 <HAL_GPIO_Init+0x1f8>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a4c      	ldr	r2, [pc, #304]	@ (8003434 <HAL_GPIO_Init+0x2ec>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d019      	beq.n	800333c <HAL_GPIO_Init+0x1f4>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a4b      	ldr	r2, [pc, #300]	@ (8003438 <HAL_GPIO_Init+0x2f0>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d013      	beq.n	8003338 <HAL_GPIO_Init+0x1f0>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a4a      	ldr	r2, [pc, #296]	@ (800343c <HAL_GPIO_Init+0x2f4>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d00d      	beq.n	8003334 <HAL_GPIO_Init+0x1ec>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a49      	ldr	r2, [pc, #292]	@ (8003440 <HAL_GPIO_Init+0x2f8>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d007      	beq.n	8003330 <HAL_GPIO_Init+0x1e8>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	4a48      	ldr	r2, [pc, #288]	@ (8003444 <HAL_GPIO_Init+0x2fc>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d101      	bne.n	800332c <HAL_GPIO_Init+0x1e4>
 8003328:	2305      	movs	r3, #5
 800332a:	e00a      	b.n	8003342 <HAL_GPIO_Init+0x1fa>
 800332c:	2306      	movs	r3, #6
 800332e:	e008      	b.n	8003342 <HAL_GPIO_Init+0x1fa>
 8003330:	2304      	movs	r3, #4
 8003332:	e006      	b.n	8003342 <HAL_GPIO_Init+0x1fa>
 8003334:	2303      	movs	r3, #3
 8003336:	e004      	b.n	8003342 <HAL_GPIO_Init+0x1fa>
 8003338:	2302      	movs	r3, #2
 800333a:	e002      	b.n	8003342 <HAL_GPIO_Init+0x1fa>
 800333c:	2301      	movs	r3, #1
 800333e:	e000      	b.n	8003342 <HAL_GPIO_Init+0x1fa>
 8003340:	2300      	movs	r3, #0
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	f002 0203 	and.w	r2, r2, #3
 8003348:	0092      	lsls	r2, r2, #2
 800334a:	4093      	lsls	r3, r2
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	4313      	orrs	r3, r2
 8003350:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003352:	4937      	ldr	r1, [pc, #220]	@ (8003430 <HAL_GPIO_Init+0x2e8>)
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	089b      	lsrs	r3, r3, #2
 8003358:	3302      	adds	r3, #2
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003360:	4b39      	ldr	r3, [pc, #228]	@ (8003448 <HAL_GPIO_Init+0x300>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	43db      	mvns	r3, r3
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	4013      	ands	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d003      	beq.n	8003384 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800337c:	693a      	ldr	r2, [r7, #16]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	4313      	orrs	r3, r2
 8003382:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003384:	4a30      	ldr	r2, [pc, #192]	@ (8003448 <HAL_GPIO_Init+0x300>)
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800338a:	4b2f      	ldr	r3, [pc, #188]	@ (8003448 <HAL_GPIO_Init+0x300>)
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	43db      	mvns	r3, r3
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	4013      	ands	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d003      	beq.n	80033ae <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80033a6:	693a      	ldr	r2, [r7, #16]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80033ae:	4a26      	ldr	r2, [pc, #152]	@ (8003448 <HAL_GPIO_Init+0x300>)
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80033b4:	4b24      	ldr	r3, [pc, #144]	@ (8003448 <HAL_GPIO_Init+0x300>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	43db      	mvns	r3, r3
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	4013      	ands	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d003      	beq.n	80033d8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80033d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003448 <HAL_GPIO_Init+0x300>)
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80033de:	4b1a      	ldr	r3, [pc, #104]	@ (8003448 <HAL_GPIO_Init+0x300>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	43db      	mvns	r3, r3
 80033e8:	693a      	ldr	r2, [r7, #16]
 80033ea:	4013      	ands	r3, r2
 80033ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	4313      	orrs	r3, r2
 8003400:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003402:	4a11      	ldr	r2, [pc, #68]	@ (8003448 <HAL_GPIO_Init+0x300>)
 8003404:	693b      	ldr	r3, [r7, #16]
 8003406:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	3301      	adds	r3, #1
 800340c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	fa22 f303 	lsr.w	r3, r2, r3
 8003418:	2b00      	cmp	r3, #0
 800341a:	f47f ae9d 	bne.w	8003158 <HAL_GPIO_Init+0x10>
  }
}
 800341e:	bf00      	nop
 8003420:	bf00      	nop
 8003422:	371c      	adds	r7, #28
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr
 800342c:	40021000 	.word	0x40021000
 8003430:	40010000 	.word	0x40010000
 8003434:	48000400 	.word	0x48000400
 8003438:	48000800 	.word	0x48000800
 800343c:	48000c00 	.word	0x48000c00
 8003440:	48001000 	.word	0x48001000
 8003444:	48001400 	.word	0x48001400
 8003448:	40010400 	.word	0x40010400

0800344c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	460b      	mov	r3, r1
 8003456:	807b      	strh	r3, [r7, #2]
 8003458:	4613      	mov	r3, r2
 800345a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800345c:	787b      	ldrb	r3, [r7, #1]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003462:	887a      	ldrh	r2, [r7, #2]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003468:	e002      	b.n	8003470 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800346a:	887a      	ldrh	r2, [r7, #2]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003486:	4b08      	ldr	r3, [pc, #32]	@ (80034a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003488:	695a      	ldr	r2, [r3, #20]
 800348a:	88fb      	ldrh	r3, [r7, #6]
 800348c:	4013      	ands	r3, r2
 800348e:	2b00      	cmp	r3, #0
 8003490:	d006      	beq.n	80034a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003492:	4a05      	ldr	r2, [pc, #20]	@ (80034a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003494:	88fb      	ldrh	r3, [r7, #6]
 8003496:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003498:	88fb      	ldrh	r3, [r7, #6]
 800349a:	4618      	mov	r0, r3
 800349c:	f7fd fb56 	bl	8000b4c <HAL_GPIO_EXTI_Callback>
  }
}
 80034a0:	bf00      	nop
 80034a2:	3708      	adds	r7, #8
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	40010400 	.word	0x40010400

080034ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e08d      	b.n	80035da <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d106      	bne.n	80034d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7fd fc00 	bl	8000cd8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2224      	movs	r2, #36	@ 0x24
 80034dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f022 0201 	bic.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80034fc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800350c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d107      	bne.n	8003526 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689a      	ldr	r2, [r3, #8]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003522:	609a      	str	r2, [r3, #8]
 8003524:	e006      	b.n	8003534 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	689a      	ldr	r2, [r3, #8]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003532:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	68db      	ldr	r3, [r3, #12]
 8003538:	2b02      	cmp	r3, #2
 800353a:	d108      	bne.n	800354e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800354a:	605a      	str	r2, [r3, #4]
 800354c:	e007      	b.n	800355e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	685a      	ldr	r2, [r3, #4]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800355c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6812      	ldr	r2, [r2, #0]
 8003568:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800356c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003570:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003580:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691a      	ldr	r2, [r3, #16]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	430a      	orrs	r2, r1
 800359a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	69d9      	ldr	r1, [r3, #28]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a1a      	ldr	r2, [r3, #32]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0201 	orr.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2220      	movs	r2, #32
 80035c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3708      	adds	r7, #8
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
	...

080035e4 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af02      	add	r7, sp, #8
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	4608      	mov	r0, r1
 80035ee:	4611      	mov	r1, r2
 80035f0:	461a      	mov	r2, r3
 80035f2:	4603      	mov	r3, r0
 80035f4:	817b      	strh	r3, [r7, #10]
 80035f6:	460b      	mov	r3, r1
 80035f8:	813b      	strh	r3, [r7, #8]
 80035fa:	4613      	mov	r3, r2
 80035fc:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b20      	cmp	r3, #32
 8003608:	d16a      	bne.n	80036e0 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800360a:	69bb      	ldr	r3, [r7, #24]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d002      	beq.n	8003616 <HAL_I2C_Mem_Write_IT+0x32>
 8003610:	8bbb      	ldrh	r3, [r7, #28]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d105      	bne.n	8003622 <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800361c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e05f      	b.n	80036e2 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	699b      	ldr	r3, [r3, #24]
 8003628:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800362c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003630:	d101      	bne.n	8003636 <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 8003632:	2302      	movs	r3, #2
 8003634:	e055      	b.n	80036e2 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800363c:	2b01      	cmp	r3, #1
 800363e:	d101      	bne.n	8003644 <HAL_I2C_Mem_Write_IT+0x60>
 8003640:	2302      	movs	r3, #2
 8003642:	e04e      	b.n	80036e2 <HAL_I2C_Mem_Write_IT+0xfe>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2221      	movs	r2, #33	@ 0x21
 8003650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2240      	movs	r2, #64	@ 0x40
 8003658:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr    = pData;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	69ba      	ldr	r2, [r7, #24]
 800366c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8bba      	ldrh	r2, [r7, #28]
 8003672:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4a1d      	ldr	r2, [pc, #116]	@ (80036ec <HAL_I2C_Mem_Write_IT+0x108>)
 8003678:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	4a1c      	ldr	r2, [pc, #112]	@ (80036f0 <HAL_I2C_Mem_Write_IT+0x10c>)
 800367e:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8003680:	897a      	ldrh	r2, [r7, #10]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003686:	88fb      	ldrh	r3, [r7, #6]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d109      	bne.n	80036a0 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800368c:	893b      	ldrh	r3, [r7, #8]
 800368e:	b2da      	uxtb	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f04f 32ff 	mov.w	r2, #4294967295
 800369c:	651a      	str	r2, [r3, #80]	@ 0x50
 800369e:	e00b      	b.n	80036b8 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80036a0:	893b      	ldrh	r3, [r7, #8]
 80036a2:	0a1b      	lsrs	r3, r3, #8
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	b2da      	uxtb	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 80036ae:	893b      	ldrh	r3, [r7, #8]
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	461a      	mov	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80036b8:	88fb      	ldrh	r3, [r7, #6]
 80036ba:	b2da      	uxtb	r2, r3
 80036bc:	8979      	ldrh	r1, [r7, #10]
 80036be:	4b0d      	ldr	r3, [pc, #52]	@ (80036f4 <HAL_I2C_Mem_Write_IT+0x110>)
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f001 fb78 	bl	8004dbc <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80036d4:	2101      	movs	r1, #1
 80036d6:	68f8      	ldr	r0, [r7, #12]
 80036d8:	f001 fba2 	bl	8004e20 <I2C_Enable_IRQ>

    return HAL_OK;
 80036dc:	2300      	movs	r3, #0
 80036de:	e000      	b.n	80036e2 <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80036e0:	2302      	movs	r3, #2
  }
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	3710      	adds	r7, #16
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	ffff0000 	.word	0xffff0000
 80036f0:	080039c1 	.word	0x080039c1
 80036f4:	80002000 	.word	0x80002000

080036f8 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af02      	add	r7, sp, #8
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	4608      	mov	r0, r1
 8003702:	4611      	mov	r1, r2
 8003704:	461a      	mov	r2, r3
 8003706:	4603      	mov	r3, r0
 8003708:	817b      	strh	r3, [r7, #10]
 800370a:	460b      	mov	r3, r1
 800370c:	813b      	strh	r3, [r7, #8]
 800370e:	4613      	mov	r3, r2
 8003710:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003718:	b2db      	uxtb	r3, r3
 800371a:	2b20      	cmp	r3, #32
 800371c:	d166      	bne.n	80037ec <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d002      	beq.n	800372a <HAL_I2C_Mem_Read_IT+0x32>
 8003724:	8bbb      	ldrh	r3, [r7, #28]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d105      	bne.n	8003736 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003730:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e05b      	b.n	80037ee <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	699b      	ldr	r3, [r3, #24]
 800373c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003740:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003744:	d101      	bne.n	800374a <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 8003746:	2302      	movs	r3, #2
 8003748:	e051      	b.n	80037ee <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003750:	2b01      	cmp	r3, #1
 8003752:	d101      	bne.n	8003758 <HAL_I2C_Mem_Read_IT+0x60>
 8003754:	2302      	movs	r3, #2
 8003756:	e04a      	b.n	80037ee <HAL_I2C_Mem_Read_IT+0xf6>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2222      	movs	r2, #34	@ 0x22
 8003764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2240      	movs	r2, #64	@ 0x40
 800376c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8bba      	ldrh	r2, [r7, #28]
 8003780:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	4a1c      	ldr	r2, [pc, #112]	@ (80037f8 <HAL_I2C_Mem_Read_IT+0x100>)
 8003786:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4a1c      	ldr	r2, [pc, #112]	@ (80037fc <HAL_I2C_Mem_Read_IT+0x104>)
 800378c:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800378e:	897a      	ldrh	r2, [r7, #10]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003794:	88fb      	ldrh	r3, [r7, #6]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d109      	bne.n	80037ae <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800379a:	893b      	ldrh	r3, [r7, #8]
 800379c:	b2da      	uxtb	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f04f 32ff 	mov.w	r2, #4294967295
 80037aa:	651a      	str	r2, [r3, #80]	@ 0x50
 80037ac:	e00b      	b.n	80037c6 <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80037ae:	893b      	ldrh	r3, [r7, #8]
 80037b0:	0a1b      	lsrs	r3, r3, #8
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	b2da      	uxtb	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 80037bc:	893b      	ldrh	r3, [r7, #8]
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	461a      	mov	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80037c6:	88fb      	ldrh	r3, [r7, #6]
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	8979      	ldrh	r1, [r7, #10]
 80037cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003800 <HAL_I2C_Mem_Read_IT+0x108>)
 80037ce:	9300      	str	r3, [sp, #0]
 80037d0:	2300      	movs	r3, #0
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f001 faf2 	bl	8004dbc <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80037e0:	2101      	movs	r1, #1
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f001 fb1c 	bl	8004e20 <I2C_Enable_IRQ>

    return HAL_OK;
 80037e8:	2300      	movs	r3, #0
 80037ea:	e000      	b.n	80037ee <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 80037ec:	2302      	movs	r3, #2
  }
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	ffff0000 	.word	0xffff0000
 80037fc:	080039c1 	.word	0x080039c1
 8003800:	80002000 	.word	0x80002000

08003804 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	699b      	ldr	r3, [r3, #24]
 8003812:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003820:	2b00      	cmp	r3, #0
 8003822:	d005      	beq.n	8003830 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	68f9      	ldr	r1, [r7, #12]
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	4798      	blx	r3
  }
}
 8003830:	bf00      	nop
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b086      	sub	sp, #24
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	699b      	ldr	r3, [r3, #24]
 8003846:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00f      	beq.n	800387a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003860:	2b00      	cmp	r3, #0
 8003862:	d00a      	beq.n	800387a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003868:	f043 0201 	orr.w	r2, r3, #1
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003878:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00f      	beq.n	80038a4 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00a      	beq.n	80038a4 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003892:	f043 0208 	orr.w	r2, r3, #8
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80038a2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00f      	beq.n	80038ce <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d00a      	beq.n	80038ce <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038bc:	f043 0202 	orr.w	r2, r3, #2
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038cc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038d2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f003 030b 	and.w	r3, r3, #11
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d003      	beq.n	80038e6 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80038de:	68f9      	ldr	r1, [r7, #12]
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f001 f911 	bl	8004b08 <I2C_ITError>
  }
}
 80038e6:	bf00      	nop
 80038e8:	3718      	adds	r7, #24
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038ee:	b480      	push	{r7}
 80038f0:	b083      	sub	sp, #12
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800390a:	bf00      	nop
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr

08003916 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003916:	b480      	push	{r7}
 8003918:	b083      	sub	sp, #12
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800391e:	bf00      	nop
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003932:	bf00      	nop
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800393e:	b480      	push	{r7}
 8003940:	b083      	sub	sp, #12
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
 8003946:	460b      	mov	r3, r1
 8003948:	70fb      	strb	r3, [r7, #3]
 800394a:	4613      	mov	r3, r2
 800394c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr

0800395a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr

0800396e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800396e:	b480      	push	{r7}
 8003970:	b083      	sub	sp, #12
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr

08003982 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003982:	b480      	push	{r7}
 8003984:	b083      	sub	sp, #12
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800398a:	bf00      	nop
 800398c:	370c      	adds	r7, #12
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003996:	b480      	push	{r7}
 8003998:	b083      	sub	sp, #12
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800399e:	bf00      	nop
 80039a0:	370c      	adds	r7, #12
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr

080039aa <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039aa:	b480      	push	{r7}
 80039ac:	b083      	sub	sp, #12
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
	...

080039c0 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b088      	sub	sp, #32
 80039c4:	af02      	add	r7, sp, #8
 80039c6:	60f8      	str	r0, [r7, #12]
 80039c8:	60b9      	str	r1, [r7, #8]
 80039ca:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80039cc:	4b8d      	ldr	r3, [pc, #564]	@ (8003c04 <I2C_Mem_ISR_IT+0x244>)
 80039ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d101      	bne.n	80039e2 <I2C_Mem_ISR_IT+0x22>
 80039de:	2302      	movs	r3, #2
 80039e0:	e10c      	b.n	8003bfc <I2C_Mem_ISR_IT+0x23c>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2201      	movs	r2, #1
 80039e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	f003 0310 	and.w	r3, r3, #16
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d012      	beq.n	8003a1a <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00d      	beq.n	8003a1a <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2210      	movs	r2, #16
 8003a04:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a0a:	f043 0204 	orr.w	r2, r3, #4
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f001 f98f 	bl	8004d36 <I2C_Flush_TXDR>
 8003a18:	e0dd      	b.n	8003bd6 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d022      	beq.n	8003a6a <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d01d      	beq.n	8003a6a <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	f023 0304 	bic.w	r3, r3, #4
 8003a34:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a40:	b2d2      	uxtb	r2, r2
 8003a42:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a48:	1c5a      	adds	r2, r3, #1
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a52:	3b01      	subs	r3, #1
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003a68:	e0b5      	b.n	8003bd6 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d02c      	beq.n	8003ace <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d027      	beq.n	8003ace <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a86:	d118      	bne.n	8003aba <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a8c:	781a      	ldrb	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a98:	1c5a      	adds	r2, r3, #1
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8003ab8:	e08d      	b.n	8003bd6 <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003ac2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f04f 32ff 	mov.w	r2, #4294967295
 8003aca:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8003acc:	e083      	b.n	8003bd6 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d03c      	beq.n	8003b52 <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d037      	beq.n	8003b52 <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d02c      	beq.n	8003b46 <I2C_Mem_ISR_IT+0x186>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d128      	bne.n	8003b46 <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	2bff      	cmp	r3, #255	@ 0xff
 8003afc:	d910      	bls.n	8003b20 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	22ff      	movs	r2, #255	@ 0xff
 8003b02:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b08:	b299      	uxth	r1, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b0e:	b2da      	uxtb	r2, r3
 8003b10:	2300      	movs	r3, #0
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003b18:	68f8      	ldr	r0, [r7, #12]
 8003b1a:	f001 f94f 	bl	8004dbc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b1e:	e017      	b.n	8003b50 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b2e:	b299      	uxth	r1, r3
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	2300      	movs	r3, #0
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f001 f93c 	bl	8004dbc <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b44:	e004      	b.n	8003b50 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003b46:	2140      	movs	r1, #64	@ 0x40
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 ffdd 	bl	8004b08 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b4e:	e042      	b.n	8003bd6 <I2C_Mem_ISR_IT+0x216>
 8003b50:	e041      	b.n	8003bd6 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d03c      	beq.n	8003bd6 <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d037      	beq.n	8003bd6 <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003b66:	2101      	movs	r1, #1
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f001 f9dd 	bl	8004f28 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003b6e:	2102      	movs	r1, #2
 8003b70:	68f8      	ldr	r0, [r7, #12]
 8003b72:	f001 f955 	bl	8004e20 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b22      	cmp	r3, #34	@ 0x22
 8003b80:	d101      	bne.n	8003b86 <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 8003b82:	4b21      	ldr	r3, [pc, #132]	@ (8003c08 <I2C_Mem_ISR_IT+0x248>)
 8003b84:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	2bff      	cmp	r3, #255	@ 0xff
 8003b8e:	d910      	bls.n	8003bb2 <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	22ff      	movs	r2, #255	@ 0xff
 8003b94:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b9a:	b299      	uxth	r1, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f001 f906 	bl	8004dbc <I2C_TransferConfig>
 8003bb0:	e011      	b.n	8003bd6 <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bc0:	b299      	uxth	r1, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f001 f8f3 	bl	8004dbc <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	f003 0320 	and.w	r3, r3, #32
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d008      	beq.n	8003bf2 <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8003bea:	6939      	ldr	r1, [r7, #16]
 8003bec:	68f8      	ldr	r0, [r7, #12]
 8003bee:	f000 fd0b 	bl	8004608 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003bfa:	2300      	movs	r3, #0
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3718      	adds	r7, #24
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}
 8003c04:	80002000 	.word	0x80002000
 8003c08:	80002400 	.word	0x80002400

08003c0c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c1c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d101      	bne.n	8003c30 <I2C_Slave_ISR_IT+0x24>
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	e0e2      	b.n	8003df6 <I2C_Slave_ISR_IT+0x1ea>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	f003 0320 	and.w	r3, r3, #32
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d009      	beq.n	8003c56 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d004      	beq.n	8003c56 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003c4c:	6939      	ldr	r1, [r7, #16]
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f000 fda2 	bl	8004798 <I2C_ITSlaveCplt>
 8003c54:	e0ca      	b.n	8003dec <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	f003 0310 	and.w	r3, r3, #16
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d04b      	beq.n	8003cf8 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d046      	beq.n	8003cf8 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d128      	bne.n	8003cc6 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b28      	cmp	r3, #40	@ 0x28
 8003c7e:	d108      	bne.n	8003c92 <I2C_Slave_ISR_IT+0x86>
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003c86:	d104      	bne.n	8003c92 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003c88:	6939      	ldr	r1, [r7, #16]
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f000 fee8 	bl	8004a60 <I2C_ITListenCplt>
 8003c90:	e031      	b.n	8003cf6 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	2b29      	cmp	r3, #41	@ 0x29
 8003c9c:	d10e      	bne.n	8003cbc <I2C_Slave_ISR_IT+0xb0>
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ca4:	d00a      	beq.n	8003cbc <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2210      	movs	r2, #16
 8003cac:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	f001 f841 	bl	8004d36 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f000 fc4b 	bl	8004550 <I2C_ITSlaveSeqCplt>
 8003cba:	e01c      	b.n	8003cf6 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2210      	movs	r2, #16
 8003cc2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003cc4:	e08f      	b.n	8003de6 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2210      	movs	r2, #16
 8003ccc:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cd2:	f043 0204 	orr.w	r2, r3, #4
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d003      	beq.n	8003ce8 <I2C_Slave_ISR_IT+0xdc>
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ce6:	d17e      	bne.n	8003de6 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cec:	4619      	mov	r1, r3
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f000 ff0a 	bl	8004b08 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003cf4:	e077      	b.n	8003de6 <I2C_Slave_ISR_IT+0x1da>
 8003cf6:	e076      	b.n	8003de6 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	f003 0304 	and.w	r3, r3, #4
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d02f      	beq.n	8003d62 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d02a      	beq.n	8003d62 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d10:	b29b      	uxth	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d018      	beq.n	8003d48 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d20:	b2d2      	uxtb	r2, r2
 8003d22:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d28:	1c5a      	adds	r2, r3, #1
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d32:	3b01      	subs	r3, #1
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	3b01      	subs	r3, #1
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d14b      	bne.n	8003dea <I2C_Slave_ISR_IT+0x1de>
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003d58:	d047      	beq.n	8003dea <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f000 fbf8 	bl	8004550 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003d60:	e043      	b.n	8003dea <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	f003 0308 	and.w	r3, r3, #8
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d009      	beq.n	8003d80 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d004      	beq.n	8003d80 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003d76:	6939      	ldr	r1, [r7, #16]
 8003d78:	68f8      	ldr	r0, [r7, #12]
 8003d7a:	f000 fb28 	bl	80043ce <I2C_ITAddrCplt>
 8003d7e:	e035      	b.n	8003dec <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	f003 0302 	and.w	r3, r3, #2
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d030      	beq.n	8003dec <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d02b      	beq.n	8003dec <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d018      	beq.n	8003dd0 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da2:	781a      	ldrb	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dae:	1c5a      	adds	r2, r3, #1
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003db8:	b29b      	uxth	r3, r3
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	b29a      	uxth	r2, r3
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	b29a      	uxth	r2, r3
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	851a      	strh	r2, [r3, #40]	@ 0x28
 8003dce:	e00d      	b.n	8003dec <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003dd6:	d002      	beq.n	8003dde <I2C_Slave_ISR_IT+0x1d2>
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d106      	bne.n	8003dec <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f000 fbb6 	bl	8004550 <I2C_ITSlaveSeqCplt>
 8003de4:	e002      	b.n	8003dec <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8003de6:	bf00      	nop
 8003de8:	e000      	b.n	8003dec <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8003dea:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3718      	adds	r7, #24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b088      	sub	sp, #32
 8003e02:	af02      	add	r7, sp, #8
 8003e04:	60f8      	str	r0, [r7, #12]
 8003e06:	60b9      	str	r1, [r7, #8]
 8003e08:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d101      	bne.n	8003e18 <I2C_Master_ISR_DMA+0x1a>
 8003e14:	2302      	movs	r3, #2
 8003e16:	e0d9      	b.n	8003fcc <I2C_Master_ISR_DMA+0x1ce>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	f003 0310 	and.w	r3, r3, #16
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d016      	beq.n	8003e58 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d011      	beq.n	8003e58 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2210      	movs	r2, #16
 8003e3a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e40:	f043 0204 	orr.w	r2, r3, #4
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8003e48:	2120      	movs	r1, #32
 8003e4a:	68f8      	ldr	r0, [r7, #12]
 8003e4c:	f000 ffe8 	bl	8004e20 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003e50:	68f8      	ldr	r0, [r7, #12]
 8003e52:	f000 ff70 	bl	8004d36 <I2C_Flush_TXDR>
 8003e56:	e0b4      	b.n	8003fc2 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d071      	beq.n	8003f46 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d06c      	beq.n	8003f46 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e7a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d04e      	beq.n	8003f24 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e92:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	2bff      	cmp	r3, #255	@ 0xff
 8003e9c:	d906      	bls.n	8003eac <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	22ff      	movs	r2, #255	@ 0xff
 8003ea2:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8003ea4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003ea8:	617b      	str	r3, [r7, #20]
 8003eaa:	e010      	b.n	8003ece <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eba:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ebe:	d003      	beq.n	8003ec8 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ec4:	617b      	str	r3, [r7, #20]
 8003ec6:	e002      	b.n	8003ece <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003ec8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003ecc:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ed2:	b2da      	uxtb	r2, r3
 8003ed4:	8a79      	ldrh	r1, [r7, #18]
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 ff6d 	bl	8004dbc <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ee6:	b29a      	uxth	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b22      	cmp	r3, #34	@ 0x22
 8003efe:	d108      	bne.n	8003f12 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f0e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003f10:	e057      	b.n	8003fc2 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f20:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003f22:	e04e      	b.n	8003fc2 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f2e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f32:	d003      	beq.n	8003f3c <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 face 	bl	80044d6 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8003f3a:	e042      	b.n	8003fc2 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003f3c:	2140      	movs	r1, #64	@ 0x40
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f000 fde2 	bl	8004b08 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8003f44:	e03d      	b.n	8003fc2 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d028      	beq.n	8003fa2 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d023      	beq.n	8003fa2 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d119      	bne.n	8003f98 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f6e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003f72:	d025      	beq.n	8003fc0 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f78:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003f7c:	d108      	bne.n	8003f90 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f8c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8003f8e:	e017      	b.n	8003fc0 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f000 faa0 	bl	80044d6 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003f96:	e013      	b.n	8003fc0 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003f98:	2140      	movs	r1, #64	@ 0x40
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 fdb4 	bl	8004b08 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003fa0:	e00e      	b.n	8003fc0 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	f003 0320 	and.w	r3, r3, #32
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00a      	beq.n	8003fc2 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d005      	beq.n	8003fc2 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003fb6:	68b9      	ldr	r1, [r7, #8]
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f000 fb25 	bl	8004608 <I2C_ITMasterCplt>
 8003fbe:	e000      	b.n	8003fc2 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8003fc0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3718      	adds	r7, #24
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b088      	sub	sp, #32
 8003fd8:	af02      	add	r7, sp, #8
 8003fda:	60f8      	str	r0, [r7, #12]
 8003fdc:	60b9      	str	r1, [r7, #8]
 8003fde:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8003fe0:	4b8d      	ldr	r3, [pc, #564]	@ (8004218 <I2C_Mem_ISR_DMA+0x244>)
 8003fe2:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d101      	bne.n	8003ff2 <I2C_Mem_ISR_DMA+0x1e>
 8003fee:	2302      	movs	r3, #2
 8003ff0:	e10e      	b.n	8004210 <I2C_Mem_ISR_DMA+0x23c>
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2201      	movs	r2, #1
 8003ff6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	f003 0310 	and.w	r3, r3, #16
 8004000:	2b00      	cmp	r3, #0
 8004002:	d016      	beq.n	8004032 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800400a:	2b00      	cmp	r3, #0
 800400c:	d011      	beq.n	8004032 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2210      	movs	r2, #16
 8004014:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401a:	f043 0204 	orr.w	r2, r3, #4
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8004022:	2120      	movs	r1, #32
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 fefb 	bl	8004e20 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f000 fe83 	bl	8004d36 <I2C_Flush_TXDR>
 8004030:	e0e9      	b.n	8004206 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00e      	beq.n	800405a <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004042:	2b00      	cmp	r3, #0
 8004044:	d009      	beq.n	800405a <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	68fa      	ldr	r2, [r7, #12]
 800404c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800404e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f04f 32ff 	mov.w	r2, #4294967295
 8004056:	651a      	str	r2, [r3, #80]	@ 0x50
 8004058:	e0d5      	b.n	8004206 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004060:	2b00      	cmp	r3, #0
 8004062:	d05f      	beq.n	8004124 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800406a:	2b00      	cmp	r3, #0
 800406c:	d05a      	beq.n	8004124 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800406e:	2101      	movs	r1, #1
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f000 ff59 	bl	8004f28 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004076:	2110      	movs	r1, #16
 8004078:	68f8      	ldr	r0, [r7, #12]
 800407a:	f000 fed1 	bl	8004e20 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004082:	b29b      	uxth	r3, r3
 8004084:	2b00      	cmp	r3, #0
 8004086:	d048      	beq.n	800411a <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800408c:	b29b      	uxth	r3, r3
 800408e:	2bff      	cmp	r3, #255	@ 0xff
 8004090:	d910      	bls.n	80040b4 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	22ff      	movs	r2, #255	@ 0xff
 8004096:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800409c:	b299      	uxth	r1, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	2300      	movs	r3, #0
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f000 fe85 	bl	8004dbc <I2C_TransferConfig>
 80040b2:	e011      	b.n	80040d8 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040c2:	b299      	uxth	r1, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040c8:	b2da      	uxtb	r2, r3
 80040ca:	2300      	movs	r3, #0
 80040cc:	9300      	str	r3, [sp, #0]
 80040ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f000 fe72 	bl	8004dbc <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040dc:	b29a      	uxth	r2, r3
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	2b22      	cmp	r3, #34	@ 0x22
 80040f4:	d108      	bne.n	8004108 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004104:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004106:	e07e      	b.n	8004206 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004116:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8004118:	e075      	b.n	8004206 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800411a:	2140      	movs	r1, #64	@ 0x40
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f000 fcf3 	bl	8004b08 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8004122:	e070      	b.n	8004206 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800412a:	2b00      	cmp	r3, #0
 800412c:	d05d      	beq.n	80041ea <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8004134:	2b00      	cmp	r3, #0
 8004136:	d058      	beq.n	80041ea <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004138:	2101      	movs	r1, #1
 800413a:	68f8      	ldr	r0, [r7, #12]
 800413c:	f000 fef4 	bl	8004f28 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8004140:	2110      	movs	r1, #16
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f000 fe6c 	bl	8004e20 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b22      	cmp	r3, #34	@ 0x22
 8004152:	d101      	bne.n	8004158 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 8004154:	4b31      	ldr	r3, [pc, #196]	@ (800421c <I2C_Mem_ISR_DMA+0x248>)
 8004156:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800415c:	b29b      	uxth	r3, r3
 800415e:	2bff      	cmp	r3, #255	@ 0xff
 8004160:	d910      	bls.n	8004184 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	22ff      	movs	r2, #255	@ 0xff
 8004166:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800416c:	b299      	uxth	r1, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004172:	b2da      	uxtb	r2, r3
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800417c:	68f8      	ldr	r0, [r7, #12]
 800417e:	f000 fe1d 	bl	8004dbc <I2C_TransferConfig>
 8004182:	e011      	b.n	80041a8 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004188:	b29a      	uxth	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004192:	b299      	uxth	r1, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004198:	b2da      	uxtb	r2, r3
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f000 fe0a 	bl	8004dbc <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041b2:	1ad3      	subs	r3, r2, r3
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	2b22      	cmp	r3, #34	@ 0x22
 80041c4:	d108      	bne.n	80041d8 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80041d4:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80041d6:	e016      	b.n	8004206 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80041e6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80041e8:	e00d      	b.n	8004206 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	f003 0320 	and.w	r3, r3, #32
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d008      	beq.n	8004206 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80041fe:	68b9      	ldr	r1, [r7, #8]
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 fa01 	bl	8004608 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3718      	adds	r7, #24
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	80002000 	.word	0x80002000
 800421c:	80002400 	.word	0x80002400

08004220 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b088      	sub	sp, #32
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004230:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8004232:	2300      	movs	r3, #0
 8004234:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800423c:	2b01      	cmp	r3, #1
 800423e:	d101      	bne.n	8004244 <I2C_Slave_ISR_DMA+0x24>
 8004240:	2302      	movs	r3, #2
 8004242:	e0c0      	b.n	80043c6 <I2C_Slave_ISR_DMA+0x1a6>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2201      	movs	r2, #1
 8004248:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	f003 0320 	and.w	r3, r3, #32
 8004252:	2b00      	cmp	r3, #0
 8004254:	d009      	beq.n	800426a <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800425c:	2b00      	cmp	r3, #0
 800425e:	d004      	beq.n	800426a <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8004260:	68b9      	ldr	r1, [r7, #8]
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f000 fa98 	bl	8004798 <I2C_ITSlaveCplt>
 8004268:	e0a8      	b.n	80043bc <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	f003 0310 	and.w	r3, r3, #16
 8004270:	2b00      	cmp	r3, #0
 8004272:	f000 8095 	beq.w	80043a0 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800427c:	2b00      	cmp	r3, #0
 800427e:	f000 808f 	beq.w	80043a0 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004288:	2b00      	cmp	r3, #0
 800428a:	d104      	bne.n	8004296 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8004292:	2b00      	cmp	r3, #0
 8004294:	d07d      	beq.n	8004392 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800429a:	2b00      	cmp	r3, #0
 800429c:	d00c      	beq.n	80042b8 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d007      	beq.n	80042b8 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 80042b4:	2301      	movs	r3, #1
 80042b6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00c      	beq.n	80042da <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d007      	beq.n	80042da <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 80042d6:	2301      	movs	r3, #1
 80042d8:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d128      	bne.n	8004332 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b28      	cmp	r3, #40	@ 0x28
 80042ea:	d108      	bne.n	80042fe <I2C_Slave_ISR_DMA+0xde>
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80042f2:	d104      	bne.n	80042fe <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 80042f4:	68b9      	ldr	r1, [r7, #8]
 80042f6:	68f8      	ldr	r0, [r7, #12]
 80042f8:	f000 fbb2 	bl	8004a60 <I2C_ITListenCplt>
 80042fc:	e048      	b.n	8004390 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b29      	cmp	r3, #41	@ 0x29
 8004308:	d10e      	bne.n	8004328 <I2C_Slave_ISR_DMA+0x108>
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004310:	d00a      	beq.n	8004328 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2210      	movs	r2, #16
 8004318:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 fd0b 	bl	8004d36 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f000 f915 	bl	8004550 <I2C_ITSlaveSeqCplt>
 8004326:	e033      	b.n	8004390 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2210      	movs	r2, #16
 800432e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8004330:	e034      	b.n	800439c <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2210      	movs	r2, #16
 8004338:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800433e:	f043 0204 	orr.w	r2, r3, #4
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800434c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d003      	beq.n	800435c <I2C_Slave_ISR_DMA+0x13c>
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800435a:	d11f      	bne.n	800439c <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800435c:	7dfb      	ldrb	r3, [r7, #23]
 800435e:	2b21      	cmp	r3, #33	@ 0x21
 8004360:	d002      	beq.n	8004368 <I2C_Slave_ISR_DMA+0x148>
 8004362:	7dfb      	ldrb	r3, [r7, #23]
 8004364:	2b29      	cmp	r3, #41	@ 0x29
 8004366:	d103      	bne.n	8004370 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2221      	movs	r2, #33	@ 0x21
 800436c:	631a      	str	r2, [r3, #48]	@ 0x30
 800436e:	e008      	b.n	8004382 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004370:	7dfb      	ldrb	r3, [r7, #23]
 8004372:	2b22      	cmp	r3, #34	@ 0x22
 8004374:	d002      	beq.n	800437c <I2C_Slave_ISR_DMA+0x15c>
 8004376:	7dfb      	ldrb	r3, [r7, #23]
 8004378:	2b2a      	cmp	r3, #42	@ 0x2a
 800437a:	d102      	bne.n	8004382 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2222      	movs	r2, #34	@ 0x22
 8004380:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004386:	4619      	mov	r1, r3
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f000 fbbd 	bl	8004b08 <I2C_ITError>
      if (treatdmanack == 1U)
 800438e:	e005      	b.n	800439c <I2C_Slave_ISR_DMA+0x17c>
 8004390:	e004      	b.n	800439c <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2210      	movs	r2, #16
 8004398:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800439a:	e00f      	b.n	80043bc <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 800439c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800439e:	e00d      	b.n	80043bc <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	f003 0308 	and.w	r3, r3, #8
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d008      	beq.n	80043bc <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d003      	beq.n	80043bc <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80043b4:	68b9      	ldr	r1, [r7, #8]
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 f809 	bl	80043ce <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3720      	adds	r7, #32
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b084      	sub	sp, #16
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
 80043d6:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80043e4:	2b28      	cmp	r3, #40	@ 0x28
 80043e6:	d16a      	bne.n	80044be <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	0c1b      	lsrs	r3, r3, #16
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	0c1b      	lsrs	r3, r3, #16
 8004400:	b29b      	uxth	r3, r3
 8004402:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004406:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	b29b      	uxth	r3, r3
 8004410:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004414:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	b29b      	uxth	r3, r3
 800441e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8004422:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	2b02      	cmp	r3, #2
 800442a:	d138      	bne.n	800449e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800442c:	897b      	ldrh	r3, [r7, #10]
 800442e:	09db      	lsrs	r3, r3, #7
 8004430:	b29a      	uxth	r2, r3
 8004432:	89bb      	ldrh	r3, [r7, #12]
 8004434:	4053      	eors	r3, r2
 8004436:	b29b      	uxth	r3, r3
 8004438:	f003 0306 	and.w	r3, r3, #6
 800443c:	2b00      	cmp	r3, #0
 800443e:	d11c      	bne.n	800447a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8004440:	897b      	ldrh	r3, [r7, #10]
 8004442:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004452:	2b02      	cmp	r3, #2
 8004454:	d13b      	bne.n	80044ce <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2208      	movs	r2, #8
 8004462:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800446c:	89ba      	ldrh	r2, [r7, #12]
 800446e:	7bfb      	ldrb	r3, [r7, #15]
 8004470:	4619      	mov	r1, r3
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7ff fa63 	bl	800393e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004478:	e029      	b.n	80044ce <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800447a:	893b      	ldrh	r3, [r7, #8]
 800447c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800447e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 fd50 	bl	8004f28 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004490:	89ba      	ldrh	r2, [r7, #12]
 8004492:	7bfb      	ldrb	r3, [r7, #15]
 8004494:	4619      	mov	r1, r3
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f7ff fa51 	bl	800393e <HAL_I2C_AddrCallback>
}
 800449c:	e017      	b.n	80044ce <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800449e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 fd40 	bl	8004f28 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80044b0:	89ba      	ldrh	r2, [r7, #12]
 80044b2:	7bfb      	ldrb	r3, [r7, #15]
 80044b4:	4619      	mov	r1, r3
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f7ff fa41 	bl	800393e <HAL_I2C_AddrCallback>
}
 80044bc:	e007      	b.n	80044ce <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2208      	movs	r2, #8
 80044c4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80044ce:	bf00      	nop
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b082      	sub	sp, #8
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b21      	cmp	r3, #33	@ 0x21
 80044f0:	d115      	bne.n	800451e <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2220      	movs	r2, #32
 80044f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2211      	movs	r2, #17
 80044fe:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004506:	2101      	movs	r1, #1
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 fd0d 	bl	8004f28 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f7ff f9e9 	bl	80038ee <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800451c:	e014      	b.n	8004548 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2220      	movs	r2, #32
 8004522:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2212      	movs	r2, #18
 800452a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004532:	2102      	movs	r1, #2
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 fcf7 	bl	8004f28 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7ff f9dd 	bl	8003902 <HAL_I2C_MasterRxCpltCallback>
}
 8004548:	bf00      	nop
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d008      	beq.n	8004584 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004580:	601a      	str	r2, [r3, #0]
 8004582:	e00c      	b.n	800459e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d007      	beq.n	800459e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800459c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b29      	cmp	r3, #41	@ 0x29
 80045a8:	d112      	bne.n	80045d0 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2228      	movs	r2, #40	@ 0x28
 80045ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2221      	movs	r2, #33	@ 0x21
 80045b6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80045b8:	2101      	movs	r1, #1
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 fcb4 	bl	8004f28 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f7ff f9a4 	bl	8003916 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80045ce:	e017      	b.n	8004600 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80045da:	d111      	bne.n	8004600 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2228      	movs	r2, #40	@ 0x28
 80045e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2222      	movs	r2, #34	@ 0x22
 80045e8:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80045ea:	2102      	movs	r1, #2
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 fc9b 	bl	8004f28 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f7ff f995 	bl	800392a <HAL_I2C_SlaveRxCpltCallback>
}
 8004600:	bf00      	nop
 8004602:	3710      	adds	r7, #16
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2220      	movs	r2, #32
 800461c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b21      	cmp	r3, #33	@ 0x21
 8004628:	d107      	bne.n	800463a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800462a:	2101      	movs	r1, #1
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f000 fc7b 	bl	8004f28 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2211      	movs	r2, #17
 8004636:	631a      	str	r2, [r3, #48]	@ 0x30
 8004638:	e00c      	b.n	8004654 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b22      	cmp	r3, #34	@ 0x22
 8004644:	d106      	bne.n	8004654 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004646:	2102      	movs	r1, #2
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	f000 fc6d 	bl	8004f28 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2212      	movs	r2, #18
 8004652:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6859      	ldr	r1, [r3, #4]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681a      	ldr	r2, [r3, #0]
 800465e:	4b4c      	ldr	r3, [pc, #304]	@ (8004790 <I2C_ITMasterCplt+0x188>)
 8004660:	400b      	ands	r3, r1
 8004662:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a49      	ldr	r2, [pc, #292]	@ (8004794 <I2C_ITMasterCplt+0x18c>)
 800466e:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	f003 0310 	and.w	r3, r3, #16
 8004676:	2b00      	cmp	r3, #0
 8004678:	d009      	beq.n	800468e <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2210      	movs	r2, #16
 8004680:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004686:	f043 0204 	orr.w	r2, r3, #4
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b60      	cmp	r3, #96	@ 0x60
 8004698:	d10a      	bne.n	80046b0 <I2C_ITMasterCplt+0xa8>
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f003 0304 	and.w	r3, r3, #4
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d005      	beq.n	80046b0 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80046ae:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 fb40 	bl	8004d36 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046ba:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	2b60      	cmp	r3, #96	@ 0x60
 80046c6:	d002      	beq.n	80046ce <I2C_ITMasterCplt+0xc6>
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d006      	beq.n	80046dc <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046d2:	4619      	mov	r1, r3
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 fa17 	bl	8004b08 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80046da:	e054      	b.n	8004786 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b21      	cmp	r3, #33	@ 0x21
 80046e6:	d124      	bne.n	8004732 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2220      	movs	r2, #32
 80046ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b40      	cmp	r3, #64	@ 0x40
 8004700:	d10b      	bne.n	800471a <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2200      	movs	r2, #0
 800470e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004712:	6878      	ldr	r0, [r7, #4]
 8004714:	f7ff f92b 	bl	800396e <HAL_I2C_MemTxCpltCallback>
}
 8004718:	e035      	b.n	8004786 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f7ff f8df 	bl	80038ee <HAL_I2C_MasterTxCpltCallback>
}
 8004730:	e029      	b.n	8004786 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004738:	b2db      	uxtb	r3, r3
 800473a:	2b22      	cmp	r3, #34	@ 0x22
 800473c:	d123      	bne.n	8004786 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2220      	movs	r2, #32
 8004742:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2b40      	cmp	r3, #64	@ 0x40
 8004756:	d10b      	bne.n	8004770 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f7ff f90a 	bl	8003982 <HAL_I2C_MemRxCpltCallback>
}
 800476e:	e00a      	b.n	8004786 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f7ff f8be 	bl	8003902 <HAL_I2C_MasterRxCpltCallback>
}
 8004786:	bf00      	nop
 8004788:	3718      	adds	r7, #24
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	fe00e800 	.word	0xfe00e800
 8004794:	ffff0000 	.word	0xffff0000

08004798 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047b2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047ba:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2220      	movs	r2, #32
 80047c2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80047c4:	7afb      	ldrb	r3, [r7, #11]
 80047c6:	2b21      	cmp	r3, #33	@ 0x21
 80047c8:	d002      	beq.n	80047d0 <I2C_ITSlaveCplt+0x38>
 80047ca:	7afb      	ldrb	r3, [r7, #11]
 80047cc:	2b29      	cmp	r3, #41	@ 0x29
 80047ce:	d108      	bne.n	80047e2 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80047d0:	f248 0101 	movw	r1, #32769	@ 0x8001
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 fba7 	bl	8004f28 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2221      	movs	r2, #33	@ 0x21
 80047de:	631a      	str	r2, [r3, #48]	@ 0x30
 80047e0:	e019      	b.n	8004816 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80047e2:	7afb      	ldrb	r3, [r7, #11]
 80047e4:	2b22      	cmp	r3, #34	@ 0x22
 80047e6:	d002      	beq.n	80047ee <I2C_ITSlaveCplt+0x56>
 80047e8:	7afb      	ldrb	r3, [r7, #11]
 80047ea:	2b2a      	cmp	r3, #42	@ 0x2a
 80047ec:	d108      	bne.n	8004800 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80047ee:	f248 0102 	movw	r1, #32770	@ 0x8002
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 fb98 	bl	8004f28 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2222      	movs	r2, #34	@ 0x22
 80047fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80047fe:	e00a      	b.n	8004816 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004800:	7afb      	ldrb	r3, [r7, #11]
 8004802:	2b28      	cmp	r3, #40	@ 0x28
 8004804:	d107      	bne.n	8004816 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8004806:	f248 0103 	movw	r1, #32771	@ 0x8003
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 fb8c 	bl	8004f28 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685a      	ldr	r2, [r3, #4]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004824:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	6859      	ldr	r1, [r3, #4]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	4b89      	ldr	r3, [pc, #548]	@ (8004a58 <I2C_ITSlaveCplt+0x2c0>)
 8004832:	400b      	ands	r3, r1
 8004834:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f000 fa7d 	bl	8004d36 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d013      	beq.n	800486e <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004854:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485a:	2b00      	cmp	r3, #0
 800485c:	d01f      	beq.n	800489e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	b29a      	uxth	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800486c:	e017      	b.n	800489e <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d012      	beq.n	800489e <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004886:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800488c:	2b00      	cmp	r3, #0
 800488e:	d006      	beq.n	800489e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	b29a      	uxth	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	f003 0304 	and.w	r3, r3, #4
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d020      	beq.n	80048ea <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	f023 0304 	bic.w	r3, r3, #4
 80048ae:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ba:	b2d2      	uxtb	r2, r2
 80048bc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048c2:	1c5a      	adds	r2, r3, #1
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00c      	beq.n	80048ea <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048d4:	3b01      	subs	r3, #1
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	3b01      	subs	r3, #1
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d005      	beq.n	8004900 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048f8:	f043 0204 	orr.w	r2, r3, #4
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	f003 0310 	and.w	r3, r3, #16
 8004906:	2b00      	cmp	r3, #0
 8004908:	d049      	beq.n	800499e <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004910:	2b00      	cmp	r3, #0
 8004912:	d044      	beq.n	800499e <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004918:	b29b      	uxth	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d128      	bne.n	8004970 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004924:	b2db      	uxtb	r3, r3
 8004926:	2b28      	cmp	r3, #40	@ 0x28
 8004928:	d108      	bne.n	800493c <I2C_ITSlaveCplt+0x1a4>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004930:	d104      	bne.n	800493c <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004932:	6979      	ldr	r1, [r7, #20]
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 f893 	bl	8004a60 <I2C_ITListenCplt>
 800493a:	e030      	b.n	800499e <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b29      	cmp	r3, #41	@ 0x29
 8004946:	d10e      	bne.n	8004966 <I2C_ITSlaveCplt+0x1ce>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800494e:	d00a      	beq.n	8004966 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2210      	movs	r2, #16
 8004956:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 f9ec 	bl	8004d36 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7ff fdf6 	bl	8004550 <I2C_ITSlaveSeqCplt>
 8004964:	e01b      	b.n	800499e <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2210      	movs	r2, #16
 800496c:	61da      	str	r2, [r3, #28]
 800496e:	e016      	b.n	800499e <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2210      	movs	r2, #16
 8004976:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800497c:	f043 0204 	orr.w	r2, r3, #4
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <I2C_ITSlaveCplt+0x1fa>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004990:	d105      	bne.n	800499e <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004996:	4619      	mov	r1, r3
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 f8b5 	bl	8004b08 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d010      	beq.n	80049d6 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b8:	4619      	mov	r1, r3
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f8a4 	bl	8004b08 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b28      	cmp	r3, #40	@ 0x28
 80049ca:	d141      	bne.n	8004a50 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80049cc:	6979      	ldr	r1, [r7, #20]
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f846 	bl	8004a60 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80049d4:	e03c      	b.n	8004a50 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049da:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80049de:	d014      	beq.n	8004a0a <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f7ff fdb5 	bl	8004550 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a1c      	ldr	r2, [pc, #112]	@ (8004a5c <I2C_ITSlaveCplt+0x2c4>)
 80049ea:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2220      	movs	r2, #32
 80049f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7fe ffa9 	bl	800395a <HAL_I2C_ListenCpltCallback>
}
 8004a08:	e022      	b.n	8004a50 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	2b22      	cmp	r3, #34	@ 0x22
 8004a14:	d10e      	bne.n	8004a34 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f7fe ff7c 	bl	800392a <HAL_I2C_SlaveRxCpltCallback>
}
 8004a32:	e00d      	b.n	8004a50 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2220      	movs	r2, #32
 8004a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7fe ff63 	bl	8003916 <HAL_I2C_SlaveTxCpltCallback>
}
 8004a50:	bf00      	nop
 8004a52:	3718      	adds	r7, #24
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}
 8004a58:	fe00e800 	.word	0xfe00e800
 8004a5c:	ffff0000 	.word	0xffff0000

08004a60 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	4a25      	ldr	r2, [pc, #148]	@ (8004b04 <I2C_ITListenCplt+0xa4>)
 8004a6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2220      	movs	r2, #32
 8004a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	f003 0304 	and.w	r3, r3, #4
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d022      	beq.n	8004adc <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa0:	b2d2      	uxtb	r2, r2
 8004aa2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa8:	1c5a      	adds	r2, r3, #1
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d012      	beq.n	8004adc <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aba:	3b01      	subs	r3, #1
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ad4:	f043 0204 	orr.w	r2, r3, #4
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004adc:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 fa21 	bl	8004f28 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2210      	movs	r2, #16
 8004aec:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7fe ff2f 	bl	800395a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004afc:	bf00      	nop
 8004afe:	3708      	adds	r7, #8
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	ffff0000 	.word	0xffff0000

08004b08 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b084      	sub	sp, #16
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b18:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a6d      	ldr	r2, [pc, #436]	@ (8004cdc <I2C_ITError+0x1d4>)
 8004b26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	431a      	orrs	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004b3a:	7bfb      	ldrb	r3, [r7, #15]
 8004b3c:	2b28      	cmp	r3, #40	@ 0x28
 8004b3e:	d005      	beq.n	8004b4c <I2C_ITError+0x44>
 8004b40:	7bfb      	ldrb	r3, [r7, #15]
 8004b42:	2b29      	cmp	r3, #41	@ 0x29
 8004b44:	d002      	beq.n	8004b4c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004b46:	7bfb      	ldrb	r3, [r7, #15]
 8004b48:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b4a:	d10b      	bne.n	8004b64 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004b4c:	2103      	movs	r1, #3
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f9ea 	bl	8004f28 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2228      	movs	r2, #40	@ 0x28
 8004b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	4a60      	ldr	r2, [pc, #384]	@ (8004ce0 <I2C_ITError+0x1d8>)
 8004b60:	635a      	str	r2, [r3, #52]	@ 0x34
 8004b62:	e030      	b.n	8004bc6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004b64:	f248 0103 	movw	r1, #32771	@ 0x8003
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	f000 f9dd 	bl	8004f28 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f8e1 	bl	8004d36 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b60      	cmp	r3, #96	@ 0x60
 8004b7e:	d01f      	beq.n	8004bc0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2220      	movs	r2, #32
 8004b84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	f003 0320 	and.w	r3, r3, #32
 8004b92:	2b20      	cmp	r3, #32
 8004b94:	d114      	bne.n	8004bc0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	699b      	ldr	r3, [r3, #24]
 8004b9c:	f003 0310 	and.w	r3, r3, #16
 8004ba0:	2b10      	cmp	r3, #16
 8004ba2:	d109      	bne.n	8004bb8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2210      	movs	r2, #16
 8004baa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bb0:	f043 0204 	orr.w	r2, r3, #4
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bca:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d039      	beq.n	8004c48 <I2C_ITError+0x140>
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	2b11      	cmp	r3, #17
 8004bd8:	d002      	beq.n	8004be0 <I2C_ITError+0xd8>
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2b21      	cmp	r3, #33	@ 0x21
 8004bde:	d133      	bne.n	8004c48 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004bea:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004bee:	d107      	bne.n	8004c00 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004bfe:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7fe f9f1 	bl	8002fec <HAL_DMA_GetState>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d017      	beq.n	8004c40 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c14:	4a33      	ldr	r2, [pc, #204]	@ (8004ce4 <I2C_ITError+0x1dc>)
 8004c16:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c24:	4618      	mov	r0, r3
 8004c26:	f7fe f8cb 	bl	8002dc0 <HAL_DMA_Abort_IT>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d04d      	beq.n	8004ccc <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004c3a:	4610      	mov	r0, r2
 8004c3c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004c3e:	e045      	b.n	8004ccc <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f000 f851 	bl	8004ce8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004c46:	e041      	b.n	8004ccc <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d039      	beq.n	8004cc4 <I2C_ITError+0x1bc>
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	2b12      	cmp	r3, #18
 8004c54:	d002      	beq.n	8004c5c <I2C_ITError+0x154>
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2b22      	cmp	r3, #34	@ 0x22
 8004c5a:	d133      	bne.n	8004cc4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c6a:	d107      	bne.n	8004c7c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004c7a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7fe f9b3 	bl	8002fec <HAL_DMA_GetState>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d017      	beq.n	8004cbc <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c90:	4a14      	ldr	r2, [pc, #80]	@ (8004ce4 <I2C_ITError+0x1dc>)
 8004c92:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7fe f88d 	bl	8002dc0 <HAL_DMA_Abort_IT>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d011      	beq.n	8004cd0 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004cb6:	4610      	mov	r0, r2
 8004cb8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004cba:	e009      	b.n	8004cd0 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 f813 	bl	8004ce8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004cc2:	e005      	b.n	8004cd0 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 f80f 	bl	8004ce8 <I2C_TreatErrorCallback>
  }
}
 8004cca:	e002      	b.n	8004cd2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ccc:	bf00      	nop
 8004cce:	e000      	b.n	8004cd2 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004cd0:	bf00      	nop
}
 8004cd2:	bf00      	nop
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	ffff0000 	.word	0xffff0000
 8004ce0:	08003c0d 	.word	0x08003c0d
 8004ce4:	08004d7f 	.word	0x08004d7f

08004ce8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	2b60      	cmp	r3, #96	@ 0x60
 8004cfa:	d10e      	bne.n	8004d1a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f7fe fe49 	bl	80039aa <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004d18:	e009      	b.n	8004d2e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f7fe fe34 	bl	8003996 <HAL_I2C_ErrorCallback>
}
 8004d2e:	bf00      	nop
 8004d30:	3708      	adds	r7, #8
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004d36:	b480      	push	{r7}
 8004d38:	b083      	sub	sp, #12
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d103      	bne.n	8004d54 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2200      	movs	r2, #0
 8004d52:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d007      	beq.n	8004d72 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	699a      	ldr	r2, [r3, #24]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f042 0201 	orr.w	r2, r2, #1
 8004d70:	619a      	str	r2, [r3, #24]
  }
}
 8004d72:	bf00      	nop
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr

08004d7e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b084      	sub	sp, #16
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d003      	beq.n	8004d9c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d98:	2200      	movs	r2, #0
 8004d9a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d003      	beq.n	8004dac <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004da8:	2200      	movs	r2, #0
 8004daa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f7ff ff9b 	bl	8004ce8 <I2C_TreatErrorCallback>
}
 8004db2:	bf00      	nop
 8004db4:	3710      	adds	r7, #16
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
	...

08004dbc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b087      	sub	sp, #28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	607b      	str	r3, [r7, #4]
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	817b      	strh	r3, [r7, #10]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004dce:	897b      	ldrh	r3, [r7, #10]
 8004dd0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004dd4:	7a7b      	ldrb	r3, [r7, #9]
 8004dd6:	041b      	lsls	r3, r3, #16
 8004dd8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004ddc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004de2:	6a3b      	ldr	r3, [r7, #32]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004dea:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	6a3b      	ldr	r3, [r7, #32]
 8004df4:	0d5b      	lsrs	r3, r3, #21
 8004df6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004dfa:	4b08      	ldr	r3, [pc, #32]	@ (8004e1c <I2C_TransferConfig+0x60>)
 8004dfc:	430b      	orrs	r3, r1
 8004dfe:	43db      	mvns	r3, r3
 8004e00:	ea02 0103 	and.w	r1, r2, r3
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	697a      	ldr	r2, [r7, #20]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004e0e:	bf00      	nop
 8004e10:	371c      	adds	r7, #28
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	03ff63ff 	.word	0x03ff63ff

08004e20 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b085      	sub	sp, #20
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
 8004e28:	460b      	mov	r3, r1
 8004e2a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e34:	4a39      	ldr	r2, [pc, #228]	@ (8004f1c <I2C_Enable_IRQ+0xfc>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d032      	beq.n	8004ea0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8004e3e:	4a38      	ldr	r2, [pc, #224]	@ (8004f20 <I2C_Enable_IRQ+0x100>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d02d      	beq.n	8004ea0 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8004e48:	4a36      	ldr	r2, [pc, #216]	@ (8004f24 <I2C_Enable_IRQ+0x104>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d028      	beq.n	8004ea0 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004e4e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	da03      	bge.n	8004e5e <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004e5c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004e5e:	887b      	ldrh	r3, [r7, #2]
 8004e60:	f003 0301 	and.w	r3, r3, #1
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d003      	beq.n	8004e70 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8004e6e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004e70:	887b      	ldrh	r3, [r7, #2]
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d003      	beq.n	8004e82 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8004e80:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004e82:	887b      	ldrh	r3, [r7, #2]
 8004e84:	2b10      	cmp	r3, #16
 8004e86:	d103      	bne.n	8004e90 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004e8e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004e90:	887b      	ldrh	r3, [r7, #2]
 8004e92:	2b20      	cmp	r3, #32
 8004e94:	d133      	bne.n	8004efe <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	f043 0320 	orr.w	r3, r3, #32
 8004e9c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004e9e:	e02e      	b.n	8004efe <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004ea0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	da03      	bge.n	8004eb0 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004eae:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004eb0:	887b      	ldrh	r3, [r7, #2]
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d003      	beq.n	8004ec2 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8004ec0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004ec2:	887b      	ldrh	r3, [r7, #2]
 8004ec4:	f003 0302 	and.w	r3, r3, #2
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d003      	beq.n	8004ed4 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8004ed2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004ed4:	887b      	ldrh	r3, [r7, #2]
 8004ed6:	2b10      	cmp	r3, #16
 8004ed8:	d103      	bne.n	8004ee2 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004ee0:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004ee2:	887b      	ldrh	r3, [r7, #2]
 8004ee4:	2b20      	cmp	r3, #32
 8004ee6:	d103      	bne.n	8004ef0 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004eee:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004ef0:	887b      	ldrh	r3, [r7, #2]
 8004ef2:	2b40      	cmp	r3, #64	@ 0x40
 8004ef4:	d103      	bne.n	8004efe <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004efc:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	6819      	ldr	r1, [r3, #0]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68fa      	ldr	r2, [r7, #12]
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	601a      	str	r2, [r3, #0]
}
 8004f0e:	bf00      	nop
 8004f10:	3714      	adds	r7, #20
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	08003dff 	.word	0x08003dff
 8004f20:	08004221 	.word	0x08004221
 8004f24:	08003fd5 	.word	0x08003fd5

08004f28 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	460b      	mov	r3, r1
 8004f32:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004f34:	2300      	movs	r3, #0
 8004f36:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004f38:	887b      	ldrh	r3, [r7, #2]
 8004f3a:	f003 0301 	and.w	r3, r3, #1
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d00f      	beq.n	8004f62 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8004f48:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004f56:	2b28      	cmp	r3, #40	@ 0x28
 8004f58:	d003      	beq.n	8004f62 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004f60:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004f62:	887b      	ldrh	r3, [r7, #2]
 8004f64:	f003 0302 	and.w	r3, r3, #2
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d00f      	beq.n	8004f8c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8004f72:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004f80:	2b28      	cmp	r3, #40	@ 0x28
 8004f82:	d003      	beq.n	8004f8c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8004f8a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004f8c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	da03      	bge.n	8004f9c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8004f9a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004f9c:	887b      	ldrh	r3, [r7, #2]
 8004f9e:	2b10      	cmp	r3, #16
 8004fa0:	d103      	bne.n	8004faa <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004fa8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004faa:	887b      	ldrh	r3, [r7, #2]
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	d103      	bne.n	8004fb8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f043 0320 	orr.w	r3, r3, #32
 8004fb6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004fb8:	887b      	ldrh	r3, [r7, #2]
 8004fba:	2b40      	cmp	r3, #64	@ 0x40
 8004fbc:	d103      	bne.n	8004fc6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004fc4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6819      	ldr	r1, [r3, #0]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	43da      	mvns	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	400a      	ands	r2, r1
 8004fd6:	601a      	str	r2, [r3, #0]
}
 8004fd8:	bf00      	nop
 8004fda:	3714      	adds	r7, #20
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe2:	4770      	bx	lr

08004fe4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b083      	sub	sp, #12
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b20      	cmp	r3, #32
 8004ff8:	d138      	bne.n	800506c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005000:	2b01      	cmp	r3, #1
 8005002:	d101      	bne.n	8005008 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005004:	2302      	movs	r3, #2
 8005006:	e032      	b.n	800506e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2224      	movs	r2, #36	@ 0x24
 8005014:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f022 0201 	bic.w	r2, r2, #1
 8005026:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8005036:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	6819      	ldr	r1, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	430a      	orrs	r2, r1
 8005046:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f042 0201 	orr.w	r2, r2, #1
 8005056:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2220      	movs	r2, #32
 800505c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005068:	2300      	movs	r3, #0
 800506a:	e000      	b.n	800506e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800506c:	2302      	movs	r3, #2
  }
}
 800506e:	4618      	mov	r0, r3
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr

0800507a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800507a:	b480      	push	{r7}
 800507c:	b085      	sub	sp, #20
 800507e:	af00      	add	r7, sp, #0
 8005080:	6078      	str	r0, [r7, #4]
 8005082:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800508a:	b2db      	uxtb	r3, r3
 800508c:	2b20      	cmp	r3, #32
 800508e:	d139      	bne.n	8005104 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005096:	2b01      	cmp	r3, #1
 8005098:	d101      	bne.n	800509e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800509a:	2302      	movs	r3, #2
 800509c:	e033      	b.n	8005106 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2224      	movs	r2, #36	@ 0x24
 80050aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f022 0201 	bic.w	r2, r2, #1
 80050bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80050cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	021b      	lsls	r3, r3, #8
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f042 0201 	orr.w	r2, r2, #1
 80050ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2220      	movs	r2, #32
 80050f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005100:	2300      	movs	r3, #0
 8005102:	e000      	b.n	8005106 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005104:	2302      	movs	r3, #2
  }
}
 8005106:	4618      	mov	r0, r3
 8005108:	3714      	adds	r7, #20
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
	...

08005114 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d141      	bne.n	80051a6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005122:	4b4b      	ldr	r3, [pc, #300]	@ (8005250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800512a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800512e:	d131      	bne.n	8005194 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005130:	4b47      	ldr	r3, [pc, #284]	@ (8005250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005132:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005136:	4a46      	ldr	r2, [pc, #280]	@ (8005250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005138:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800513c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005140:	4b43      	ldr	r3, [pc, #268]	@ (8005250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005148:	4a41      	ldr	r2, [pc, #260]	@ (8005250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800514a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800514e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005150:	4b40      	ldr	r3, [pc, #256]	@ (8005254 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2232      	movs	r2, #50	@ 0x32
 8005156:	fb02 f303 	mul.w	r3, r2, r3
 800515a:	4a3f      	ldr	r2, [pc, #252]	@ (8005258 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800515c:	fba2 2303 	umull	r2, r3, r2, r3
 8005160:	0c9b      	lsrs	r3, r3, #18
 8005162:	3301      	adds	r3, #1
 8005164:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005166:	e002      	b.n	800516e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	3b01      	subs	r3, #1
 800516c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800516e:	4b38      	ldr	r3, [pc, #224]	@ (8005250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005176:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800517a:	d102      	bne.n	8005182 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1f2      	bne.n	8005168 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005182:	4b33      	ldr	r3, [pc, #204]	@ (8005250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800518a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800518e:	d158      	bne.n	8005242 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005190:	2303      	movs	r3, #3
 8005192:	e057      	b.n	8005244 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005194:	4b2e      	ldr	r3, [pc, #184]	@ (8005250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005196:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800519a:	4a2d      	ldr	r2, [pc, #180]	@ (8005250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800519c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80051a4:	e04d      	b.n	8005242 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051ac:	d141      	bne.n	8005232 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80051ae:	4b28      	ldr	r3, [pc, #160]	@ (8005250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80051b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051ba:	d131      	bne.n	8005220 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051bc:	4b24      	ldr	r3, [pc, #144]	@ (8005250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051c2:	4a23      	ldr	r2, [pc, #140]	@ (8005250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051c8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80051cc:	4b20      	ldr	r3, [pc, #128]	@ (8005250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80051d4:	4a1e      	ldr	r2, [pc, #120]	@ (8005250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051d6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80051da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80051dc:	4b1d      	ldr	r3, [pc, #116]	@ (8005254 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2232      	movs	r2, #50	@ 0x32
 80051e2:	fb02 f303 	mul.w	r3, r2, r3
 80051e6:	4a1c      	ldr	r2, [pc, #112]	@ (8005258 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80051e8:	fba2 2303 	umull	r2, r3, r2, r3
 80051ec:	0c9b      	lsrs	r3, r3, #18
 80051ee:	3301      	adds	r3, #1
 80051f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051f2:	e002      	b.n	80051fa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	3b01      	subs	r3, #1
 80051f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051fa:	4b15      	ldr	r3, [pc, #84]	@ (8005250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005202:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005206:	d102      	bne.n	800520e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d1f2      	bne.n	80051f4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800520e:	4b10      	ldr	r3, [pc, #64]	@ (8005250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005216:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800521a:	d112      	bne.n	8005242 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e011      	b.n	8005244 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005220:	4b0b      	ldr	r3, [pc, #44]	@ (8005250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005222:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005226:	4a0a      	ldr	r2, [pc, #40]	@ (8005250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005228:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800522c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005230:	e007      	b.n	8005242 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005232:	4b07      	ldr	r3, [pc, #28]	@ (8005250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800523a:	4a05      	ldr	r2, [pc, #20]	@ (8005250 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800523c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005240:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005242:	2300      	movs	r3, #0
}
 8005244:	4618      	mov	r0, r3
 8005246:	3714      	adds	r7, #20
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr
 8005250:	40007000 	.word	0x40007000
 8005254:	20000008 	.word	0x20000008
 8005258:	431bde83 	.word	0x431bde83

0800525c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800525c:	b480      	push	{r7}
 800525e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005260:	4b05      	ldr	r3, [pc, #20]	@ (8005278 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	4a04      	ldr	r2, [pc, #16]	@ (8005278 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005266:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800526a:	6093      	str	r3, [r2, #8]
}
 800526c:	bf00      	nop
 800526e:	46bd      	mov	sp, r7
 8005270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005274:	4770      	bx	lr
 8005276:	bf00      	nop
 8005278:	40007000 	.word	0x40007000

0800527c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b088      	sub	sp, #32
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e2fe      	b.n	800588c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	2b00      	cmp	r3, #0
 8005298:	d075      	beq.n	8005386 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800529a:	4b97      	ldr	r3, [pc, #604]	@ (80054f8 <HAL_RCC_OscConfig+0x27c>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f003 030c 	and.w	r3, r3, #12
 80052a2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052a4:	4b94      	ldr	r3, [pc, #592]	@ (80054f8 <HAL_RCC_OscConfig+0x27c>)
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	f003 0303 	and.w	r3, r3, #3
 80052ac:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80052ae:	69bb      	ldr	r3, [r7, #24]
 80052b0:	2b0c      	cmp	r3, #12
 80052b2:	d102      	bne.n	80052ba <HAL_RCC_OscConfig+0x3e>
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	2b03      	cmp	r3, #3
 80052b8:	d002      	beq.n	80052c0 <HAL_RCC_OscConfig+0x44>
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	2b08      	cmp	r3, #8
 80052be:	d10b      	bne.n	80052d8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052c0:	4b8d      	ldr	r3, [pc, #564]	@ (80054f8 <HAL_RCC_OscConfig+0x27c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d05b      	beq.n	8005384 <HAL_RCC_OscConfig+0x108>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d157      	bne.n	8005384 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e2d9      	b.n	800588c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052e0:	d106      	bne.n	80052f0 <HAL_RCC_OscConfig+0x74>
 80052e2:	4b85      	ldr	r3, [pc, #532]	@ (80054f8 <HAL_RCC_OscConfig+0x27c>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a84      	ldr	r2, [pc, #528]	@ (80054f8 <HAL_RCC_OscConfig+0x27c>)
 80052e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052ec:	6013      	str	r3, [r2, #0]
 80052ee:	e01d      	b.n	800532c <HAL_RCC_OscConfig+0xb0>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052f8:	d10c      	bne.n	8005314 <HAL_RCC_OscConfig+0x98>
 80052fa:	4b7f      	ldr	r3, [pc, #508]	@ (80054f8 <HAL_RCC_OscConfig+0x27c>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a7e      	ldr	r2, [pc, #504]	@ (80054f8 <HAL_RCC_OscConfig+0x27c>)
 8005300:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005304:	6013      	str	r3, [r2, #0]
 8005306:	4b7c      	ldr	r3, [pc, #496]	@ (80054f8 <HAL_RCC_OscConfig+0x27c>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a7b      	ldr	r2, [pc, #492]	@ (80054f8 <HAL_RCC_OscConfig+0x27c>)
 800530c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005310:	6013      	str	r3, [r2, #0]
 8005312:	e00b      	b.n	800532c <HAL_RCC_OscConfig+0xb0>
 8005314:	4b78      	ldr	r3, [pc, #480]	@ (80054f8 <HAL_RCC_OscConfig+0x27c>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a77      	ldr	r2, [pc, #476]	@ (80054f8 <HAL_RCC_OscConfig+0x27c>)
 800531a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800531e:	6013      	str	r3, [r2, #0]
 8005320:	4b75      	ldr	r3, [pc, #468]	@ (80054f8 <HAL_RCC_OscConfig+0x27c>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a74      	ldr	r2, [pc, #464]	@ (80054f8 <HAL_RCC_OscConfig+0x27c>)
 8005326:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800532a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d013      	beq.n	800535c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005334:	f7fb ff26 	bl	8001184 <HAL_GetTick>
 8005338:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800533a:	e008      	b.n	800534e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800533c:	f7fb ff22 	bl	8001184 <HAL_GetTick>
 8005340:	4602      	mov	r2, r0
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	2b64      	cmp	r3, #100	@ 0x64
 8005348:	d901      	bls.n	800534e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e29e      	b.n	800588c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800534e:	4b6a      	ldr	r3, [pc, #424]	@ (80054f8 <HAL_RCC_OscConfig+0x27c>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d0f0      	beq.n	800533c <HAL_RCC_OscConfig+0xc0>
 800535a:	e014      	b.n	8005386 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800535c:	f7fb ff12 	bl	8001184 <HAL_GetTick>
 8005360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005362:	e008      	b.n	8005376 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005364:	f7fb ff0e 	bl	8001184 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b64      	cmp	r3, #100	@ 0x64
 8005370:	d901      	bls.n	8005376 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e28a      	b.n	800588c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005376:	4b60      	ldr	r3, [pc, #384]	@ (80054f8 <HAL_RCC_OscConfig+0x27c>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1f0      	bne.n	8005364 <HAL_RCC_OscConfig+0xe8>
 8005382:	e000      	b.n	8005386 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005384:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	2b00      	cmp	r3, #0
 8005390:	d075      	beq.n	800547e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005392:	4b59      	ldr	r3, [pc, #356]	@ (80054f8 <HAL_RCC_OscConfig+0x27c>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f003 030c 	and.w	r3, r3, #12
 800539a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800539c:	4b56      	ldr	r3, [pc, #344]	@ (80054f8 <HAL_RCC_OscConfig+0x27c>)
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	f003 0303 	and.w	r3, r3, #3
 80053a4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80053a6:	69bb      	ldr	r3, [r7, #24]
 80053a8:	2b0c      	cmp	r3, #12
 80053aa:	d102      	bne.n	80053b2 <HAL_RCC_OscConfig+0x136>
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d002      	beq.n	80053b8 <HAL_RCC_OscConfig+0x13c>
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	2b04      	cmp	r3, #4
 80053b6:	d11f      	bne.n	80053f8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053b8:	4b4f      	ldr	r3, [pc, #316]	@ (80054f8 <HAL_RCC_OscConfig+0x27c>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d005      	beq.n	80053d0 <HAL_RCC_OscConfig+0x154>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e25d      	b.n	800588c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053d0:	4b49      	ldr	r3, [pc, #292]	@ (80054f8 <HAL_RCC_OscConfig+0x27c>)
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	061b      	lsls	r3, r3, #24
 80053de:	4946      	ldr	r1, [pc, #280]	@ (80054f8 <HAL_RCC_OscConfig+0x27c>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80053e4:	4b45      	ldr	r3, [pc, #276]	@ (80054fc <HAL_RCC_OscConfig+0x280>)
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f7fb fe7f 	bl	80010ec <HAL_InitTick>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d043      	beq.n	800547c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e249      	b.n	800588c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d023      	beq.n	8005448 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005400:	4b3d      	ldr	r3, [pc, #244]	@ (80054f8 <HAL_RCC_OscConfig+0x27c>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a3c      	ldr	r2, [pc, #240]	@ (80054f8 <HAL_RCC_OscConfig+0x27c>)
 8005406:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800540a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800540c:	f7fb feba 	bl	8001184 <HAL_GetTick>
 8005410:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005412:	e008      	b.n	8005426 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005414:	f7fb feb6 	bl	8001184 <HAL_GetTick>
 8005418:	4602      	mov	r2, r0
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	2b02      	cmp	r3, #2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e232      	b.n	800588c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005426:	4b34      	ldr	r3, [pc, #208]	@ (80054f8 <HAL_RCC_OscConfig+0x27c>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800542e:	2b00      	cmp	r3, #0
 8005430:	d0f0      	beq.n	8005414 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005432:	4b31      	ldr	r3, [pc, #196]	@ (80054f8 <HAL_RCC_OscConfig+0x27c>)
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	691b      	ldr	r3, [r3, #16]
 800543e:	061b      	lsls	r3, r3, #24
 8005440:	492d      	ldr	r1, [pc, #180]	@ (80054f8 <HAL_RCC_OscConfig+0x27c>)
 8005442:	4313      	orrs	r3, r2
 8005444:	604b      	str	r3, [r1, #4]
 8005446:	e01a      	b.n	800547e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005448:	4b2b      	ldr	r3, [pc, #172]	@ (80054f8 <HAL_RCC_OscConfig+0x27c>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a2a      	ldr	r2, [pc, #168]	@ (80054f8 <HAL_RCC_OscConfig+0x27c>)
 800544e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005452:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005454:	f7fb fe96 	bl	8001184 <HAL_GetTick>
 8005458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800545c:	f7fb fe92 	bl	8001184 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e20e      	b.n	800588c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800546e:	4b22      	ldr	r3, [pc, #136]	@ (80054f8 <HAL_RCC_OscConfig+0x27c>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1f0      	bne.n	800545c <HAL_RCC_OscConfig+0x1e0>
 800547a:	e000      	b.n	800547e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800547c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 0308 	and.w	r3, r3, #8
 8005486:	2b00      	cmp	r3, #0
 8005488:	d041      	beq.n	800550e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d01c      	beq.n	80054cc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005492:	4b19      	ldr	r3, [pc, #100]	@ (80054f8 <HAL_RCC_OscConfig+0x27c>)
 8005494:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005498:	4a17      	ldr	r2, [pc, #92]	@ (80054f8 <HAL_RCC_OscConfig+0x27c>)
 800549a:	f043 0301 	orr.w	r3, r3, #1
 800549e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054a2:	f7fb fe6f 	bl	8001184 <HAL_GetTick>
 80054a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054a8:	e008      	b.n	80054bc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054aa:	f7fb fe6b 	bl	8001184 <HAL_GetTick>
 80054ae:	4602      	mov	r2, r0
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d901      	bls.n	80054bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80054b8:	2303      	movs	r3, #3
 80054ba:	e1e7      	b.n	800588c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054bc:	4b0e      	ldr	r3, [pc, #56]	@ (80054f8 <HAL_RCC_OscConfig+0x27c>)
 80054be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054c2:	f003 0302 	and.w	r3, r3, #2
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d0ef      	beq.n	80054aa <HAL_RCC_OscConfig+0x22e>
 80054ca:	e020      	b.n	800550e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054cc:	4b0a      	ldr	r3, [pc, #40]	@ (80054f8 <HAL_RCC_OscConfig+0x27c>)
 80054ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054d2:	4a09      	ldr	r2, [pc, #36]	@ (80054f8 <HAL_RCC_OscConfig+0x27c>)
 80054d4:	f023 0301 	bic.w	r3, r3, #1
 80054d8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054dc:	f7fb fe52 	bl	8001184 <HAL_GetTick>
 80054e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80054e2:	e00d      	b.n	8005500 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054e4:	f7fb fe4e 	bl	8001184 <HAL_GetTick>
 80054e8:	4602      	mov	r2, r0
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	1ad3      	subs	r3, r2, r3
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d906      	bls.n	8005500 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80054f2:	2303      	movs	r3, #3
 80054f4:	e1ca      	b.n	800588c <HAL_RCC_OscConfig+0x610>
 80054f6:	bf00      	nop
 80054f8:	40021000 	.word	0x40021000
 80054fc:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005500:	4b8c      	ldr	r3, [pc, #560]	@ (8005734 <HAL_RCC_OscConfig+0x4b8>)
 8005502:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1ea      	bne.n	80054e4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0304 	and.w	r3, r3, #4
 8005516:	2b00      	cmp	r3, #0
 8005518:	f000 80a6 	beq.w	8005668 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800551c:	2300      	movs	r3, #0
 800551e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005520:	4b84      	ldr	r3, [pc, #528]	@ (8005734 <HAL_RCC_OscConfig+0x4b8>)
 8005522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005524:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d101      	bne.n	8005530 <HAL_RCC_OscConfig+0x2b4>
 800552c:	2301      	movs	r3, #1
 800552e:	e000      	b.n	8005532 <HAL_RCC_OscConfig+0x2b6>
 8005530:	2300      	movs	r3, #0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00d      	beq.n	8005552 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005536:	4b7f      	ldr	r3, [pc, #508]	@ (8005734 <HAL_RCC_OscConfig+0x4b8>)
 8005538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800553a:	4a7e      	ldr	r2, [pc, #504]	@ (8005734 <HAL_RCC_OscConfig+0x4b8>)
 800553c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005540:	6593      	str	r3, [r2, #88]	@ 0x58
 8005542:	4b7c      	ldr	r3, [pc, #496]	@ (8005734 <HAL_RCC_OscConfig+0x4b8>)
 8005544:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800554a:	60fb      	str	r3, [r7, #12]
 800554c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800554e:	2301      	movs	r3, #1
 8005550:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005552:	4b79      	ldr	r3, [pc, #484]	@ (8005738 <HAL_RCC_OscConfig+0x4bc>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800555a:	2b00      	cmp	r3, #0
 800555c:	d118      	bne.n	8005590 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800555e:	4b76      	ldr	r3, [pc, #472]	@ (8005738 <HAL_RCC_OscConfig+0x4bc>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a75      	ldr	r2, [pc, #468]	@ (8005738 <HAL_RCC_OscConfig+0x4bc>)
 8005564:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005568:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800556a:	f7fb fe0b 	bl	8001184 <HAL_GetTick>
 800556e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005570:	e008      	b.n	8005584 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005572:	f7fb fe07 	bl	8001184 <HAL_GetTick>
 8005576:	4602      	mov	r2, r0
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	1ad3      	subs	r3, r2, r3
 800557c:	2b02      	cmp	r3, #2
 800557e:	d901      	bls.n	8005584 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e183      	b.n	800588c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005584:	4b6c      	ldr	r3, [pc, #432]	@ (8005738 <HAL_RCC_OscConfig+0x4bc>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800558c:	2b00      	cmp	r3, #0
 800558e:	d0f0      	beq.n	8005572 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d108      	bne.n	80055aa <HAL_RCC_OscConfig+0x32e>
 8005598:	4b66      	ldr	r3, [pc, #408]	@ (8005734 <HAL_RCC_OscConfig+0x4b8>)
 800559a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800559e:	4a65      	ldr	r2, [pc, #404]	@ (8005734 <HAL_RCC_OscConfig+0x4b8>)
 80055a0:	f043 0301 	orr.w	r3, r3, #1
 80055a4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055a8:	e024      	b.n	80055f4 <HAL_RCC_OscConfig+0x378>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	2b05      	cmp	r3, #5
 80055b0:	d110      	bne.n	80055d4 <HAL_RCC_OscConfig+0x358>
 80055b2:	4b60      	ldr	r3, [pc, #384]	@ (8005734 <HAL_RCC_OscConfig+0x4b8>)
 80055b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055b8:	4a5e      	ldr	r2, [pc, #376]	@ (8005734 <HAL_RCC_OscConfig+0x4b8>)
 80055ba:	f043 0304 	orr.w	r3, r3, #4
 80055be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055c2:	4b5c      	ldr	r3, [pc, #368]	@ (8005734 <HAL_RCC_OscConfig+0x4b8>)
 80055c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055c8:	4a5a      	ldr	r2, [pc, #360]	@ (8005734 <HAL_RCC_OscConfig+0x4b8>)
 80055ca:	f043 0301 	orr.w	r3, r3, #1
 80055ce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055d2:	e00f      	b.n	80055f4 <HAL_RCC_OscConfig+0x378>
 80055d4:	4b57      	ldr	r3, [pc, #348]	@ (8005734 <HAL_RCC_OscConfig+0x4b8>)
 80055d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055da:	4a56      	ldr	r2, [pc, #344]	@ (8005734 <HAL_RCC_OscConfig+0x4b8>)
 80055dc:	f023 0301 	bic.w	r3, r3, #1
 80055e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055e4:	4b53      	ldr	r3, [pc, #332]	@ (8005734 <HAL_RCC_OscConfig+0x4b8>)
 80055e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ea:	4a52      	ldr	r2, [pc, #328]	@ (8005734 <HAL_RCC_OscConfig+0x4b8>)
 80055ec:	f023 0304 	bic.w	r3, r3, #4
 80055f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d016      	beq.n	800562a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055fc:	f7fb fdc2 	bl	8001184 <HAL_GetTick>
 8005600:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005602:	e00a      	b.n	800561a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005604:	f7fb fdbe 	bl	8001184 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005612:	4293      	cmp	r3, r2
 8005614:	d901      	bls.n	800561a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	e138      	b.n	800588c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800561a:	4b46      	ldr	r3, [pc, #280]	@ (8005734 <HAL_RCC_OscConfig+0x4b8>)
 800561c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005620:	f003 0302 	and.w	r3, r3, #2
 8005624:	2b00      	cmp	r3, #0
 8005626:	d0ed      	beq.n	8005604 <HAL_RCC_OscConfig+0x388>
 8005628:	e015      	b.n	8005656 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800562a:	f7fb fdab 	bl	8001184 <HAL_GetTick>
 800562e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005630:	e00a      	b.n	8005648 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005632:	f7fb fda7 	bl	8001184 <HAL_GetTick>
 8005636:	4602      	mov	r2, r0
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	1ad3      	subs	r3, r2, r3
 800563c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005640:	4293      	cmp	r3, r2
 8005642:	d901      	bls.n	8005648 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e121      	b.n	800588c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005648:	4b3a      	ldr	r3, [pc, #232]	@ (8005734 <HAL_RCC_OscConfig+0x4b8>)
 800564a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d1ed      	bne.n	8005632 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005656:	7ffb      	ldrb	r3, [r7, #31]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d105      	bne.n	8005668 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800565c:	4b35      	ldr	r3, [pc, #212]	@ (8005734 <HAL_RCC_OscConfig+0x4b8>)
 800565e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005660:	4a34      	ldr	r2, [pc, #208]	@ (8005734 <HAL_RCC_OscConfig+0x4b8>)
 8005662:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005666:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 0320 	and.w	r3, r3, #32
 8005670:	2b00      	cmp	r3, #0
 8005672:	d03c      	beq.n	80056ee <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d01c      	beq.n	80056b6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800567c:	4b2d      	ldr	r3, [pc, #180]	@ (8005734 <HAL_RCC_OscConfig+0x4b8>)
 800567e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005682:	4a2c      	ldr	r2, [pc, #176]	@ (8005734 <HAL_RCC_OscConfig+0x4b8>)
 8005684:	f043 0301 	orr.w	r3, r3, #1
 8005688:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800568c:	f7fb fd7a 	bl	8001184 <HAL_GetTick>
 8005690:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005692:	e008      	b.n	80056a6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005694:	f7fb fd76 	bl	8001184 <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d901      	bls.n	80056a6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e0f2      	b.n	800588c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80056a6:	4b23      	ldr	r3, [pc, #140]	@ (8005734 <HAL_RCC_OscConfig+0x4b8>)
 80056a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056ac:	f003 0302 	and.w	r3, r3, #2
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d0ef      	beq.n	8005694 <HAL_RCC_OscConfig+0x418>
 80056b4:	e01b      	b.n	80056ee <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80056b6:	4b1f      	ldr	r3, [pc, #124]	@ (8005734 <HAL_RCC_OscConfig+0x4b8>)
 80056b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056bc:	4a1d      	ldr	r2, [pc, #116]	@ (8005734 <HAL_RCC_OscConfig+0x4b8>)
 80056be:	f023 0301 	bic.w	r3, r3, #1
 80056c2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056c6:	f7fb fd5d 	bl	8001184 <HAL_GetTick>
 80056ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80056cc:	e008      	b.n	80056e0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056ce:	f7fb fd59 	bl	8001184 <HAL_GetTick>
 80056d2:	4602      	mov	r2, r0
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d901      	bls.n	80056e0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e0d5      	b.n	800588c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80056e0:	4b14      	ldr	r3, [pc, #80]	@ (8005734 <HAL_RCC_OscConfig+0x4b8>)
 80056e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056e6:	f003 0302 	and.w	r3, r3, #2
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1ef      	bne.n	80056ce <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f000 80c9 	beq.w	800588a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056f8:	4b0e      	ldr	r3, [pc, #56]	@ (8005734 <HAL_RCC_OscConfig+0x4b8>)
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f003 030c 	and.w	r3, r3, #12
 8005700:	2b0c      	cmp	r3, #12
 8005702:	f000 8083 	beq.w	800580c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	69db      	ldr	r3, [r3, #28]
 800570a:	2b02      	cmp	r3, #2
 800570c:	d15e      	bne.n	80057cc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800570e:	4b09      	ldr	r3, [pc, #36]	@ (8005734 <HAL_RCC_OscConfig+0x4b8>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a08      	ldr	r2, [pc, #32]	@ (8005734 <HAL_RCC_OscConfig+0x4b8>)
 8005714:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005718:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800571a:	f7fb fd33 	bl	8001184 <HAL_GetTick>
 800571e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005720:	e00c      	b.n	800573c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005722:	f7fb fd2f 	bl	8001184 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	2b02      	cmp	r3, #2
 800572e:	d905      	bls.n	800573c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e0ab      	b.n	800588c <HAL_RCC_OscConfig+0x610>
 8005734:	40021000 	.word	0x40021000
 8005738:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800573c:	4b55      	ldr	r3, [pc, #340]	@ (8005894 <HAL_RCC_OscConfig+0x618>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d1ec      	bne.n	8005722 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005748:	4b52      	ldr	r3, [pc, #328]	@ (8005894 <HAL_RCC_OscConfig+0x618>)
 800574a:	68da      	ldr	r2, [r3, #12]
 800574c:	4b52      	ldr	r3, [pc, #328]	@ (8005898 <HAL_RCC_OscConfig+0x61c>)
 800574e:	4013      	ands	r3, r2
 8005750:	687a      	ldr	r2, [r7, #4]
 8005752:	6a11      	ldr	r1, [r2, #32]
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005758:	3a01      	subs	r2, #1
 800575a:	0112      	lsls	r2, r2, #4
 800575c:	4311      	orrs	r1, r2
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005762:	0212      	lsls	r2, r2, #8
 8005764:	4311      	orrs	r1, r2
 8005766:	687a      	ldr	r2, [r7, #4]
 8005768:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800576a:	0852      	lsrs	r2, r2, #1
 800576c:	3a01      	subs	r2, #1
 800576e:	0552      	lsls	r2, r2, #21
 8005770:	4311      	orrs	r1, r2
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005776:	0852      	lsrs	r2, r2, #1
 8005778:	3a01      	subs	r2, #1
 800577a:	0652      	lsls	r2, r2, #25
 800577c:	4311      	orrs	r1, r2
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005782:	06d2      	lsls	r2, r2, #27
 8005784:	430a      	orrs	r2, r1
 8005786:	4943      	ldr	r1, [pc, #268]	@ (8005894 <HAL_RCC_OscConfig+0x618>)
 8005788:	4313      	orrs	r3, r2
 800578a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800578c:	4b41      	ldr	r3, [pc, #260]	@ (8005894 <HAL_RCC_OscConfig+0x618>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a40      	ldr	r2, [pc, #256]	@ (8005894 <HAL_RCC_OscConfig+0x618>)
 8005792:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005796:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005798:	4b3e      	ldr	r3, [pc, #248]	@ (8005894 <HAL_RCC_OscConfig+0x618>)
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	4a3d      	ldr	r2, [pc, #244]	@ (8005894 <HAL_RCC_OscConfig+0x618>)
 800579e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057a2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a4:	f7fb fcee 	bl	8001184 <HAL_GetTick>
 80057a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057aa:	e008      	b.n	80057be <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057ac:	f7fb fcea 	bl	8001184 <HAL_GetTick>
 80057b0:	4602      	mov	r2, r0
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	2b02      	cmp	r3, #2
 80057b8:	d901      	bls.n	80057be <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e066      	b.n	800588c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057be:	4b35      	ldr	r3, [pc, #212]	@ (8005894 <HAL_RCC_OscConfig+0x618>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d0f0      	beq.n	80057ac <HAL_RCC_OscConfig+0x530>
 80057ca:	e05e      	b.n	800588a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057cc:	4b31      	ldr	r3, [pc, #196]	@ (8005894 <HAL_RCC_OscConfig+0x618>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a30      	ldr	r2, [pc, #192]	@ (8005894 <HAL_RCC_OscConfig+0x618>)
 80057d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057d8:	f7fb fcd4 	bl	8001184 <HAL_GetTick>
 80057dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057de:	e008      	b.n	80057f2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057e0:	f7fb fcd0 	bl	8001184 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d901      	bls.n	80057f2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80057ee:	2303      	movs	r3, #3
 80057f0:	e04c      	b.n	800588c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057f2:	4b28      	ldr	r3, [pc, #160]	@ (8005894 <HAL_RCC_OscConfig+0x618>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d1f0      	bne.n	80057e0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80057fe:	4b25      	ldr	r3, [pc, #148]	@ (8005894 <HAL_RCC_OscConfig+0x618>)
 8005800:	68da      	ldr	r2, [r3, #12]
 8005802:	4924      	ldr	r1, [pc, #144]	@ (8005894 <HAL_RCC_OscConfig+0x618>)
 8005804:	4b25      	ldr	r3, [pc, #148]	@ (800589c <HAL_RCC_OscConfig+0x620>)
 8005806:	4013      	ands	r3, r2
 8005808:	60cb      	str	r3, [r1, #12]
 800580a:	e03e      	b.n	800588a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	69db      	ldr	r3, [r3, #28]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d101      	bne.n	8005818 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e039      	b.n	800588c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005818:	4b1e      	ldr	r3, [pc, #120]	@ (8005894 <HAL_RCC_OscConfig+0x618>)
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f003 0203 	and.w	r2, r3, #3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6a1b      	ldr	r3, [r3, #32]
 8005828:	429a      	cmp	r2, r3
 800582a:	d12c      	bne.n	8005886 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005836:	3b01      	subs	r3, #1
 8005838:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800583a:	429a      	cmp	r2, r3
 800583c:	d123      	bne.n	8005886 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005848:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800584a:	429a      	cmp	r2, r3
 800584c:	d11b      	bne.n	8005886 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005858:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800585a:	429a      	cmp	r2, r3
 800585c:	d113      	bne.n	8005886 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800585e:	697b      	ldr	r3, [r7, #20]
 8005860:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005868:	085b      	lsrs	r3, r3, #1
 800586a:	3b01      	subs	r3, #1
 800586c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800586e:	429a      	cmp	r2, r3
 8005870:	d109      	bne.n	8005886 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800587c:	085b      	lsrs	r3, r3, #1
 800587e:	3b01      	subs	r3, #1
 8005880:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005882:	429a      	cmp	r2, r3
 8005884:	d001      	beq.n	800588a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e000      	b.n	800588c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3720      	adds	r7, #32
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	40021000 	.word	0x40021000
 8005898:	019f800c 	.word	0x019f800c
 800589c:	feeefffc 	.word	0xfeeefffc

080058a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80058aa:	2300      	movs	r3, #0
 80058ac:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d101      	bne.n	80058b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e11e      	b.n	8005af6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058b8:	4b91      	ldr	r3, [pc, #580]	@ (8005b00 <HAL_RCC_ClockConfig+0x260>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 030f 	and.w	r3, r3, #15
 80058c0:	683a      	ldr	r2, [r7, #0]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	d910      	bls.n	80058e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058c6:	4b8e      	ldr	r3, [pc, #568]	@ (8005b00 <HAL_RCC_ClockConfig+0x260>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f023 020f 	bic.w	r2, r3, #15
 80058ce:	498c      	ldr	r1, [pc, #560]	@ (8005b00 <HAL_RCC_ClockConfig+0x260>)
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058d6:	4b8a      	ldr	r3, [pc, #552]	@ (8005b00 <HAL_RCC_ClockConfig+0x260>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 030f 	and.w	r3, r3, #15
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d001      	beq.n	80058e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e106      	b.n	8005af6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d073      	beq.n	80059dc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	2b03      	cmp	r3, #3
 80058fa:	d129      	bne.n	8005950 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058fc:	4b81      	ldr	r3, [pc, #516]	@ (8005b04 <HAL_RCC_ClockConfig+0x264>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d101      	bne.n	800590c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e0f4      	b.n	8005af6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800590c:	f000 f99e 	bl	8005c4c <RCC_GetSysClockFreqFromPLLSource>
 8005910:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	4a7c      	ldr	r2, [pc, #496]	@ (8005b08 <HAL_RCC_ClockConfig+0x268>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d93f      	bls.n	800599a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800591a:	4b7a      	ldr	r3, [pc, #488]	@ (8005b04 <HAL_RCC_ClockConfig+0x264>)
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d009      	beq.n	800593a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800592e:	2b00      	cmp	r3, #0
 8005930:	d033      	beq.n	800599a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005936:	2b00      	cmp	r3, #0
 8005938:	d12f      	bne.n	800599a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800593a:	4b72      	ldr	r3, [pc, #456]	@ (8005b04 <HAL_RCC_ClockConfig+0x264>)
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005942:	4a70      	ldr	r2, [pc, #448]	@ (8005b04 <HAL_RCC_ClockConfig+0x264>)
 8005944:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005948:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800594a:	2380      	movs	r3, #128	@ 0x80
 800594c:	617b      	str	r3, [r7, #20]
 800594e:	e024      	b.n	800599a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	2b02      	cmp	r3, #2
 8005956:	d107      	bne.n	8005968 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005958:	4b6a      	ldr	r3, [pc, #424]	@ (8005b04 <HAL_RCC_ClockConfig+0x264>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d109      	bne.n	8005978 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e0c6      	b.n	8005af6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005968:	4b66      	ldr	r3, [pc, #408]	@ (8005b04 <HAL_RCC_ClockConfig+0x264>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005970:	2b00      	cmp	r3, #0
 8005972:	d101      	bne.n	8005978 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e0be      	b.n	8005af6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005978:	f000 f8ce 	bl	8005b18 <HAL_RCC_GetSysClockFreq>
 800597c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	4a61      	ldr	r2, [pc, #388]	@ (8005b08 <HAL_RCC_ClockConfig+0x268>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d909      	bls.n	800599a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005986:	4b5f      	ldr	r3, [pc, #380]	@ (8005b04 <HAL_RCC_ClockConfig+0x264>)
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800598e:	4a5d      	ldr	r2, [pc, #372]	@ (8005b04 <HAL_RCC_ClockConfig+0x264>)
 8005990:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005994:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005996:	2380      	movs	r3, #128	@ 0x80
 8005998:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800599a:	4b5a      	ldr	r3, [pc, #360]	@ (8005b04 <HAL_RCC_ClockConfig+0x264>)
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	f023 0203 	bic.w	r2, r3, #3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	4957      	ldr	r1, [pc, #348]	@ (8005b04 <HAL_RCC_ClockConfig+0x264>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059ac:	f7fb fbea 	bl	8001184 <HAL_GetTick>
 80059b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059b2:	e00a      	b.n	80059ca <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059b4:	f7fb fbe6 	bl	8001184 <HAL_GetTick>
 80059b8:	4602      	mov	r2, r0
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	1ad3      	subs	r3, r2, r3
 80059be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d901      	bls.n	80059ca <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80059c6:	2303      	movs	r3, #3
 80059c8:	e095      	b.n	8005af6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ca:	4b4e      	ldr	r3, [pc, #312]	@ (8005b04 <HAL_RCC_ClockConfig+0x264>)
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	f003 020c 	and.w	r2, r3, #12
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	429a      	cmp	r2, r3
 80059da:	d1eb      	bne.n	80059b4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0302 	and.w	r3, r3, #2
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d023      	beq.n	8005a30 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0304 	and.w	r3, r3, #4
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d005      	beq.n	8005a00 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059f4:	4b43      	ldr	r3, [pc, #268]	@ (8005b04 <HAL_RCC_ClockConfig+0x264>)
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	4a42      	ldr	r2, [pc, #264]	@ (8005b04 <HAL_RCC_ClockConfig+0x264>)
 80059fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80059fe:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0308 	and.w	r3, r3, #8
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d007      	beq.n	8005a1c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005a0c:	4b3d      	ldr	r3, [pc, #244]	@ (8005b04 <HAL_RCC_ClockConfig+0x264>)
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005a14:	4a3b      	ldr	r2, [pc, #236]	@ (8005b04 <HAL_RCC_ClockConfig+0x264>)
 8005a16:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005a1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a1c:	4b39      	ldr	r3, [pc, #228]	@ (8005b04 <HAL_RCC_ClockConfig+0x264>)
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	4936      	ldr	r1, [pc, #216]	@ (8005b04 <HAL_RCC_ClockConfig+0x264>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	608b      	str	r3, [r1, #8]
 8005a2e:	e008      	b.n	8005a42 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	2b80      	cmp	r3, #128	@ 0x80
 8005a34:	d105      	bne.n	8005a42 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005a36:	4b33      	ldr	r3, [pc, #204]	@ (8005b04 <HAL_RCC_ClockConfig+0x264>)
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	4a32      	ldr	r2, [pc, #200]	@ (8005b04 <HAL_RCC_ClockConfig+0x264>)
 8005a3c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a40:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a42:	4b2f      	ldr	r3, [pc, #188]	@ (8005b00 <HAL_RCC_ClockConfig+0x260>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 030f 	and.w	r3, r3, #15
 8005a4a:	683a      	ldr	r2, [r7, #0]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d21d      	bcs.n	8005a8c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a50:	4b2b      	ldr	r3, [pc, #172]	@ (8005b00 <HAL_RCC_ClockConfig+0x260>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f023 020f 	bic.w	r2, r3, #15
 8005a58:	4929      	ldr	r1, [pc, #164]	@ (8005b00 <HAL_RCC_ClockConfig+0x260>)
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005a60:	f7fb fb90 	bl	8001184 <HAL_GetTick>
 8005a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a66:	e00a      	b.n	8005a7e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a68:	f7fb fb8c 	bl	8001184 <HAL_GetTick>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d901      	bls.n	8005a7e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005a7a:	2303      	movs	r3, #3
 8005a7c:	e03b      	b.n	8005af6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a7e:	4b20      	ldr	r3, [pc, #128]	@ (8005b00 <HAL_RCC_ClockConfig+0x260>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 030f 	and.w	r3, r3, #15
 8005a86:	683a      	ldr	r2, [r7, #0]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d1ed      	bne.n	8005a68 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0304 	and.w	r3, r3, #4
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d008      	beq.n	8005aaa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a98:	4b1a      	ldr	r3, [pc, #104]	@ (8005b04 <HAL_RCC_ClockConfig+0x264>)
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	68db      	ldr	r3, [r3, #12]
 8005aa4:	4917      	ldr	r1, [pc, #92]	@ (8005b04 <HAL_RCC_ClockConfig+0x264>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f003 0308 	and.w	r3, r3, #8
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d009      	beq.n	8005aca <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005ab6:	4b13      	ldr	r3, [pc, #76]	@ (8005b04 <HAL_RCC_ClockConfig+0x264>)
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	00db      	lsls	r3, r3, #3
 8005ac4:	490f      	ldr	r1, [pc, #60]	@ (8005b04 <HAL_RCC_ClockConfig+0x264>)
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005aca:	f000 f825 	bl	8005b18 <HAL_RCC_GetSysClockFreq>
 8005ace:	4602      	mov	r2, r0
 8005ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8005b04 <HAL_RCC_ClockConfig+0x264>)
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	091b      	lsrs	r3, r3, #4
 8005ad6:	f003 030f 	and.w	r3, r3, #15
 8005ada:	490c      	ldr	r1, [pc, #48]	@ (8005b0c <HAL_RCC_ClockConfig+0x26c>)
 8005adc:	5ccb      	ldrb	r3, [r1, r3]
 8005ade:	f003 031f 	and.w	r3, r3, #31
 8005ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8005b10 <HAL_RCC_ClockConfig+0x270>)
 8005ae8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005aea:	4b0a      	ldr	r3, [pc, #40]	@ (8005b14 <HAL_RCC_ClockConfig+0x274>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7fb fafc 	bl	80010ec <HAL_InitTick>
 8005af4:	4603      	mov	r3, r0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3718      	adds	r7, #24
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	40022000 	.word	0x40022000
 8005b04:	40021000 	.word	0x40021000
 8005b08:	04c4b400 	.word	0x04c4b400
 8005b0c:	0800843c 	.word	0x0800843c
 8005b10:	20000008 	.word	0x20000008
 8005b14:	2000000c 	.word	0x2000000c

08005b18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b087      	sub	sp, #28
 8005b1c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005b1e:	4b2c      	ldr	r3, [pc, #176]	@ (8005bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	f003 030c 	and.w	r3, r3, #12
 8005b26:	2b04      	cmp	r3, #4
 8005b28:	d102      	bne.n	8005b30 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b2a:	4b2a      	ldr	r3, [pc, #168]	@ (8005bd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005b2c:	613b      	str	r3, [r7, #16]
 8005b2e:	e047      	b.n	8005bc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005b30:	4b27      	ldr	r3, [pc, #156]	@ (8005bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f003 030c 	and.w	r3, r3, #12
 8005b38:	2b08      	cmp	r3, #8
 8005b3a:	d102      	bne.n	8005b42 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b3c:	4b26      	ldr	r3, [pc, #152]	@ (8005bd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b3e:	613b      	str	r3, [r7, #16]
 8005b40:	e03e      	b.n	8005bc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005b42:	4b23      	ldr	r3, [pc, #140]	@ (8005bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	f003 030c 	and.w	r3, r3, #12
 8005b4a:	2b0c      	cmp	r3, #12
 8005b4c:	d136      	bne.n	8005bbc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b4e:	4b20      	ldr	r3, [pc, #128]	@ (8005bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b50:	68db      	ldr	r3, [r3, #12]
 8005b52:	f003 0303 	and.w	r3, r3, #3
 8005b56:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b58:	4b1d      	ldr	r3, [pc, #116]	@ (8005bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	091b      	lsrs	r3, r3, #4
 8005b5e:	f003 030f 	and.w	r3, r3, #15
 8005b62:	3301      	adds	r3, #1
 8005b64:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2b03      	cmp	r3, #3
 8005b6a:	d10c      	bne.n	8005b86 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b6c:	4a1a      	ldr	r2, [pc, #104]	@ (8005bd8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b74:	4a16      	ldr	r2, [pc, #88]	@ (8005bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b76:	68d2      	ldr	r2, [r2, #12]
 8005b78:	0a12      	lsrs	r2, r2, #8
 8005b7a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005b7e:	fb02 f303 	mul.w	r3, r2, r3
 8005b82:	617b      	str	r3, [r7, #20]
      break;
 8005b84:	e00c      	b.n	8005ba0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b86:	4a13      	ldr	r2, [pc, #76]	@ (8005bd4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b8e:	4a10      	ldr	r2, [pc, #64]	@ (8005bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b90:	68d2      	ldr	r2, [r2, #12]
 8005b92:	0a12      	lsrs	r2, r2, #8
 8005b94:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005b98:	fb02 f303 	mul.w	r3, r2, r3
 8005b9c:	617b      	str	r3, [r7, #20]
      break;
 8005b9e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8005bd0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	0e5b      	lsrs	r3, r3, #25
 8005ba6:	f003 0303 	and.w	r3, r3, #3
 8005baa:	3301      	adds	r3, #1
 8005bac:	005b      	lsls	r3, r3, #1
 8005bae:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005bb0:	697a      	ldr	r2, [r7, #20]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb8:	613b      	str	r3, [r7, #16]
 8005bba:	e001      	b.n	8005bc0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005bc0:	693b      	ldr	r3, [r7, #16]
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	371c      	adds	r7, #28
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	40021000 	.word	0x40021000
 8005bd4:	00f42400 	.word	0x00f42400
 8005bd8:	016e3600 	.word	0x016e3600

08005bdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005be0:	4b03      	ldr	r3, [pc, #12]	@ (8005bf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005be2:	681b      	ldr	r3, [r3, #0]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	20000008 	.word	0x20000008

08005bf4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005bf8:	f7ff fff0 	bl	8005bdc <HAL_RCC_GetHCLKFreq>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	4b06      	ldr	r3, [pc, #24]	@ (8005c18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	0a1b      	lsrs	r3, r3, #8
 8005c04:	f003 0307 	and.w	r3, r3, #7
 8005c08:	4904      	ldr	r1, [pc, #16]	@ (8005c1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c0a:	5ccb      	ldrb	r3, [r1, r3]
 8005c0c:	f003 031f 	and.w	r3, r3, #31
 8005c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	40021000 	.word	0x40021000
 8005c1c:	0800844c 	.word	0x0800844c

08005c20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005c24:	f7ff ffda 	bl	8005bdc <HAL_RCC_GetHCLKFreq>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	4b06      	ldr	r3, [pc, #24]	@ (8005c44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c2c:	689b      	ldr	r3, [r3, #8]
 8005c2e:	0adb      	lsrs	r3, r3, #11
 8005c30:	f003 0307 	and.w	r3, r3, #7
 8005c34:	4904      	ldr	r1, [pc, #16]	@ (8005c48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c36:	5ccb      	ldrb	r3, [r1, r3]
 8005c38:	f003 031f 	and.w	r3, r3, #31
 8005c3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	40021000 	.word	0x40021000
 8005c48:	0800844c 	.word	0x0800844c

08005c4c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b087      	sub	sp, #28
 8005c50:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c52:	4b1e      	ldr	r3, [pc, #120]	@ (8005ccc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	f003 0303 	and.w	r3, r3, #3
 8005c5a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c5c:	4b1b      	ldr	r3, [pc, #108]	@ (8005ccc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	091b      	lsrs	r3, r3, #4
 8005c62:	f003 030f 	and.w	r3, r3, #15
 8005c66:	3301      	adds	r3, #1
 8005c68:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	2b03      	cmp	r3, #3
 8005c6e:	d10c      	bne.n	8005c8a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c70:	4a17      	ldr	r2, [pc, #92]	@ (8005cd0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c78:	4a14      	ldr	r2, [pc, #80]	@ (8005ccc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c7a:	68d2      	ldr	r2, [r2, #12]
 8005c7c:	0a12      	lsrs	r2, r2, #8
 8005c7e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c82:	fb02 f303 	mul.w	r3, r2, r3
 8005c86:	617b      	str	r3, [r7, #20]
    break;
 8005c88:	e00c      	b.n	8005ca4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c8a:	4a12      	ldr	r2, [pc, #72]	@ (8005cd4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c92:	4a0e      	ldr	r2, [pc, #56]	@ (8005ccc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c94:	68d2      	ldr	r2, [r2, #12]
 8005c96:	0a12      	lsrs	r2, r2, #8
 8005c98:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c9c:	fb02 f303 	mul.w	r3, r2, r3
 8005ca0:	617b      	str	r3, [r7, #20]
    break;
 8005ca2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ca4:	4b09      	ldr	r3, [pc, #36]	@ (8005ccc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	0e5b      	lsrs	r3, r3, #25
 8005caa:	f003 0303 	and.w	r3, r3, #3
 8005cae:	3301      	adds	r3, #1
 8005cb0:	005b      	lsls	r3, r3, #1
 8005cb2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005cb4:	697a      	ldr	r2, [r7, #20]
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cbc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005cbe:	687b      	ldr	r3, [r7, #4]
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	371c      	adds	r7, #28
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	40021000 	.word	0x40021000
 8005cd0:	016e3600 	.word	0x016e3600
 8005cd4:	00f42400 	.word	0x00f42400

08005cd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b086      	sub	sp, #24
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f000 8098 	beq.w	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cfa:	4b43      	ldr	r3, [pc, #268]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10d      	bne.n	8005d22 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d06:	4b40      	ldr	r3, [pc, #256]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d0a:	4a3f      	ldr	r2, [pc, #252]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d10:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d12:	4b3d      	ldr	r3, [pc, #244]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d1a:	60bb      	str	r3, [r7, #8]
 8005d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d22:	4b3a      	ldr	r3, [pc, #232]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a39      	ldr	r2, [pc, #228]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d2c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d2e:	f7fb fa29 	bl	8001184 <HAL_GetTick>
 8005d32:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d34:	e009      	b.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d36:	f7fb fa25 	bl	8001184 <HAL_GetTick>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d902      	bls.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	74fb      	strb	r3, [r7, #19]
        break;
 8005d48:	e005      	b.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d4a:	4b30      	ldr	r3, [pc, #192]	@ (8005e0c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d0ef      	beq.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005d56:	7cfb      	ldrb	r3, [r7, #19]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d159      	bne.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005d5c:	4b2a      	ldr	r3, [pc, #168]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d66:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d01e      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	429a      	cmp	r2, r3
 8005d76:	d019      	beq.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d78:	4b23      	ldr	r3, [pc, #140]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d82:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d84:	4b20      	ldr	r3, [pc, #128]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d8a:	4a1f      	ldr	r2, [pc, #124]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d94:	4b1c      	ldr	r3, [pc, #112]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d9a:	4a1b      	ldr	r2, [pc, #108]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005da0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005da4:	4a18      	ldr	r2, [pc, #96]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d016      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005db6:	f7fb f9e5 	bl	8001184 <HAL_GetTick>
 8005dba:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dbc:	e00b      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dbe:	f7fb f9e1 	bl	8001184 <HAL_GetTick>
 8005dc2:	4602      	mov	r2, r0
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d902      	bls.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	74fb      	strb	r3, [r7, #19]
            break;
 8005dd4:	e006      	b.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dd6:	4b0c      	ldr	r3, [pc, #48]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ddc:	f003 0302 	and.w	r3, r3, #2
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d0ec      	beq.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005de4:	7cfb      	ldrb	r3, [r7, #19]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10b      	bne.n	8005e02 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dea:	4b07      	ldr	r3, [pc, #28]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005df0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005df8:	4903      	ldr	r1, [pc, #12]	@ (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005e00:	e008      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e02:	7cfb      	ldrb	r3, [r7, #19]
 8005e04:	74bb      	strb	r3, [r7, #18]
 8005e06:	e005      	b.n	8005e14 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005e08:	40021000 	.word	0x40021000
 8005e0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e10:	7cfb      	ldrb	r3, [r7, #19]
 8005e12:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e14:	7c7b      	ldrb	r3, [r7, #17]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d105      	bne.n	8005e26 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e1a:	4ba7      	ldr	r3, [pc, #668]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e1e:	4aa6      	ldr	r2, [pc, #664]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e20:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e24:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0301 	and.w	r3, r3, #1
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00a      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e32:	4ba1      	ldr	r3, [pc, #644]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e38:	f023 0203 	bic.w	r2, r3, #3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	499d      	ldr	r1, [pc, #628]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f003 0302 	and.w	r3, r3, #2
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d00a      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e54:	4b98      	ldr	r3, [pc, #608]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e5a:	f023 020c 	bic.w	r2, r3, #12
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	4995      	ldr	r1, [pc, #596]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0304 	and.w	r3, r3, #4
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00a      	beq.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005e76:	4b90      	ldr	r3, [pc, #576]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e7c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	498c      	ldr	r1, [pc, #560]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e86:	4313      	orrs	r3, r2
 8005e88:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0308 	and.w	r3, r3, #8
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00a      	beq.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005e98:	4b87      	ldr	r3, [pc, #540]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e9e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	4984      	ldr	r1, [pc, #528]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f003 0310 	and.w	r3, r3, #16
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00a      	beq.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005eba:	4b7f      	ldr	r3, [pc, #508]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ec0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	695b      	ldr	r3, [r3, #20]
 8005ec8:	497b      	ldr	r1, [pc, #492]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 0320 	and.w	r3, r3, #32
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00a      	beq.n	8005ef2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005edc:	4b76      	ldr	r3, [pc, #472]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ee2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	4973      	ldr	r1, [pc, #460]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eec:	4313      	orrs	r3, r2
 8005eee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00a      	beq.n	8005f14 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005efe:	4b6e      	ldr	r3, [pc, #440]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f04:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	69db      	ldr	r3, [r3, #28]
 8005f0c:	496a      	ldr	r1, [pc, #424]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d00a      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f20:	4b65      	ldr	r3, [pc, #404]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f26:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6a1b      	ldr	r3, [r3, #32]
 8005f2e:	4962      	ldr	r1, [pc, #392]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00a      	beq.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f42:	4b5d      	ldr	r3, [pc, #372]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f48:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f50:	4959      	ldr	r1, [pc, #356]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f52:	4313      	orrs	r3, r2
 8005f54:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00a      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f64:	4b54      	ldr	r3, [pc, #336]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f66:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f6a:	f023 0203 	bic.w	r2, r3, #3
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f72:	4951      	ldr	r1, [pc, #324]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f74:	4313      	orrs	r3, r2
 8005f76:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00a      	beq.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f86:	4b4c      	ldr	r3, [pc, #304]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f8c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f94:	4948      	ldr	r1, [pc, #288]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f96:	4313      	orrs	r3, r2
 8005f98:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d015      	beq.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005fa8:	4b43      	ldr	r3, [pc, #268]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fb6:	4940      	ldr	r1, [pc, #256]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fc6:	d105      	bne.n	8005fd4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fc8:	4b3b      	ldr	r3, [pc, #236]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	4a3a      	ldr	r2, [pc, #232]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005fd2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d015      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005fe0:	4b35      	ldr	r3, [pc, #212]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fe6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fee:	4932      	ldr	r1, [pc, #200]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ffa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ffe:	d105      	bne.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006000:	4b2d      	ldr	r3, [pc, #180]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	4a2c      	ldr	r2, [pc, #176]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006006:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800600a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d015      	beq.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006018:	4b27      	ldr	r3, [pc, #156]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800601a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800601e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006026:	4924      	ldr	r1, [pc, #144]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006028:	4313      	orrs	r3, r2
 800602a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006032:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006036:	d105      	bne.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006038:	4b1f      	ldr	r3, [pc, #124]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	4a1e      	ldr	r2, [pc, #120]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800603e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006042:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800604c:	2b00      	cmp	r3, #0
 800604e:	d015      	beq.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006050:	4b19      	ldr	r3, [pc, #100]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006056:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800605e:	4916      	ldr	r1, [pc, #88]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006060:	4313      	orrs	r3, r2
 8006062:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800606a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800606e:	d105      	bne.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006070:	4b11      	ldr	r3, [pc, #68]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	4a10      	ldr	r2, [pc, #64]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006076:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800607a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d019      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006088:	4b0b      	ldr	r3, [pc, #44]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800608a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800608e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006096:	4908      	ldr	r1, [pc, #32]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006098:	4313      	orrs	r3, r2
 800609a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060a6:	d109      	bne.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060a8:	4b03      	ldr	r3, [pc, #12]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	4a02      	ldr	r2, [pc, #8]	@ (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060b2:	60d3      	str	r3, [r2, #12]
 80060b4:	e002      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80060b6:	bf00      	nop
 80060b8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d015      	beq.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80060c8:	4b29      	ldr	r3, [pc, #164]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060ce:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060d6:	4926      	ldr	r1, [pc, #152]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060d8:	4313      	orrs	r3, r2
 80060da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060e6:	d105      	bne.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80060e8:	4b21      	ldr	r3, [pc, #132]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	4a20      	ldr	r2, [pc, #128]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060f2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d015      	beq.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006100:	4b1b      	ldr	r3, [pc, #108]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006106:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800610e:	4918      	ldr	r1, [pc, #96]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006110:	4313      	orrs	r3, r2
 8006112:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800611a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800611e:	d105      	bne.n	800612c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006120:	4b13      	ldr	r3, [pc, #76]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	4a12      	ldr	r2, [pc, #72]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006126:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800612a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006134:	2b00      	cmp	r3, #0
 8006136:	d015      	beq.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006138:	4b0d      	ldr	r3, [pc, #52]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800613a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800613e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006146:	490a      	ldr	r1, [pc, #40]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006148:	4313      	orrs	r3, r2
 800614a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006152:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006156:	d105      	bne.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006158:	4b05      	ldr	r3, [pc, #20]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	4a04      	ldr	r2, [pc, #16]	@ (8006170 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800615e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006162:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006164:	7cbb      	ldrb	r3, [r7, #18]
}
 8006166:	4618      	mov	r0, r3
 8006168:	3718      	adds	r7, #24
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	40021000 	.word	0x40021000

08006174 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b082      	sub	sp, #8
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d101      	bne.n	8006186 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e042      	b.n	800620c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800618c:	2b00      	cmp	r3, #0
 800618e:	d106      	bne.n	800619e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f7fa fe7f 	bl	8000e9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2224      	movs	r2, #36	@ 0x24
 80061a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f022 0201 	bic.w	r2, r2, #1
 80061b4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d002      	beq.n	80061c4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 ff42 	bl	8007048 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 fc43 	bl	8006a50 <UART_SetConfig>
 80061ca:	4603      	mov	r3, r0
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d101      	bne.n	80061d4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e01b      	b.n	800620c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80061e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	689a      	ldr	r2, [r3, #8]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80061f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f042 0201 	orr.w	r2, r2, #1
 8006202:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 ffc1 	bl	800718c <UART_CheckIdleState>
 800620a:	4603      	mov	r3, r0
}
 800620c:	4618      	mov	r0, r3
 800620e:	3708      	adds	r7, #8
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}

08006214 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b08a      	sub	sp, #40	@ 0x28
 8006218:	af02      	add	r7, sp, #8
 800621a:	60f8      	str	r0, [r7, #12]
 800621c:	60b9      	str	r1, [r7, #8]
 800621e:	603b      	str	r3, [r7, #0]
 8006220:	4613      	mov	r3, r2
 8006222:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800622a:	2b20      	cmp	r3, #32
 800622c:	d17b      	bne.n	8006326 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d002      	beq.n	800623a <HAL_UART_Transmit+0x26>
 8006234:	88fb      	ldrh	r3, [r7, #6]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d101      	bne.n	800623e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e074      	b.n	8006328 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2221      	movs	r2, #33	@ 0x21
 800624a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800624e:	f7fa ff99 	bl	8001184 <HAL_GetTick>
 8006252:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	88fa      	ldrh	r2, [r7, #6]
 8006258:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	88fa      	ldrh	r2, [r7, #6]
 8006260:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800626c:	d108      	bne.n	8006280 <HAL_UART_Transmit+0x6c>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d104      	bne.n	8006280 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006276:	2300      	movs	r3, #0
 8006278:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	61bb      	str	r3, [r7, #24]
 800627e:	e003      	b.n	8006288 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006284:	2300      	movs	r3, #0
 8006286:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006288:	e030      	b.n	80062ec <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	9300      	str	r3, [sp, #0]
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	2200      	movs	r2, #0
 8006292:	2180      	movs	r1, #128	@ 0x80
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f001 f823 	bl	80072e0 <UART_WaitOnFlagUntilTimeout>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d005      	beq.n	80062ac <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2220      	movs	r2, #32
 80062a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80062a8:	2303      	movs	r3, #3
 80062aa:	e03d      	b.n	8006328 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d10b      	bne.n	80062ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	881b      	ldrh	r3, [r3, #0]
 80062b6:	461a      	mov	r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062c0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	3302      	adds	r3, #2
 80062c6:	61bb      	str	r3, [r7, #24]
 80062c8:	e007      	b.n	80062da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	781a      	ldrb	r2, [r3, #0]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	3301      	adds	r3, #1
 80062d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	3b01      	subs	r3, #1
 80062e4:	b29a      	uxth	r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80062f2:	b29b      	uxth	r3, r3
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1c8      	bne.n	800628a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	2200      	movs	r2, #0
 8006300:	2140      	movs	r1, #64	@ 0x40
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f000 ffec 	bl	80072e0 <UART_WaitOnFlagUntilTimeout>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d005      	beq.n	800631a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2220      	movs	r2, #32
 8006312:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e006      	b.n	8006328 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2220      	movs	r2, #32
 800631e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006322:	2300      	movs	r3, #0
 8006324:	e000      	b.n	8006328 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006326:	2302      	movs	r3, #2
  }
}
 8006328:	4618      	mov	r0, r3
 800632a:	3720      	adds	r7, #32
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b08a      	sub	sp, #40	@ 0x28
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	4613      	mov	r3, r2
 800633c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006344:	2b20      	cmp	r3, #32
 8006346:	d137      	bne.n	80063b8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d002      	beq.n	8006354 <HAL_UART_Receive_IT+0x24>
 800634e:	88fb      	ldrh	r3, [r7, #6]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d101      	bne.n	8006358 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e030      	b.n	80063ba <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a18      	ldr	r2, [pc, #96]	@ (80063c4 <HAL_UART_Receive_IT+0x94>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d01f      	beq.n	80063a8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d018      	beq.n	80063a8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	e853 3f00 	ldrex	r3, [r3]
 8006382:	613b      	str	r3, [r7, #16]
   return(result);
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800638a:	627b      	str	r3, [r7, #36]	@ 0x24
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	461a      	mov	r2, r3
 8006392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006394:	623b      	str	r3, [r7, #32]
 8006396:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006398:	69f9      	ldr	r1, [r7, #28]
 800639a:	6a3a      	ldr	r2, [r7, #32]
 800639c:	e841 2300 	strex	r3, r2, [r1]
 80063a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d1e6      	bne.n	8006376 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80063a8:	88fb      	ldrh	r3, [r7, #6]
 80063aa:	461a      	mov	r2, r3
 80063ac:	68b9      	ldr	r1, [r7, #8]
 80063ae:	68f8      	ldr	r0, [r7, #12]
 80063b0:	f001 f804 	bl	80073bc <UART_Start_Receive_IT>
 80063b4:	4603      	mov	r3, r0
 80063b6:	e000      	b.n	80063ba <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80063b8:	2302      	movs	r3, #2
  }
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3728      	adds	r7, #40	@ 0x28
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	40008000 	.word	0x40008000

080063c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b0ba      	sub	sp, #232	@ 0xe8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	69db      	ldr	r3, [r3, #28]
 80063d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80063ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80063f2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80063f6:	4013      	ands	r3, r2
 80063f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80063fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006400:	2b00      	cmp	r3, #0
 8006402:	d11b      	bne.n	800643c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006408:	f003 0320 	and.w	r3, r3, #32
 800640c:	2b00      	cmp	r3, #0
 800640e:	d015      	beq.n	800643c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006414:	f003 0320 	and.w	r3, r3, #32
 8006418:	2b00      	cmp	r3, #0
 800641a:	d105      	bne.n	8006428 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800641c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006420:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d009      	beq.n	800643c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800642c:	2b00      	cmp	r3, #0
 800642e:	f000 82e3 	beq.w	80069f8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	4798      	blx	r3
      }
      return;
 800643a:	e2dd      	b.n	80069f8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800643c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006440:	2b00      	cmp	r3, #0
 8006442:	f000 8123 	beq.w	800668c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006446:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800644a:	4b8d      	ldr	r3, [pc, #564]	@ (8006680 <HAL_UART_IRQHandler+0x2b8>)
 800644c:	4013      	ands	r3, r2
 800644e:	2b00      	cmp	r3, #0
 8006450:	d106      	bne.n	8006460 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006452:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006456:	4b8b      	ldr	r3, [pc, #556]	@ (8006684 <HAL_UART_IRQHandler+0x2bc>)
 8006458:	4013      	ands	r3, r2
 800645a:	2b00      	cmp	r3, #0
 800645c:	f000 8116 	beq.w	800668c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006464:	f003 0301 	and.w	r3, r3, #1
 8006468:	2b00      	cmp	r3, #0
 800646a:	d011      	beq.n	8006490 <HAL_UART_IRQHandler+0xc8>
 800646c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006474:	2b00      	cmp	r3, #0
 8006476:	d00b      	beq.n	8006490 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2201      	movs	r2, #1
 800647e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006486:	f043 0201 	orr.w	r2, r3, #1
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006494:	f003 0302 	and.w	r3, r3, #2
 8006498:	2b00      	cmp	r3, #0
 800649a:	d011      	beq.n	80064c0 <HAL_UART_IRQHandler+0xf8>
 800649c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064a0:	f003 0301 	and.w	r3, r3, #1
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00b      	beq.n	80064c0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2202      	movs	r2, #2
 80064ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064b6:	f043 0204 	orr.w	r2, r3, #4
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064c4:	f003 0304 	and.w	r3, r3, #4
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d011      	beq.n	80064f0 <HAL_UART_IRQHandler+0x128>
 80064cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00b      	beq.n	80064f0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2204      	movs	r2, #4
 80064de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064e6:	f043 0202 	orr.w	r2, r3, #2
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80064f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064f4:	f003 0308 	and.w	r3, r3, #8
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d017      	beq.n	800652c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80064fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006500:	f003 0320 	and.w	r3, r3, #32
 8006504:	2b00      	cmp	r3, #0
 8006506:	d105      	bne.n	8006514 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006508:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800650c:	4b5c      	ldr	r3, [pc, #368]	@ (8006680 <HAL_UART_IRQHandler+0x2b8>)
 800650e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006510:	2b00      	cmp	r3, #0
 8006512:	d00b      	beq.n	800652c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2208      	movs	r2, #8
 800651a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006522:	f043 0208 	orr.w	r2, r3, #8
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800652c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006530:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006534:	2b00      	cmp	r3, #0
 8006536:	d012      	beq.n	800655e <HAL_UART_IRQHandler+0x196>
 8006538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800653c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00c      	beq.n	800655e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800654c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006554:	f043 0220 	orr.w	r2, r3, #32
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006564:	2b00      	cmp	r3, #0
 8006566:	f000 8249 	beq.w	80069fc <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800656a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800656e:	f003 0320 	and.w	r3, r3, #32
 8006572:	2b00      	cmp	r3, #0
 8006574:	d013      	beq.n	800659e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006576:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800657a:	f003 0320 	and.w	r3, r3, #32
 800657e:	2b00      	cmp	r3, #0
 8006580:	d105      	bne.n	800658e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006586:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d007      	beq.n	800659e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006592:	2b00      	cmp	r3, #0
 8006594:	d003      	beq.n	800659e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065b2:	2b40      	cmp	r3, #64	@ 0x40
 80065b4:	d005      	beq.n	80065c2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80065b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80065ba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d054      	beq.n	800666c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f001 f81c 	bl	8007600 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065d2:	2b40      	cmp	r3, #64	@ 0x40
 80065d4:	d146      	bne.n	8006664 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	3308      	adds	r3, #8
 80065dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80065e4:	e853 3f00 	ldrex	r3, [r3]
 80065e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80065ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80065f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	3308      	adds	r3, #8
 80065fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006602:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006606:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800660e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006612:	e841 2300 	strex	r3, r2, [r1]
 8006616:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800661a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1d9      	bne.n	80065d6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006628:	2b00      	cmp	r3, #0
 800662a:	d017      	beq.n	800665c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006632:	4a15      	ldr	r2, [pc, #84]	@ (8006688 <HAL_UART_IRQHandler+0x2c0>)
 8006634:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800663c:	4618      	mov	r0, r3
 800663e:	f7fc fbbf 	bl	8002dc0 <HAL_DMA_Abort_IT>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d019      	beq.n	800667c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800664e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8006656:	4610      	mov	r0, r2
 8006658:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800665a:	e00f      	b.n	800667c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f000 f9e1 	bl	8006a24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006662:	e00b      	b.n	800667c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 f9dd 	bl	8006a24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800666a:	e007      	b.n	800667c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800666c:	6878      	ldr	r0, [r7, #4]
 800666e:	f000 f9d9 	bl	8006a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800667a:	e1bf      	b.n	80069fc <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800667c:	bf00      	nop
    return;
 800667e:	e1bd      	b.n	80069fc <HAL_UART_IRQHandler+0x634>
 8006680:	10000001 	.word	0x10000001
 8006684:	04000120 	.word	0x04000120
 8006688:	080076cd 	.word	0x080076cd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006690:	2b01      	cmp	r3, #1
 8006692:	f040 8153 	bne.w	800693c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800669a:	f003 0310 	and.w	r3, r3, #16
 800669e:	2b00      	cmp	r3, #0
 80066a0:	f000 814c 	beq.w	800693c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80066a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066a8:	f003 0310 	and.w	r3, r3, #16
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	f000 8145 	beq.w	800693c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2210      	movs	r2, #16
 80066b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066c4:	2b40      	cmp	r3, #64	@ 0x40
 80066c6:	f040 80bb 	bne.w	8006840 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80066d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f000 818f 	beq.w	8006a00 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80066e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80066ec:	429a      	cmp	r2, r3
 80066ee:	f080 8187 	bcs.w	8006a00 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80066f8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0320 	and.w	r3, r3, #32
 800670a:	2b00      	cmp	r3, #0
 800670c:	f040 8087 	bne.w	800681e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006718:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800671c:	e853 3f00 	ldrex	r3, [r3]
 8006720:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006724:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006728:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800672c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	461a      	mov	r2, r3
 8006736:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800673a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800673e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006742:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006746:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800674a:	e841 2300 	strex	r3, r2, [r1]
 800674e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006752:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006756:	2b00      	cmp	r3, #0
 8006758:	d1da      	bne.n	8006710 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	3308      	adds	r3, #8
 8006760:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006762:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006764:	e853 3f00 	ldrex	r3, [r3]
 8006768:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800676a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800676c:	f023 0301 	bic.w	r3, r3, #1
 8006770:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	3308      	adds	r3, #8
 800677a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800677e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006782:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006784:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006786:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800678a:	e841 2300 	strex	r3, r2, [r1]
 800678e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006790:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1e1      	bne.n	800675a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	3308      	adds	r3, #8
 800679c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80067a0:	e853 3f00 	ldrex	r3, [r3]
 80067a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80067a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80067a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	3308      	adds	r3, #8
 80067b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80067ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80067bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067be:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80067c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80067c2:	e841 2300 	strex	r3, r2, [r1]
 80067c6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80067c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1e3      	bne.n	8006796 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2220      	movs	r2, #32
 80067d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067e4:	e853 3f00 	ldrex	r3, [r3]
 80067e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80067ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80067ec:	f023 0310 	bic.w	r3, r3, #16
 80067f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	461a      	mov	r2, r3
 80067fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80067fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006800:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006802:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006804:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006806:	e841 2300 	strex	r3, r2, [r1]
 800680a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800680c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800680e:	2b00      	cmp	r3, #0
 8006810:	d1e4      	bne.n	80067dc <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006818:	4618      	mov	r0, r3
 800681a:	f7fc fa78 	bl	8002d0e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2202      	movs	r2, #2
 8006822:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006830:	b29b      	uxth	r3, r3
 8006832:	1ad3      	subs	r3, r2, r3
 8006834:	b29b      	uxth	r3, r3
 8006836:	4619      	mov	r1, r3
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 f8fd 	bl	8006a38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800683e:	e0df      	b.n	8006a00 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800684c:	b29b      	uxth	r3, r3
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800685a:	b29b      	uxth	r3, r3
 800685c:	2b00      	cmp	r3, #0
 800685e:	f000 80d1 	beq.w	8006a04 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8006862:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006866:	2b00      	cmp	r3, #0
 8006868:	f000 80cc 	beq.w	8006a04 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006874:	e853 3f00 	ldrex	r3, [r3]
 8006878:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800687a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800687c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006880:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	461a      	mov	r2, r3
 800688a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800688e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006890:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006892:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006894:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006896:	e841 2300 	strex	r3, r2, [r1]
 800689a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800689c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1e4      	bne.n	800686c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	3308      	adds	r3, #8
 80068a8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068ac:	e853 3f00 	ldrex	r3, [r3]
 80068b0:	623b      	str	r3, [r7, #32]
   return(result);
 80068b2:	6a3b      	ldr	r3, [r7, #32]
 80068b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068b8:	f023 0301 	bic.w	r3, r3, #1
 80068bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	3308      	adds	r3, #8
 80068c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80068ca:	633a      	str	r2, [r7, #48]	@ 0x30
 80068cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068d2:	e841 2300 	strex	r3, r2, [r1]
 80068d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80068d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1e1      	bne.n	80068a2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2220      	movs	r2, #32
 80068e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2200      	movs	r2, #0
 80068f0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	e853 3f00 	ldrex	r3, [r3]
 80068fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f023 0310 	bic.w	r3, r3, #16
 8006906:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	461a      	mov	r2, r3
 8006910:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006914:	61fb      	str	r3, [r7, #28]
 8006916:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006918:	69b9      	ldr	r1, [r7, #24]
 800691a:	69fa      	ldr	r2, [r7, #28]
 800691c:	e841 2300 	strex	r3, r2, [r1]
 8006920:	617b      	str	r3, [r7, #20]
   return(result);
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1e4      	bne.n	80068f2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2202      	movs	r2, #2
 800692c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800692e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006932:	4619      	mov	r1, r3
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 f87f 	bl	8006a38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800693a:	e063      	b.n	8006a04 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800693c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006940:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00e      	beq.n	8006966 <HAL_UART_IRQHandler+0x59e>
 8006948:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800694c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006950:	2b00      	cmp	r3, #0
 8006952:	d008      	beq.n	8006966 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800695c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f001 fc12 	bl	8008188 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006964:	e051      	b.n	8006a0a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800696a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800696e:	2b00      	cmp	r3, #0
 8006970:	d014      	beq.n	800699c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006972:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006976:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800697a:	2b00      	cmp	r3, #0
 800697c:	d105      	bne.n	800698a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800697e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006982:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d008      	beq.n	800699c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800698e:	2b00      	cmp	r3, #0
 8006990:	d03a      	beq.n	8006a08 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	4798      	blx	r3
    }
    return;
 800699a:	e035      	b.n	8006a08 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800699c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d009      	beq.n	80069bc <HAL_UART_IRQHandler+0x5f4>
 80069a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d003      	beq.n	80069bc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f000 fe9f 	bl	80076f8 <UART_EndTransmit_IT>
    return;
 80069ba:	e026      	b.n	8006a0a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80069bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d009      	beq.n	80069dc <HAL_UART_IRQHandler+0x614>
 80069c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069cc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d003      	beq.n	80069dc <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f001 fbeb 	bl	80081b0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80069da:	e016      	b.n	8006a0a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80069dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d010      	beq.n	8006a0a <HAL_UART_IRQHandler+0x642>
 80069e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	da0c      	bge.n	8006a0a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f001 fbd3 	bl	800819c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80069f6:	e008      	b.n	8006a0a <HAL_UART_IRQHandler+0x642>
      return;
 80069f8:	bf00      	nop
 80069fa:	e006      	b.n	8006a0a <HAL_UART_IRQHandler+0x642>
    return;
 80069fc:	bf00      	nop
 80069fe:	e004      	b.n	8006a0a <HAL_UART_IRQHandler+0x642>
      return;
 8006a00:	bf00      	nop
 8006a02:	e002      	b.n	8006a0a <HAL_UART_IRQHandler+0x642>
      return;
 8006a04:	bf00      	nop
 8006a06:	e000      	b.n	8006a0a <HAL_UART_IRQHandler+0x642>
    return;
 8006a08:	bf00      	nop
  }
}
 8006a0a:	37e8      	adds	r7, #232	@ 0xe8
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}

08006a10 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006a18:	bf00      	nop
 8006a1a:	370c      	adds	r7, #12
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006a2c:	bf00      	nop
 8006a2e:	370c      	adds	r7, #12
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr

08006a38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	460b      	mov	r3, r1
 8006a42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a44:	bf00      	nop
 8006a46:	370c      	adds	r7, #12
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr

08006a50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a54:	b08c      	sub	sp, #48	@ 0x30
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	689a      	ldr	r2, [r3, #8]
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	431a      	orrs	r2, r3
 8006a6a:	697b      	ldr	r3, [r7, #20]
 8006a6c:	695b      	ldr	r3, [r3, #20]
 8006a6e:	431a      	orrs	r2, r3
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	69db      	ldr	r3, [r3, #28]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	4baa      	ldr	r3, [pc, #680]	@ (8006d28 <UART_SetConfig+0x2d8>)
 8006a80:	4013      	ands	r3, r2
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	6812      	ldr	r2, [r2, #0]
 8006a86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a88:	430b      	orrs	r3, r1
 8006a8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	68da      	ldr	r2, [r3, #12]
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	430a      	orrs	r2, r1
 8006aa0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	699b      	ldr	r3, [r3, #24]
 8006aa6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a9f      	ldr	r2, [pc, #636]	@ (8006d2c <UART_SetConfig+0x2dc>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d004      	beq.n	8006abc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006abc:	697b      	ldr	r3, [r7, #20]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006ac6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	6812      	ldr	r2, [r2, #0]
 8006ace:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ad0:	430b      	orrs	r3, r1
 8006ad2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ada:	f023 010f 	bic.w	r1, r3, #15
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	430a      	orrs	r2, r1
 8006ae8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a90      	ldr	r2, [pc, #576]	@ (8006d30 <UART_SetConfig+0x2e0>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d125      	bne.n	8006b40 <UART_SetConfig+0xf0>
 8006af4:	4b8f      	ldr	r3, [pc, #572]	@ (8006d34 <UART_SetConfig+0x2e4>)
 8006af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006afa:	f003 0303 	and.w	r3, r3, #3
 8006afe:	2b03      	cmp	r3, #3
 8006b00:	d81a      	bhi.n	8006b38 <UART_SetConfig+0xe8>
 8006b02:	a201      	add	r2, pc, #4	@ (adr r2, 8006b08 <UART_SetConfig+0xb8>)
 8006b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b08:	08006b19 	.word	0x08006b19
 8006b0c:	08006b29 	.word	0x08006b29
 8006b10:	08006b21 	.word	0x08006b21
 8006b14:	08006b31 	.word	0x08006b31
 8006b18:	2301      	movs	r3, #1
 8006b1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b1e:	e116      	b.n	8006d4e <UART_SetConfig+0x2fe>
 8006b20:	2302      	movs	r3, #2
 8006b22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b26:	e112      	b.n	8006d4e <UART_SetConfig+0x2fe>
 8006b28:	2304      	movs	r3, #4
 8006b2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b2e:	e10e      	b.n	8006d4e <UART_SetConfig+0x2fe>
 8006b30:	2308      	movs	r3, #8
 8006b32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b36:	e10a      	b.n	8006d4e <UART_SetConfig+0x2fe>
 8006b38:	2310      	movs	r3, #16
 8006b3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b3e:	e106      	b.n	8006d4e <UART_SetConfig+0x2fe>
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4a7c      	ldr	r2, [pc, #496]	@ (8006d38 <UART_SetConfig+0x2e8>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d138      	bne.n	8006bbc <UART_SetConfig+0x16c>
 8006b4a:	4b7a      	ldr	r3, [pc, #488]	@ (8006d34 <UART_SetConfig+0x2e4>)
 8006b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b50:	f003 030c 	and.w	r3, r3, #12
 8006b54:	2b0c      	cmp	r3, #12
 8006b56:	d82d      	bhi.n	8006bb4 <UART_SetConfig+0x164>
 8006b58:	a201      	add	r2, pc, #4	@ (adr r2, 8006b60 <UART_SetConfig+0x110>)
 8006b5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b5e:	bf00      	nop
 8006b60:	08006b95 	.word	0x08006b95
 8006b64:	08006bb5 	.word	0x08006bb5
 8006b68:	08006bb5 	.word	0x08006bb5
 8006b6c:	08006bb5 	.word	0x08006bb5
 8006b70:	08006ba5 	.word	0x08006ba5
 8006b74:	08006bb5 	.word	0x08006bb5
 8006b78:	08006bb5 	.word	0x08006bb5
 8006b7c:	08006bb5 	.word	0x08006bb5
 8006b80:	08006b9d 	.word	0x08006b9d
 8006b84:	08006bb5 	.word	0x08006bb5
 8006b88:	08006bb5 	.word	0x08006bb5
 8006b8c:	08006bb5 	.word	0x08006bb5
 8006b90:	08006bad 	.word	0x08006bad
 8006b94:	2300      	movs	r3, #0
 8006b96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006b9a:	e0d8      	b.n	8006d4e <UART_SetConfig+0x2fe>
 8006b9c:	2302      	movs	r3, #2
 8006b9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ba2:	e0d4      	b.n	8006d4e <UART_SetConfig+0x2fe>
 8006ba4:	2304      	movs	r3, #4
 8006ba6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006baa:	e0d0      	b.n	8006d4e <UART_SetConfig+0x2fe>
 8006bac:	2308      	movs	r3, #8
 8006bae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bb2:	e0cc      	b.n	8006d4e <UART_SetConfig+0x2fe>
 8006bb4:	2310      	movs	r3, #16
 8006bb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bba:	e0c8      	b.n	8006d4e <UART_SetConfig+0x2fe>
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a5e      	ldr	r2, [pc, #376]	@ (8006d3c <UART_SetConfig+0x2ec>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d125      	bne.n	8006c12 <UART_SetConfig+0x1c2>
 8006bc6:	4b5b      	ldr	r3, [pc, #364]	@ (8006d34 <UART_SetConfig+0x2e4>)
 8006bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bcc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006bd0:	2b30      	cmp	r3, #48	@ 0x30
 8006bd2:	d016      	beq.n	8006c02 <UART_SetConfig+0x1b2>
 8006bd4:	2b30      	cmp	r3, #48	@ 0x30
 8006bd6:	d818      	bhi.n	8006c0a <UART_SetConfig+0x1ba>
 8006bd8:	2b20      	cmp	r3, #32
 8006bda:	d00a      	beq.n	8006bf2 <UART_SetConfig+0x1a2>
 8006bdc:	2b20      	cmp	r3, #32
 8006bde:	d814      	bhi.n	8006c0a <UART_SetConfig+0x1ba>
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d002      	beq.n	8006bea <UART_SetConfig+0x19a>
 8006be4:	2b10      	cmp	r3, #16
 8006be6:	d008      	beq.n	8006bfa <UART_SetConfig+0x1aa>
 8006be8:	e00f      	b.n	8006c0a <UART_SetConfig+0x1ba>
 8006bea:	2300      	movs	r3, #0
 8006bec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bf0:	e0ad      	b.n	8006d4e <UART_SetConfig+0x2fe>
 8006bf2:	2302      	movs	r3, #2
 8006bf4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006bf8:	e0a9      	b.n	8006d4e <UART_SetConfig+0x2fe>
 8006bfa:	2304      	movs	r3, #4
 8006bfc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c00:	e0a5      	b.n	8006d4e <UART_SetConfig+0x2fe>
 8006c02:	2308      	movs	r3, #8
 8006c04:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c08:	e0a1      	b.n	8006d4e <UART_SetConfig+0x2fe>
 8006c0a:	2310      	movs	r3, #16
 8006c0c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c10:	e09d      	b.n	8006d4e <UART_SetConfig+0x2fe>
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a4a      	ldr	r2, [pc, #296]	@ (8006d40 <UART_SetConfig+0x2f0>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d125      	bne.n	8006c68 <UART_SetConfig+0x218>
 8006c1c:	4b45      	ldr	r3, [pc, #276]	@ (8006d34 <UART_SetConfig+0x2e4>)
 8006c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c22:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006c26:	2bc0      	cmp	r3, #192	@ 0xc0
 8006c28:	d016      	beq.n	8006c58 <UART_SetConfig+0x208>
 8006c2a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006c2c:	d818      	bhi.n	8006c60 <UART_SetConfig+0x210>
 8006c2e:	2b80      	cmp	r3, #128	@ 0x80
 8006c30:	d00a      	beq.n	8006c48 <UART_SetConfig+0x1f8>
 8006c32:	2b80      	cmp	r3, #128	@ 0x80
 8006c34:	d814      	bhi.n	8006c60 <UART_SetConfig+0x210>
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d002      	beq.n	8006c40 <UART_SetConfig+0x1f0>
 8006c3a:	2b40      	cmp	r3, #64	@ 0x40
 8006c3c:	d008      	beq.n	8006c50 <UART_SetConfig+0x200>
 8006c3e:	e00f      	b.n	8006c60 <UART_SetConfig+0x210>
 8006c40:	2300      	movs	r3, #0
 8006c42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c46:	e082      	b.n	8006d4e <UART_SetConfig+0x2fe>
 8006c48:	2302      	movs	r3, #2
 8006c4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c4e:	e07e      	b.n	8006d4e <UART_SetConfig+0x2fe>
 8006c50:	2304      	movs	r3, #4
 8006c52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c56:	e07a      	b.n	8006d4e <UART_SetConfig+0x2fe>
 8006c58:	2308      	movs	r3, #8
 8006c5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c5e:	e076      	b.n	8006d4e <UART_SetConfig+0x2fe>
 8006c60:	2310      	movs	r3, #16
 8006c62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006c66:	e072      	b.n	8006d4e <UART_SetConfig+0x2fe>
 8006c68:	697b      	ldr	r3, [r7, #20]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a35      	ldr	r2, [pc, #212]	@ (8006d44 <UART_SetConfig+0x2f4>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d12a      	bne.n	8006cc8 <UART_SetConfig+0x278>
 8006c72:	4b30      	ldr	r3, [pc, #192]	@ (8006d34 <UART_SetConfig+0x2e4>)
 8006c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c78:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c80:	d01a      	beq.n	8006cb8 <UART_SetConfig+0x268>
 8006c82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006c86:	d81b      	bhi.n	8006cc0 <UART_SetConfig+0x270>
 8006c88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c8c:	d00c      	beq.n	8006ca8 <UART_SetConfig+0x258>
 8006c8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c92:	d815      	bhi.n	8006cc0 <UART_SetConfig+0x270>
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d003      	beq.n	8006ca0 <UART_SetConfig+0x250>
 8006c98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c9c:	d008      	beq.n	8006cb0 <UART_SetConfig+0x260>
 8006c9e:	e00f      	b.n	8006cc0 <UART_SetConfig+0x270>
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ca6:	e052      	b.n	8006d4e <UART_SetConfig+0x2fe>
 8006ca8:	2302      	movs	r3, #2
 8006caa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cae:	e04e      	b.n	8006d4e <UART_SetConfig+0x2fe>
 8006cb0:	2304      	movs	r3, #4
 8006cb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cb6:	e04a      	b.n	8006d4e <UART_SetConfig+0x2fe>
 8006cb8:	2308      	movs	r3, #8
 8006cba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cbe:	e046      	b.n	8006d4e <UART_SetConfig+0x2fe>
 8006cc0:	2310      	movs	r3, #16
 8006cc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006cc6:	e042      	b.n	8006d4e <UART_SetConfig+0x2fe>
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a17      	ldr	r2, [pc, #92]	@ (8006d2c <UART_SetConfig+0x2dc>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d13a      	bne.n	8006d48 <UART_SetConfig+0x2f8>
 8006cd2:	4b18      	ldr	r3, [pc, #96]	@ (8006d34 <UART_SetConfig+0x2e4>)
 8006cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006cd8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006cdc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ce0:	d01a      	beq.n	8006d18 <UART_SetConfig+0x2c8>
 8006ce2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006ce6:	d81b      	bhi.n	8006d20 <UART_SetConfig+0x2d0>
 8006ce8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cec:	d00c      	beq.n	8006d08 <UART_SetConfig+0x2b8>
 8006cee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cf2:	d815      	bhi.n	8006d20 <UART_SetConfig+0x2d0>
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d003      	beq.n	8006d00 <UART_SetConfig+0x2b0>
 8006cf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006cfc:	d008      	beq.n	8006d10 <UART_SetConfig+0x2c0>
 8006cfe:	e00f      	b.n	8006d20 <UART_SetConfig+0x2d0>
 8006d00:	2300      	movs	r3, #0
 8006d02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d06:	e022      	b.n	8006d4e <UART_SetConfig+0x2fe>
 8006d08:	2302      	movs	r3, #2
 8006d0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d0e:	e01e      	b.n	8006d4e <UART_SetConfig+0x2fe>
 8006d10:	2304      	movs	r3, #4
 8006d12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d16:	e01a      	b.n	8006d4e <UART_SetConfig+0x2fe>
 8006d18:	2308      	movs	r3, #8
 8006d1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d1e:	e016      	b.n	8006d4e <UART_SetConfig+0x2fe>
 8006d20:	2310      	movs	r3, #16
 8006d22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006d26:	e012      	b.n	8006d4e <UART_SetConfig+0x2fe>
 8006d28:	cfff69f3 	.word	0xcfff69f3
 8006d2c:	40008000 	.word	0x40008000
 8006d30:	40013800 	.word	0x40013800
 8006d34:	40021000 	.word	0x40021000
 8006d38:	40004400 	.word	0x40004400
 8006d3c:	40004800 	.word	0x40004800
 8006d40:	40004c00 	.word	0x40004c00
 8006d44:	40005000 	.word	0x40005000
 8006d48:	2310      	movs	r3, #16
 8006d4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4aae      	ldr	r2, [pc, #696]	@ (800700c <UART_SetConfig+0x5bc>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	f040 8097 	bne.w	8006e88 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d5a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006d5e:	2b08      	cmp	r3, #8
 8006d60:	d823      	bhi.n	8006daa <UART_SetConfig+0x35a>
 8006d62:	a201      	add	r2, pc, #4	@ (adr r2, 8006d68 <UART_SetConfig+0x318>)
 8006d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d68:	08006d8d 	.word	0x08006d8d
 8006d6c:	08006dab 	.word	0x08006dab
 8006d70:	08006d95 	.word	0x08006d95
 8006d74:	08006dab 	.word	0x08006dab
 8006d78:	08006d9b 	.word	0x08006d9b
 8006d7c:	08006dab 	.word	0x08006dab
 8006d80:	08006dab 	.word	0x08006dab
 8006d84:	08006dab 	.word	0x08006dab
 8006d88:	08006da3 	.word	0x08006da3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d8c:	f7fe ff32 	bl	8005bf4 <HAL_RCC_GetPCLK1Freq>
 8006d90:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006d92:	e010      	b.n	8006db6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d94:	4b9e      	ldr	r3, [pc, #632]	@ (8007010 <UART_SetConfig+0x5c0>)
 8006d96:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006d98:	e00d      	b.n	8006db6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d9a:	f7fe febd 	bl	8005b18 <HAL_RCC_GetSysClockFreq>
 8006d9e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006da0:	e009      	b.n	8006db6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006da2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006da6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006da8:	e005      	b.n	8006db6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006daa:	2300      	movs	r3, #0
 8006dac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006db4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	f000 8130 	beq.w	800701e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc2:	4a94      	ldr	r2, [pc, #592]	@ (8007014 <UART_SetConfig+0x5c4>)
 8006dc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dc8:	461a      	mov	r2, r3
 8006dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dcc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006dd0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	685a      	ldr	r2, [r3, #4]
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	005b      	lsls	r3, r3, #1
 8006dda:	4413      	add	r3, r2
 8006ddc:	69ba      	ldr	r2, [r7, #24]
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d305      	bcc.n	8006dee <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006de8:	69ba      	ldr	r2, [r7, #24]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d903      	bls.n	8006df6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006df4:	e113      	b.n	800701e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df8:	2200      	movs	r2, #0
 8006dfa:	60bb      	str	r3, [r7, #8]
 8006dfc:	60fa      	str	r2, [r7, #12]
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e02:	4a84      	ldr	r2, [pc, #528]	@ (8007014 <UART_SetConfig+0x5c4>)
 8006e04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	603b      	str	r3, [r7, #0]
 8006e0e:	607a      	str	r2, [r7, #4]
 8006e10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e14:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006e18:	f7f9 f9fe 	bl	8000218 <__aeabi_uldivmod>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	460b      	mov	r3, r1
 8006e20:	4610      	mov	r0, r2
 8006e22:	4619      	mov	r1, r3
 8006e24:	f04f 0200 	mov.w	r2, #0
 8006e28:	f04f 0300 	mov.w	r3, #0
 8006e2c:	020b      	lsls	r3, r1, #8
 8006e2e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006e32:	0202      	lsls	r2, r0, #8
 8006e34:	6979      	ldr	r1, [r7, #20]
 8006e36:	6849      	ldr	r1, [r1, #4]
 8006e38:	0849      	lsrs	r1, r1, #1
 8006e3a:	2000      	movs	r0, #0
 8006e3c:	460c      	mov	r4, r1
 8006e3e:	4605      	mov	r5, r0
 8006e40:	eb12 0804 	adds.w	r8, r2, r4
 8006e44:	eb43 0905 	adc.w	r9, r3, r5
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	469a      	mov	sl, r3
 8006e50:	4693      	mov	fp, r2
 8006e52:	4652      	mov	r2, sl
 8006e54:	465b      	mov	r3, fp
 8006e56:	4640      	mov	r0, r8
 8006e58:	4649      	mov	r1, r9
 8006e5a:	f7f9 f9dd 	bl	8000218 <__aeabi_uldivmod>
 8006e5e:	4602      	mov	r2, r0
 8006e60:	460b      	mov	r3, r1
 8006e62:	4613      	mov	r3, r2
 8006e64:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e66:	6a3b      	ldr	r3, [r7, #32]
 8006e68:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e6c:	d308      	bcc.n	8006e80 <UART_SetConfig+0x430>
 8006e6e:	6a3b      	ldr	r3, [r7, #32]
 8006e70:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e74:	d204      	bcs.n	8006e80 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	6a3a      	ldr	r2, [r7, #32]
 8006e7c:	60da      	str	r2, [r3, #12]
 8006e7e:	e0ce      	b.n	800701e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006e86:	e0ca      	b.n	800701e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	69db      	ldr	r3, [r3, #28]
 8006e8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e90:	d166      	bne.n	8006f60 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006e92:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006e96:	2b08      	cmp	r3, #8
 8006e98:	d827      	bhi.n	8006eea <UART_SetConfig+0x49a>
 8006e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8006ea0 <UART_SetConfig+0x450>)
 8006e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea0:	08006ec5 	.word	0x08006ec5
 8006ea4:	08006ecd 	.word	0x08006ecd
 8006ea8:	08006ed5 	.word	0x08006ed5
 8006eac:	08006eeb 	.word	0x08006eeb
 8006eb0:	08006edb 	.word	0x08006edb
 8006eb4:	08006eeb 	.word	0x08006eeb
 8006eb8:	08006eeb 	.word	0x08006eeb
 8006ebc:	08006eeb 	.word	0x08006eeb
 8006ec0:	08006ee3 	.word	0x08006ee3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ec4:	f7fe fe96 	bl	8005bf4 <HAL_RCC_GetPCLK1Freq>
 8006ec8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006eca:	e014      	b.n	8006ef6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ecc:	f7fe fea8 	bl	8005c20 <HAL_RCC_GetPCLK2Freq>
 8006ed0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ed2:	e010      	b.n	8006ef6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ed4:	4b4e      	ldr	r3, [pc, #312]	@ (8007010 <UART_SetConfig+0x5c0>)
 8006ed6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ed8:	e00d      	b.n	8006ef6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006eda:	f7fe fe1d 	bl	8005b18 <HAL_RCC_GetSysClockFreq>
 8006ede:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006ee0:	e009      	b.n	8006ef6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ee2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ee6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006ee8:	e005      	b.n	8006ef6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006eea:	2300      	movs	r3, #0
 8006eec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006eee:	2301      	movs	r3, #1
 8006ef0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006ef4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	f000 8090 	beq.w	800701e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f02:	4a44      	ldr	r2, [pc, #272]	@ (8007014 <UART_SetConfig+0x5c4>)
 8006f04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f08:	461a      	mov	r2, r3
 8006f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f10:	005a      	lsls	r2, r3, #1
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	085b      	lsrs	r3, r3, #1
 8006f18:	441a      	add	r2, r3
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f22:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f24:	6a3b      	ldr	r3, [r7, #32]
 8006f26:	2b0f      	cmp	r3, #15
 8006f28:	d916      	bls.n	8006f58 <UART_SetConfig+0x508>
 8006f2a:	6a3b      	ldr	r3, [r7, #32]
 8006f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f30:	d212      	bcs.n	8006f58 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f32:	6a3b      	ldr	r3, [r7, #32]
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	f023 030f 	bic.w	r3, r3, #15
 8006f3a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f3c:	6a3b      	ldr	r3, [r7, #32]
 8006f3e:	085b      	lsrs	r3, r3, #1
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	f003 0307 	and.w	r3, r3, #7
 8006f46:	b29a      	uxth	r2, r3
 8006f48:	8bfb      	ldrh	r3, [r7, #30]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	8bfa      	ldrh	r2, [r7, #30]
 8006f54:	60da      	str	r2, [r3, #12]
 8006f56:	e062      	b.n	800701e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006f5e:	e05e      	b.n	800701e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f60:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006f64:	2b08      	cmp	r3, #8
 8006f66:	d828      	bhi.n	8006fba <UART_SetConfig+0x56a>
 8006f68:	a201      	add	r2, pc, #4	@ (adr r2, 8006f70 <UART_SetConfig+0x520>)
 8006f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6e:	bf00      	nop
 8006f70:	08006f95 	.word	0x08006f95
 8006f74:	08006f9d 	.word	0x08006f9d
 8006f78:	08006fa5 	.word	0x08006fa5
 8006f7c:	08006fbb 	.word	0x08006fbb
 8006f80:	08006fab 	.word	0x08006fab
 8006f84:	08006fbb 	.word	0x08006fbb
 8006f88:	08006fbb 	.word	0x08006fbb
 8006f8c:	08006fbb 	.word	0x08006fbb
 8006f90:	08006fb3 	.word	0x08006fb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f94:	f7fe fe2e 	bl	8005bf4 <HAL_RCC_GetPCLK1Freq>
 8006f98:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006f9a:	e014      	b.n	8006fc6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f9c:	f7fe fe40 	bl	8005c20 <HAL_RCC_GetPCLK2Freq>
 8006fa0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006fa2:	e010      	b.n	8006fc6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8007010 <UART_SetConfig+0x5c0>)
 8006fa6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006fa8:	e00d      	b.n	8006fc6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006faa:	f7fe fdb5 	bl	8005b18 <HAL_RCC_GetSysClockFreq>
 8006fae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006fb0:	e009      	b.n	8006fc6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fb2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006fb6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006fb8:	e005      	b.n	8006fc6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006fc4:	bf00      	nop
    }

    if (pclk != 0U)
 8006fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d028      	beq.n	800701e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fd0:	4a10      	ldr	r2, [pc, #64]	@ (8007014 <UART_SetConfig+0x5c4>)
 8006fd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fda:	fbb3 f2f2 	udiv	r2, r3, r2
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	085b      	lsrs	r3, r3, #1
 8006fe4:	441a      	add	r2, r3
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ff0:	6a3b      	ldr	r3, [r7, #32]
 8006ff2:	2b0f      	cmp	r3, #15
 8006ff4:	d910      	bls.n	8007018 <UART_SetConfig+0x5c8>
 8006ff6:	6a3b      	ldr	r3, [r7, #32]
 8006ff8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ffc:	d20c      	bcs.n	8007018 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ffe:	6a3b      	ldr	r3, [r7, #32]
 8007000:	b29a      	uxth	r2, r3
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	60da      	str	r2, [r3, #12]
 8007008:	e009      	b.n	800701e <UART_SetConfig+0x5ce>
 800700a:	bf00      	nop
 800700c:	40008000 	.word	0x40008000
 8007010:	00f42400 	.word	0x00f42400
 8007014:	08008454 	.word	0x08008454
      }
      else
      {
        ret = HAL_ERROR;
 8007018:	2301      	movs	r3, #1
 800701a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	2201      	movs	r2, #1
 8007022:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007026:	697b      	ldr	r3, [r7, #20]
 8007028:	2201      	movs	r2, #1
 800702a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	2200      	movs	r2, #0
 8007032:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	2200      	movs	r2, #0
 8007038:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800703a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800703e:	4618      	mov	r0, r3
 8007040:	3730      	adds	r7, #48	@ 0x30
 8007042:	46bd      	mov	sp, r7
 8007044:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007048 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007054:	f003 0308 	and.w	r3, r3, #8
 8007058:	2b00      	cmp	r3, #0
 800705a:	d00a      	beq.n	8007072 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	430a      	orrs	r2, r1
 8007070:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007076:	f003 0301 	and.w	r3, r3, #1
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00a      	beq.n	8007094 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	430a      	orrs	r2, r1
 8007092:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007098:	f003 0302 	and.w	r3, r3, #2
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00a      	beq.n	80070b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	430a      	orrs	r2, r1
 80070b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ba:	f003 0304 	and.w	r3, r3, #4
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00a      	beq.n	80070d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	430a      	orrs	r2, r1
 80070d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070dc:	f003 0310 	and.w	r3, r3, #16
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00a      	beq.n	80070fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	689b      	ldr	r3, [r3, #8]
 80070ea:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	430a      	orrs	r2, r1
 80070f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070fe:	f003 0320 	and.w	r3, r3, #32
 8007102:	2b00      	cmp	r3, #0
 8007104:	d00a      	beq.n	800711c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	430a      	orrs	r2, r1
 800711a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007120:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007124:	2b00      	cmp	r3, #0
 8007126:	d01a      	beq.n	800715e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	685b      	ldr	r3, [r3, #4]
 800712e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	430a      	orrs	r2, r1
 800713c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007142:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007146:	d10a      	bne.n	800715e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	430a      	orrs	r2, r1
 800715c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007162:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00a      	beq.n	8007180 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	685b      	ldr	r3, [r3, #4]
 8007170:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	430a      	orrs	r2, r1
 800717e:	605a      	str	r2, [r3, #4]
  }
}
 8007180:	bf00      	nop
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b098      	sub	sp, #96	@ 0x60
 8007190:	af02      	add	r7, sp, #8
 8007192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800719c:	f7f9 fff2 	bl	8001184 <HAL_GetTick>
 80071a0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 0308 	and.w	r3, r3, #8
 80071ac:	2b08      	cmp	r3, #8
 80071ae:	d12f      	bne.n	8007210 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071b0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80071b4:	9300      	str	r3, [sp, #0]
 80071b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071b8:	2200      	movs	r2, #0
 80071ba:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 f88e 	bl	80072e0 <UART_WaitOnFlagUntilTimeout>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d022      	beq.n	8007210 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071d2:	e853 3f00 	ldrex	r3, [r3]
 80071d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80071d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80071de:	653b      	str	r3, [r7, #80]	@ 0x50
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	461a      	mov	r2, r3
 80071e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80071ea:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80071ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071f0:	e841 2300 	strex	r3, r2, [r1]
 80071f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80071f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d1e6      	bne.n	80071ca <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2220      	movs	r2, #32
 8007200:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2200      	movs	r2, #0
 8007208:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800720c:	2303      	movs	r3, #3
 800720e:	e063      	b.n	80072d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f003 0304 	and.w	r3, r3, #4
 800721a:	2b04      	cmp	r3, #4
 800721c:	d149      	bne.n	80072b2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800721e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007222:	9300      	str	r3, [sp, #0]
 8007224:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007226:	2200      	movs	r2, #0
 8007228:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800722c:	6878      	ldr	r0, [r7, #4]
 800722e:	f000 f857 	bl	80072e0 <UART_WaitOnFlagUntilTimeout>
 8007232:	4603      	mov	r3, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d03c      	beq.n	80072b2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007240:	e853 3f00 	ldrex	r3, [r3]
 8007244:	623b      	str	r3, [r7, #32]
   return(result);
 8007246:	6a3b      	ldr	r3, [r7, #32]
 8007248:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800724c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	461a      	mov	r2, r3
 8007254:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007256:	633b      	str	r3, [r7, #48]	@ 0x30
 8007258:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800725a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800725c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800725e:	e841 2300 	strex	r3, r2, [r1]
 8007262:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1e6      	bne.n	8007238 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	3308      	adds	r3, #8
 8007270:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	e853 3f00 	ldrex	r3, [r3]
 8007278:	60fb      	str	r3, [r7, #12]
   return(result);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f023 0301 	bic.w	r3, r3, #1
 8007280:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	3308      	adds	r3, #8
 8007288:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800728a:	61fa      	str	r2, [r7, #28]
 800728c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728e:	69b9      	ldr	r1, [r7, #24]
 8007290:	69fa      	ldr	r2, [r7, #28]
 8007292:	e841 2300 	strex	r3, r2, [r1]
 8007296:	617b      	str	r3, [r7, #20]
   return(result);
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1e5      	bne.n	800726a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2220      	movs	r2, #32
 80072a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80072ae:	2303      	movs	r3, #3
 80072b0:	e012      	b.n	80072d8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2220      	movs	r2, #32
 80072b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2220      	movs	r2, #32
 80072be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2200      	movs	r2, #0
 80072cc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3758      	adds	r7, #88	@ 0x58
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}

080072e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	603b      	str	r3, [r7, #0]
 80072ec:	4613      	mov	r3, r2
 80072ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072f0:	e04f      	b.n	8007392 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072f2:	69bb      	ldr	r3, [r7, #24]
 80072f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072f8:	d04b      	beq.n	8007392 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072fa:	f7f9 ff43 	bl	8001184 <HAL_GetTick>
 80072fe:	4602      	mov	r2, r0
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	1ad3      	subs	r3, r2, r3
 8007304:	69ba      	ldr	r2, [r7, #24]
 8007306:	429a      	cmp	r2, r3
 8007308:	d302      	bcc.n	8007310 <UART_WaitOnFlagUntilTimeout+0x30>
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d101      	bne.n	8007314 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007310:	2303      	movs	r3, #3
 8007312:	e04e      	b.n	80073b2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f003 0304 	and.w	r3, r3, #4
 800731e:	2b00      	cmp	r3, #0
 8007320:	d037      	beq.n	8007392 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	2b80      	cmp	r3, #128	@ 0x80
 8007326:	d034      	beq.n	8007392 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	2b40      	cmp	r3, #64	@ 0x40
 800732c:	d031      	beq.n	8007392 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	69db      	ldr	r3, [r3, #28]
 8007334:	f003 0308 	and.w	r3, r3, #8
 8007338:	2b08      	cmp	r3, #8
 800733a:	d110      	bne.n	800735e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2208      	movs	r2, #8
 8007342:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f000 f95b 	bl	8007600 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	2208      	movs	r2, #8
 800734e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e029      	b.n	80073b2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	69db      	ldr	r3, [r3, #28]
 8007364:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007368:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800736c:	d111      	bne.n	8007392 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007376:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007378:	68f8      	ldr	r0, [r7, #12]
 800737a:	f000 f941 	bl	8007600 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	2220      	movs	r2, #32
 8007382:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2200      	movs	r2, #0
 800738a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800738e:	2303      	movs	r3, #3
 8007390:	e00f      	b.n	80073b2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	69da      	ldr	r2, [r3, #28]
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	4013      	ands	r3, r2
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	429a      	cmp	r2, r3
 80073a0:	bf0c      	ite	eq
 80073a2:	2301      	moveq	r3, #1
 80073a4:	2300      	movne	r3, #0
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	461a      	mov	r2, r3
 80073aa:	79fb      	ldrb	r3, [r7, #7]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d0a0      	beq.n	80072f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80073b0:	2300      	movs	r3, #0
}
 80073b2:	4618      	mov	r0, r3
 80073b4:	3710      	adds	r7, #16
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}
	...

080073bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80073bc:	b480      	push	{r7}
 80073be:	b0a3      	sub	sp, #140	@ 0x8c
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	60f8      	str	r0, [r7, #12]
 80073c4:	60b9      	str	r1, [r7, #8]
 80073c6:	4613      	mov	r3, r2
 80073c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	88fa      	ldrh	r2, [r7, #6]
 80073d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	88fa      	ldrh	r2, [r7, #6]
 80073dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	2200      	movs	r2, #0
 80073e4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073ee:	d10e      	bne.n	800740e <UART_Start_Receive_IT+0x52>
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d105      	bne.n	8007404 <UART_Start_Receive_IT+0x48>
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80073fe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007402:	e02d      	b.n	8007460 <UART_Start_Receive_IT+0xa4>
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	22ff      	movs	r2, #255	@ 0xff
 8007408:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800740c:	e028      	b.n	8007460 <UART_Start_Receive_IT+0xa4>
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d10d      	bne.n	8007432 <UART_Start_Receive_IT+0x76>
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	2b00      	cmp	r3, #0
 800741c:	d104      	bne.n	8007428 <UART_Start_Receive_IT+0x6c>
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	22ff      	movs	r2, #255	@ 0xff
 8007422:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007426:	e01b      	b.n	8007460 <UART_Start_Receive_IT+0xa4>
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	227f      	movs	r2, #127	@ 0x7f
 800742c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007430:	e016      	b.n	8007460 <UART_Start_Receive_IT+0xa4>
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	689b      	ldr	r3, [r3, #8]
 8007436:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800743a:	d10d      	bne.n	8007458 <UART_Start_Receive_IT+0x9c>
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	691b      	ldr	r3, [r3, #16]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d104      	bne.n	800744e <UART_Start_Receive_IT+0x92>
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	227f      	movs	r2, #127	@ 0x7f
 8007448:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800744c:	e008      	b.n	8007460 <UART_Start_Receive_IT+0xa4>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	223f      	movs	r2, #63	@ 0x3f
 8007452:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007456:	e003      	b.n	8007460 <UART_Start_Receive_IT+0xa4>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2200      	movs	r2, #0
 800745c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2200      	movs	r2, #0
 8007464:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2222      	movs	r2, #34	@ 0x22
 800746c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	3308      	adds	r3, #8
 8007476:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007478:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800747a:	e853 3f00 	ldrex	r3, [r3]
 800747e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007480:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007482:	f043 0301 	orr.w	r3, r3, #1
 8007486:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	3308      	adds	r3, #8
 8007490:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007494:	673a      	str	r2, [r7, #112]	@ 0x70
 8007496:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007498:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800749a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800749c:	e841 2300 	strex	r3, r2, [r1]
 80074a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80074a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d1e3      	bne.n	8007470 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80074b0:	d14f      	bne.n	8007552 <UART_Start_Receive_IT+0x196>
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80074b8:	88fa      	ldrh	r2, [r7, #6]
 80074ba:	429a      	cmp	r2, r3
 80074bc:	d349      	bcc.n	8007552 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074c6:	d107      	bne.n	80074d8 <UART_Start_Receive_IT+0x11c>
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d103      	bne.n	80074d8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	4a47      	ldr	r2, [pc, #284]	@ (80075f0 <UART_Start_Receive_IT+0x234>)
 80074d4:	675a      	str	r2, [r3, #116]	@ 0x74
 80074d6:	e002      	b.n	80074de <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	4a46      	ldr	r2, [pc, #280]	@ (80075f4 <UART_Start_Receive_IT+0x238>)
 80074dc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d01a      	beq.n	800751c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074ee:	e853 3f00 	ldrex	r3, [r3]
 80074f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80074f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80074f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	461a      	mov	r2, r3
 8007504:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007508:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800750a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800750c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800750e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007510:	e841 2300 	strex	r3, r2, [r1]
 8007514:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007516:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1e4      	bne.n	80074e6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	3308      	adds	r3, #8
 8007522:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007524:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007526:	e853 3f00 	ldrex	r3, [r3]
 800752a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800752c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800752e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007532:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	3308      	adds	r3, #8
 800753a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800753c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800753e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007540:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007542:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007544:	e841 2300 	strex	r3, r2, [r1]
 8007548:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800754a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800754c:	2b00      	cmp	r3, #0
 800754e:	d1e5      	bne.n	800751c <UART_Start_Receive_IT+0x160>
 8007550:	e046      	b.n	80075e0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800755a:	d107      	bne.n	800756c <UART_Start_Receive_IT+0x1b0>
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	691b      	ldr	r3, [r3, #16]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d103      	bne.n	800756c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	4a24      	ldr	r2, [pc, #144]	@ (80075f8 <UART_Start_Receive_IT+0x23c>)
 8007568:	675a      	str	r2, [r3, #116]	@ 0x74
 800756a:	e002      	b.n	8007572 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	4a23      	ldr	r2, [pc, #140]	@ (80075fc <UART_Start_Receive_IT+0x240>)
 8007570:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	691b      	ldr	r3, [r3, #16]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d019      	beq.n	80075ae <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007582:	e853 3f00 	ldrex	r3, [r3]
 8007586:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800758e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	461a      	mov	r2, r3
 8007596:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007598:	637b      	str	r3, [r7, #52]	@ 0x34
 800759a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800759c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800759e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80075a0:	e841 2300 	strex	r3, r2, [r1]
 80075a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80075a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d1e6      	bne.n	800757a <UART_Start_Receive_IT+0x1be>
 80075ac:	e018      	b.n	80075e0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	e853 3f00 	ldrex	r3, [r3]
 80075ba:	613b      	str	r3, [r7, #16]
   return(result);
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	f043 0320 	orr.w	r3, r3, #32
 80075c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	461a      	mov	r2, r3
 80075ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80075cc:	623b      	str	r3, [r7, #32]
 80075ce:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d0:	69f9      	ldr	r1, [r7, #28]
 80075d2:	6a3a      	ldr	r2, [r7, #32]
 80075d4:	e841 2300 	strex	r3, r2, [r1]
 80075d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d1e6      	bne.n	80075ae <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80075e0:	2300      	movs	r3, #0
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	378c      	adds	r7, #140	@ 0x8c
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr
 80075ee:	bf00      	nop
 80075f0:	08007e21 	.word	0x08007e21
 80075f4:	08007ac1 	.word	0x08007ac1
 80075f8:	08007909 	.word	0x08007909
 80075fc:	08007751 	.word	0x08007751

08007600 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007600:	b480      	push	{r7}
 8007602:	b095      	sub	sp, #84	@ 0x54
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800760e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007610:	e853 3f00 	ldrex	r3, [r3]
 8007614:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007618:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800761c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	461a      	mov	r2, r3
 8007624:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007626:	643b      	str	r3, [r7, #64]	@ 0x40
 8007628:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800762a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800762c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800762e:	e841 2300 	strex	r3, r2, [r1]
 8007632:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007636:	2b00      	cmp	r3, #0
 8007638:	d1e6      	bne.n	8007608 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	3308      	adds	r3, #8
 8007640:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007642:	6a3b      	ldr	r3, [r7, #32]
 8007644:	e853 3f00 	ldrex	r3, [r3]
 8007648:	61fb      	str	r3, [r7, #28]
   return(result);
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007650:	f023 0301 	bic.w	r3, r3, #1
 8007654:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	3308      	adds	r3, #8
 800765c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800765e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007660:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007662:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007664:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007666:	e841 2300 	strex	r3, r2, [r1]
 800766a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800766c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800766e:	2b00      	cmp	r3, #0
 8007670:	d1e3      	bne.n	800763a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007676:	2b01      	cmp	r3, #1
 8007678:	d118      	bne.n	80076ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	e853 3f00 	ldrex	r3, [r3]
 8007686:	60bb      	str	r3, [r7, #8]
   return(result);
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	f023 0310 	bic.w	r3, r3, #16
 800768e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	461a      	mov	r2, r3
 8007696:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007698:	61bb      	str	r3, [r7, #24]
 800769a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769c:	6979      	ldr	r1, [r7, #20]
 800769e:	69ba      	ldr	r2, [r7, #24]
 80076a0:	e841 2300 	strex	r3, r2, [r1]
 80076a4:	613b      	str	r3, [r7, #16]
   return(result);
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1e6      	bne.n	800767a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2220      	movs	r2, #32
 80076b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2200      	movs	r2, #0
 80076be:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80076c0:	bf00      	nop
 80076c2:	3754      	adds	r7, #84	@ 0x54
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b084      	sub	sp, #16
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076d8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2200      	movs	r2, #0
 80076de:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2200      	movs	r2, #0
 80076e6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f7ff f99a 	bl	8006a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076f0:	bf00      	nop
 80076f2:	3710      	adds	r7, #16
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b088      	sub	sp, #32
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	e853 3f00 	ldrex	r3, [r3]
 800770c:	60bb      	str	r3, [r7, #8]
   return(result);
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007714:	61fb      	str	r3, [r7, #28]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	461a      	mov	r2, r3
 800771c:	69fb      	ldr	r3, [r7, #28]
 800771e:	61bb      	str	r3, [r7, #24]
 8007720:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007722:	6979      	ldr	r1, [r7, #20]
 8007724:	69ba      	ldr	r2, [r7, #24]
 8007726:	e841 2300 	strex	r3, r2, [r1]
 800772a:	613b      	str	r3, [r7, #16]
   return(result);
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d1e6      	bne.n	8007700 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2220      	movs	r2, #32
 8007736:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f7ff f965 	bl	8006a10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007746:	bf00      	nop
 8007748:	3720      	adds	r7, #32
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
	...

08007750 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b09c      	sub	sp, #112	@ 0x70
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800775e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007768:	2b22      	cmp	r3, #34	@ 0x22
 800776a:	f040 80be 	bne.w	80078ea <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007774:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007778:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800777c:	b2d9      	uxtb	r1, r3
 800777e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007782:	b2da      	uxtb	r2, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007788:	400a      	ands	r2, r1
 800778a:	b2d2      	uxtb	r2, r2
 800778c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007792:	1c5a      	adds	r2, r3, #1
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800779e:	b29b      	uxth	r3, r3
 80077a0:	3b01      	subs	r3, #1
 80077a2:	b29a      	uxth	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f040 80a1 	bne.w	80078fa <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077c0:	e853 3f00 	ldrex	r3, [r3]
 80077c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80077c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80077cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	461a      	mov	r2, r3
 80077d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80077d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80077d8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80077dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80077de:	e841 2300 	strex	r3, r2, [r1]
 80077e2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80077e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d1e6      	bne.n	80077b8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	3308      	adds	r3, #8
 80077f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f4:	e853 3f00 	ldrex	r3, [r3]
 80077f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80077fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077fc:	f023 0301 	bic.w	r3, r3, #1
 8007800:	667b      	str	r3, [r7, #100]	@ 0x64
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	3308      	adds	r3, #8
 8007808:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800780a:	647a      	str	r2, [r7, #68]	@ 0x44
 800780c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007810:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007812:	e841 2300 	strex	r3, r2, [r1]
 8007816:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007818:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1e5      	bne.n	80077ea <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2220      	movs	r2, #32
 8007822:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2200      	movs	r2, #0
 800782a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a33      	ldr	r2, [pc, #204]	@ (8007904 <UART_RxISR_8BIT+0x1b4>)
 8007838:	4293      	cmp	r3, r2
 800783a:	d01f      	beq.n	800787c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007846:	2b00      	cmp	r3, #0
 8007848:	d018      	beq.n	800787c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007852:	e853 3f00 	ldrex	r3, [r3]
 8007856:	623b      	str	r3, [r7, #32]
   return(result);
 8007858:	6a3b      	ldr	r3, [r7, #32]
 800785a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800785e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	461a      	mov	r2, r3
 8007866:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007868:	633b      	str	r3, [r7, #48]	@ 0x30
 800786a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800786e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007870:	e841 2300 	strex	r3, r2, [r1]
 8007874:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1e6      	bne.n	800784a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007880:	2b01      	cmp	r3, #1
 8007882:	d12e      	bne.n	80078e2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	e853 3f00 	ldrex	r3, [r3]
 8007896:	60fb      	str	r3, [r7, #12]
   return(result);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f023 0310 	bic.w	r3, r3, #16
 800789e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	461a      	mov	r2, r3
 80078a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80078a8:	61fb      	str	r3, [r7, #28]
 80078aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ac:	69b9      	ldr	r1, [r7, #24]
 80078ae:	69fa      	ldr	r2, [r7, #28]
 80078b0:	e841 2300 	strex	r3, r2, [r1]
 80078b4:	617b      	str	r3, [r7, #20]
   return(result);
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1e6      	bne.n	800788a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	69db      	ldr	r3, [r3, #28]
 80078c2:	f003 0310 	and.w	r3, r3, #16
 80078c6:	2b10      	cmp	r3, #16
 80078c8:	d103      	bne.n	80078d2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	2210      	movs	r2, #16
 80078d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80078d8:	4619      	mov	r1, r3
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f7ff f8ac 	bl	8006a38 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80078e0:	e00b      	b.n	80078fa <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f7f9 f8ca 	bl	8000a7c <HAL_UART_RxCpltCallback>
}
 80078e8:	e007      	b.n	80078fa <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	699a      	ldr	r2, [r3, #24]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f042 0208 	orr.w	r2, r2, #8
 80078f8:	619a      	str	r2, [r3, #24]
}
 80078fa:	bf00      	nop
 80078fc:	3770      	adds	r7, #112	@ 0x70
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}
 8007902:	bf00      	nop
 8007904:	40008000 	.word	0x40008000

08007908 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b09c      	sub	sp, #112	@ 0x70
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007916:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007920:	2b22      	cmp	r3, #34	@ 0x22
 8007922:	f040 80be 	bne.w	8007aa2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800792c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007934:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007936:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 800793a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800793e:	4013      	ands	r3, r2
 8007940:	b29a      	uxth	r2, r3
 8007942:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007944:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800794a:	1c9a      	adds	r2, r3, #2
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007956:	b29b      	uxth	r3, r3
 8007958:	3b01      	subs	r3, #1
 800795a:	b29a      	uxth	r2, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007968:	b29b      	uxth	r3, r3
 800796a:	2b00      	cmp	r3, #0
 800796c:	f040 80a1 	bne.w	8007ab2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007976:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007978:	e853 3f00 	ldrex	r3, [r3]
 800797c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800797e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007980:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007984:	667b      	str	r3, [r7, #100]	@ 0x64
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	461a      	mov	r2, r3
 800798c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800798e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007990:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007992:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007994:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007996:	e841 2300 	strex	r3, r2, [r1]
 800799a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800799c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1e6      	bne.n	8007970 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	3308      	adds	r3, #8
 80079a8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80079ac:	e853 3f00 	ldrex	r3, [r3]
 80079b0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80079b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079b4:	f023 0301 	bic.w	r3, r3, #1
 80079b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	3308      	adds	r3, #8
 80079c0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80079c2:	643a      	str	r2, [r7, #64]	@ 0x40
 80079c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80079c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80079ca:	e841 2300 	strex	r3, r2, [r1]
 80079ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80079d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1e5      	bne.n	80079a2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2220      	movs	r2, #32
 80079da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2200      	movs	r2, #0
 80079e2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2200      	movs	r2, #0
 80079e8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a33      	ldr	r2, [pc, #204]	@ (8007abc <UART_RxISR_16BIT+0x1b4>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d01f      	beq.n	8007a34 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d018      	beq.n	8007a34 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a08:	6a3b      	ldr	r3, [r7, #32]
 8007a0a:	e853 3f00 	ldrex	r3, [r3]
 8007a0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007a16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007a22:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007a26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007a28:	e841 2300 	strex	r3, r2, [r1]
 8007a2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d1e6      	bne.n	8007a02 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d12e      	bne.n	8007a9a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2200      	movs	r2, #0
 8007a40:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	e853 3f00 	ldrex	r3, [r3]
 8007a4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	f023 0310 	bic.w	r3, r3, #16
 8007a56:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	461a      	mov	r2, r3
 8007a5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007a60:	61bb      	str	r3, [r7, #24]
 8007a62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a64:	6979      	ldr	r1, [r7, #20]
 8007a66:	69ba      	ldr	r2, [r7, #24]
 8007a68:	e841 2300 	strex	r3, r2, [r1]
 8007a6c:	613b      	str	r3, [r7, #16]
   return(result);
 8007a6e:	693b      	ldr	r3, [r7, #16]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d1e6      	bne.n	8007a42 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	69db      	ldr	r3, [r3, #28]
 8007a7a:	f003 0310 	and.w	r3, r3, #16
 8007a7e:	2b10      	cmp	r3, #16
 8007a80:	d103      	bne.n	8007a8a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2210      	movs	r2, #16
 8007a88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007a90:	4619      	mov	r1, r3
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f7fe ffd0 	bl	8006a38 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a98:	e00b      	b.n	8007ab2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f7f8 ffee 	bl	8000a7c <HAL_UART_RxCpltCallback>
}
 8007aa0:	e007      	b.n	8007ab2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	699a      	ldr	r2, [r3, #24]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f042 0208 	orr.w	r2, r2, #8
 8007ab0:	619a      	str	r2, [r3, #24]
}
 8007ab2:	bf00      	nop
 8007ab4:	3770      	adds	r7, #112	@ 0x70
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
 8007aba:	bf00      	nop
 8007abc:	40008000 	.word	0x40008000

08007ac0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b0ac      	sub	sp, #176	@ 0xb0
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007ace:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	69db      	ldr	r3, [r3, #28]
 8007ad8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007af6:	2b22      	cmp	r3, #34	@ 0x22
 8007af8:	f040 8182 	bne.w	8007e00 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007b02:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007b06:	e125      	b.n	8007d54 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b0e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007b12:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8007b16:	b2d9      	uxtb	r1, r3
 8007b18:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007b1c:	b2da      	uxtb	r2, r3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b22:	400a      	ands	r2, r1
 8007b24:	b2d2      	uxtb	r2, r2
 8007b26:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b2c:	1c5a      	adds	r2, r3, #1
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b38:	b29b      	uxth	r3, r3
 8007b3a:	3b01      	subs	r3, #1
 8007b3c:	b29a      	uxth	r2, r3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	69db      	ldr	r3, [r3, #28]
 8007b4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007b4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b52:	f003 0307 	and.w	r3, r3, #7
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d053      	beq.n	8007c02 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b5e:	f003 0301 	and.w	r3, r3, #1
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d011      	beq.n	8007b8a <UART_RxISR_8BIT_FIFOEN+0xca>
 8007b66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007b6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00b      	beq.n	8007b8a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	2201      	movs	r2, #1
 8007b78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b80:	f043 0201 	orr.w	r2, r3, #1
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b8e:	f003 0302 	and.w	r3, r3, #2
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d011      	beq.n	8007bba <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007b96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007b9a:	f003 0301 	and.w	r3, r3, #1
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00b      	beq.n	8007bba <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	2202      	movs	r2, #2
 8007ba8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bb0:	f043 0204 	orr.w	r2, r3, #4
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007bba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007bbe:	f003 0304 	and.w	r3, r3, #4
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d011      	beq.n	8007bea <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007bc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007bca:	f003 0301 	and.w	r3, r3, #1
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00b      	beq.n	8007bea <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	2204      	movs	r2, #4
 8007bd8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007be0:	f043 0202 	orr.w	r2, r3, #2
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d006      	beq.n	8007c02 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f7fe ff15 	bl	8006a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c08:	b29b      	uxth	r3, r3
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	f040 80a2 	bne.w	8007d54 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007c18:	e853 3f00 	ldrex	r3, [r3]
 8007c1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007c1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007c20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	461a      	mov	r2, r3
 8007c2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007c32:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007c34:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c36:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007c38:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007c3a:	e841 2300 	strex	r3, r2, [r1]
 8007c3e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007c40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d1e4      	bne.n	8007c10 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	3308      	adds	r3, #8
 8007c4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007c50:	e853 3f00 	ldrex	r3, [r3]
 8007c54:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007c56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007c58:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007c5c:	f023 0301 	bic.w	r3, r3, #1
 8007c60:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	3308      	adds	r3, #8
 8007c6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007c6e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007c70:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c72:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007c74:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007c76:	e841 2300 	strex	r3, r2, [r1]
 8007c7a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007c7c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d1e1      	bne.n	8007c46 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2220      	movs	r2, #32
 8007c86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	4a5f      	ldr	r2, [pc, #380]	@ (8007e18 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007c9c:	4293      	cmp	r3, r2
 8007c9e:	d021      	beq.n	8007ce4 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	685b      	ldr	r3, [r3, #4]
 8007ca6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d01a      	beq.n	8007ce4 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cb6:	e853 3f00 	ldrex	r3, [r3]
 8007cba:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007cbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007cbe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007cc2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	461a      	mov	r2, r3
 8007ccc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007cd0:	657b      	str	r3, [r7, #84]	@ 0x54
 8007cd2:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007cd6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007cd8:	e841 2300 	strex	r3, r2, [r1]
 8007cdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007cde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d1e4      	bne.n	8007cae <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d130      	bne.n	8007d4e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2200      	movs	r2, #0
 8007cf0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cfa:	e853 3f00 	ldrex	r3, [r3]
 8007cfe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d02:	f023 0310 	bic.w	r3, r3, #16
 8007d06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	461a      	mov	r2, r3
 8007d10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007d14:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d16:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d18:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007d1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007d1c:	e841 2300 	strex	r3, r2, [r1]
 8007d20:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d1e4      	bne.n	8007cf2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	69db      	ldr	r3, [r3, #28]
 8007d2e:	f003 0310 	and.w	r3, r3, #16
 8007d32:	2b10      	cmp	r3, #16
 8007d34:	d103      	bne.n	8007d3e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	2210      	movs	r2, #16
 8007d3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007d44:	4619      	mov	r1, r3
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f7fe fe76 	bl	8006a38 <HAL_UARTEx_RxEventCallback>
 8007d4c:	e002      	b.n	8007d54 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f7f8 fe94 	bl	8000a7c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007d54:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d006      	beq.n	8007d6a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8007d5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d60:	f003 0320 	and.w	r3, r3, #32
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	f47f aecf 	bne.w	8007b08 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d70:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007d74:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d049      	beq.n	8007e10 <UART_RxISR_8BIT_FIFOEN+0x350>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007d82:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d242      	bcs.n	8007e10 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	3308      	adds	r3, #8
 8007d90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d92:	6a3b      	ldr	r3, [r7, #32]
 8007d94:	e853 3f00 	ldrex	r3, [r3]
 8007d98:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007da0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	3308      	adds	r3, #8
 8007daa:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007dae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007db0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007db4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007db6:	e841 2300 	strex	r3, r2, [r1]
 8007dba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d1e3      	bne.n	8007d8a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a15      	ldr	r2, [pc, #84]	@ (8007e1c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007dc6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	e853 3f00 	ldrex	r3, [r3]
 8007dd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	f043 0320 	orr.w	r3, r3, #32
 8007ddc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	461a      	mov	r2, r3
 8007de6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007dea:	61bb      	str	r3, [r7, #24]
 8007dec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dee:	6979      	ldr	r1, [r7, #20]
 8007df0:	69ba      	ldr	r2, [r7, #24]
 8007df2:	e841 2300 	strex	r3, r2, [r1]
 8007df6:	613b      	str	r3, [r7, #16]
   return(result);
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d1e4      	bne.n	8007dc8 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007dfe:	e007      	b.n	8007e10 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	699a      	ldr	r2, [r3, #24]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f042 0208 	orr.w	r2, r2, #8
 8007e0e:	619a      	str	r2, [r3, #24]
}
 8007e10:	bf00      	nop
 8007e12:	37b0      	adds	r7, #176	@ 0xb0
 8007e14:	46bd      	mov	sp, r7
 8007e16:	bd80      	pop	{r7, pc}
 8007e18:	40008000 	.word	0x40008000
 8007e1c:	08007751 	.word	0x08007751

08007e20 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b0ae      	sub	sp, #184	@ 0xb8
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007e2e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	69db      	ldr	r3, [r3, #28]
 8007e38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007e56:	2b22      	cmp	r3, #34	@ 0x22
 8007e58:	f040 8186 	bne.w	8008168 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007e62:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007e66:	e129      	b.n	80080bc <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e6e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007e7a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8007e7e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8007e82:	4013      	ands	r3, r2
 8007e84:	b29a      	uxth	r2, r3
 8007e86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007e8a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e90:	1c9a      	adds	r2, r3, #2
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	3b01      	subs	r3, #1
 8007ea0:	b29a      	uxth	r2, r3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	69db      	ldr	r3, [r3, #28]
 8007eae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007eb2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007eb6:	f003 0307 	and.w	r3, r3, #7
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d053      	beq.n	8007f66 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ebe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d011      	beq.n	8007eee <UART_RxISR_16BIT_FIFOEN+0xce>
 8007eca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007ece:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d00b      	beq.n	8007eee <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	2201      	movs	r2, #1
 8007edc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ee4:	f043 0201 	orr.w	r2, r3, #1
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007eee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007ef2:	f003 0302 	and.w	r3, r3, #2
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d011      	beq.n	8007f1e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007efa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007efe:	f003 0301 	and.w	r3, r3, #1
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d00b      	beq.n	8007f1e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	2202      	movs	r2, #2
 8007f0c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f14:	f043 0204 	orr.w	r2, r3, #4
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007f22:	f003 0304 	and.w	r3, r3, #4
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d011      	beq.n	8007f4e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007f2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007f2e:	f003 0301 	and.w	r3, r3, #1
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d00b      	beq.n	8007f4e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2204      	movs	r2, #4
 8007f3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f44:	f043 0202 	orr.w	r2, r3, #2
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d006      	beq.n	8007f66 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f58:	6878      	ldr	r0, [r7, #4]
 8007f5a:	f7fe fd63 	bl	8006a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	f040 80a4 	bne.w	80080bc <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f7c:	e853 3f00 	ldrex	r3, [r3]
 8007f80:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007f82:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	461a      	mov	r2, r3
 8007f92:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007f96:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007f9a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007f9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007fa2:	e841 2300 	strex	r3, r2, [r1]
 8007fa6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007fa8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1e2      	bne.n	8007f74 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	3308      	adds	r3, #8
 8007fb4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007fb8:	e853 3f00 	ldrex	r3, [r3]
 8007fbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007fbe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007fc0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007fc4:	f023 0301 	bic.w	r3, r3, #1
 8007fc8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	3308      	adds	r3, #8
 8007fd2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007fd6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007fd8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fda:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007fdc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007fde:	e841 2300 	strex	r3, r2, [r1]
 8007fe2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007fe4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d1e1      	bne.n	8007fae <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2220      	movs	r2, #32
 8007fee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a5f      	ldr	r2, [pc, #380]	@ (8008180 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d021      	beq.n	800804c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008012:	2b00      	cmp	r3, #0
 8008014:	d01a      	beq.n	800804c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800801c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800801e:	e853 3f00 	ldrex	r3, [r3]
 8008022:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008024:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008026:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800802a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	461a      	mov	r2, r3
 8008034:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008038:	65bb      	str	r3, [r7, #88]	@ 0x58
 800803a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800803e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008040:	e841 2300 	strex	r3, r2, [r1]
 8008044:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008046:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008048:	2b00      	cmp	r3, #0
 800804a:	d1e4      	bne.n	8008016 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008050:	2b01      	cmp	r3, #1
 8008052:	d130      	bne.n	80080b6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008062:	e853 3f00 	ldrex	r3, [r3]
 8008066:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800806a:	f023 0310 	bic.w	r3, r3, #16
 800806e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	461a      	mov	r2, r3
 8008078:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800807c:	647b      	str	r3, [r7, #68]	@ 0x44
 800807e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008080:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008082:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008084:	e841 2300 	strex	r3, r2, [r1]
 8008088:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800808a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800808c:	2b00      	cmp	r3, #0
 800808e:	d1e4      	bne.n	800805a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	69db      	ldr	r3, [r3, #28]
 8008096:	f003 0310 	and.w	r3, r3, #16
 800809a:	2b10      	cmp	r3, #16
 800809c:	d103      	bne.n	80080a6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	2210      	movs	r2, #16
 80080a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80080ac:	4619      	mov	r1, r3
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f7fe fcc2 	bl	8006a38 <HAL_UARTEx_RxEventCallback>
 80080b4:	e002      	b.n	80080bc <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f7f8 fce0 	bl	8000a7c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80080bc:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d006      	beq.n	80080d2 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80080c4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80080c8:	f003 0320 	and.w	r3, r3, #32
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	f47f aecb 	bne.w	8007e68 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80080d8:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80080dc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d049      	beq.n	8008178 <UART_RxISR_16BIT_FIFOEN+0x358>
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80080ea:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80080ee:	429a      	cmp	r2, r3
 80080f0:	d242      	bcs.n	8008178 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	3308      	adds	r3, #8
 80080f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080fc:	e853 3f00 	ldrex	r3, [r3]
 8008100:	623b      	str	r3, [r7, #32]
   return(result);
 8008102:	6a3b      	ldr	r3, [r7, #32]
 8008104:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008108:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	3308      	adds	r3, #8
 8008112:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8008116:	633a      	str	r2, [r7, #48]	@ 0x30
 8008118:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800811c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800811e:	e841 2300 	strex	r3, r2, [r1]
 8008122:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008126:	2b00      	cmp	r3, #0
 8008128:	d1e3      	bne.n	80080f2 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4a15      	ldr	r2, [pc, #84]	@ (8008184 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800812e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	e853 3f00 	ldrex	r3, [r3]
 800813c:	60fb      	str	r3, [r7, #12]
   return(result);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f043 0320 	orr.w	r3, r3, #32
 8008144:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	461a      	mov	r2, r3
 800814e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008152:	61fb      	str	r3, [r7, #28]
 8008154:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008156:	69b9      	ldr	r1, [r7, #24]
 8008158:	69fa      	ldr	r2, [r7, #28]
 800815a:	e841 2300 	strex	r3, r2, [r1]
 800815e:	617b      	str	r3, [r7, #20]
   return(result);
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d1e4      	bne.n	8008130 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008166:	e007      	b.n	8008178 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	699a      	ldr	r2, [r3, #24]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f042 0208 	orr.w	r2, r2, #8
 8008176:	619a      	str	r2, [r3, #24]
}
 8008178:	bf00      	nop
 800817a:	37b8      	adds	r7, #184	@ 0xb8
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}
 8008180:	40008000 	.word	0x40008000
 8008184:	08007909 	.word	0x08007909

08008188 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008190:	bf00      	nop
 8008192:	370c      	adds	r7, #12
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80081a4:	bf00      	nop
 80081a6:	370c      	adds	r7, #12
 80081a8:	46bd      	mov	sp, r7
 80081aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ae:	4770      	bx	lr

080081b0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80081b8:	bf00      	nop
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr

080081c4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b085      	sub	sp, #20
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d101      	bne.n	80081da <HAL_UARTEx_DisableFifoMode+0x16>
 80081d6:	2302      	movs	r3, #2
 80081d8:	e027      	b.n	800822a <HAL_UARTEx_DisableFifoMode+0x66>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	2201      	movs	r2, #1
 80081de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2224      	movs	r2, #36	@ 0x24
 80081e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f022 0201 	bic.w	r2, r2, #1
 8008200:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008208:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	68fa      	ldr	r2, [r7, #12]
 8008216:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2220      	movs	r2, #32
 800821c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2200      	movs	r2, #0
 8008224:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008228:	2300      	movs	r3, #0
}
 800822a:	4618      	mov	r0, r3
 800822c:	3714      	adds	r7, #20
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr

08008236 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b084      	sub	sp, #16
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
 800823e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008246:	2b01      	cmp	r3, #1
 8008248:	d101      	bne.n	800824e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800824a:	2302      	movs	r3, #2
 800824c:	e02d      	b.n	80082aa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2201      	movs	r2, #1
 8008252:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2224      	movs	r2, #36	@ 0x24
 800825a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f022 0201 	bic.w	r2, r2, #1
 8008274:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	683a      	ldr	r2, [r7, #0]
 8008286:	430a      	orrs	r2, r1
 8008288:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f850 	bl	8008330 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	68fa      	ldr	r2, [r7, #12]
 8008296:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2220      	movs	r2, #32
 800829c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80082a8:	2300      	movs	r3, #0
}
 80082aa:	4618      	mov	r0, r3
 80082ac:	3710      	adds	r7, #16
 80082ae:	46bd      	mov	sp, r7
 80082b0:	bd80      	pop	{r7, pc}

080082b2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80082b2:	b580      	push	{r7, lr}
 80082b4:	b084      	sub	sp, #16
 80082b6:	af00      	add	r7, sp, #0
 80082b8:	6078      	str	r0, [r7, #4]
 80082ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d101      	bne.n	80082ca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80082c6:	2302      	movs	r3, #2
 80082c8:	e02d      	b.n	8008326 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2201      	movs	r2, #1
 80082ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2224      	movs	r2, #36	@ 0x24
 80082d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f022 0201 	bic.w	r2, r2, #1
 80082f0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	683a      	ldr	r2, [r7, #0]
 8008302:	430a      	orrs	r2, r1
 8008304:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 f812 	bl	8008330 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	68fa      	ldr	r2, [r7, #12]
 8008312:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2220      	movs	r2, #32
 8008318:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2200      	movs	r2, #0
 8008320:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}
	...

08008330 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008330:	b480      	push	{r7}
 8008332:	b085      	sub	sp, #20
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800833c:	2b00      	cmp	r3, #0
 800833e:	d108      	bne.n	8008352 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008350:	e031      	b.n	80083b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008352:	2308      	movs	r3, #8
 8008354:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008356:	2308      	movs	r3, #8
 8008358:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	0e5b      	lsrs	r3, r3, #25
 8008362:	b2db      	uxtb	r3, r3
 8008364:	f003 0307 	and.w	r3, r3, #7
 8008368:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	689b      	ldr	r3, [r3, #8]
 8008370:	0f5b      	lsrs	r3, r3, #29
 8008372:	b2db      	uxtb	r3, r3
 8008374:	f003 0307 	and.w	r3, r3, #7
 8008378:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800837a:	7bbb      	ldrb	r3, [r7, #14]
 800837c:	7b3a      	ldrb	r2, [r7, #12]
 800837e:	4911      	ldr	r1, [pc, #68]	@ (80083c4 <UARTEx_SetNbDataToProcess+0x94>)
 8008380:	5c8a      	ldrb	r2, [r1, r2]
 8008382:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008386:	7b3a      	ldrb	r2, [r7, #12]
 8008388:	490f      	ldr	r1, [pc, #60]	@ (80083c8 <UARTEx_SetNbDataToProcess+0x98>)
 800838a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800838c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008390:	b29a      	uxth	r2, r3
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008398:	7bfb      	ldrb	r3, [r7, #15]
 800839a:	7b7a      	ldrb	r2, [r7, #13]
 800839c:	4909      	ldr	r1, [pc, #36]	@ (80083c4 <UARTEx_SetNbDataToProcess+0x94>)
 800839e:	5c8a      	ldrb	r2, [r1, r2]
 80083a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80083a4:	7b7a      	ldrb	r2, [r7, #13]
 80083a6:	4908      	ldr	r1, [pc, #32]	@ (80083c8 <UARTEx_SetNbDataToProcess+0x98>)
 80083a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80083aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80083ae:	b29a      	uxth	r2, r3
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80083b6:	bf00      	nop
 80083b8:	3714      	adds	r7, #20
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr
 80083c2:	bf00      	nop
 80083c4:	0800846c 	.word	0x0800846c
 80083c8:	08008474 	.word	0x08008474

080083cc <memset>:
 80083cc:	4402      	add	r2, r0
 80083ce:	4603      	mov	r3, r0
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d100      	bne.n	80083d6 <memset+0xa>
 80083d4:	4770      	bx	lr
 80083d6:	f803 1b01 	strb.w	r1, [r3], #1
 80083da:	e7f9      	b.n	80083d0 <memset+0x4>

080083dc <__libc_init_array>:
 80083dc:	b570      	push	{r4, r5, r6, lr}
 80083de:	4d0d      	ldr	r5, [pc, #52]	@ (8008414 <__libc_init_array+0x38>)
 80083e0:	4c0d      	ldr	r4, [pc, #52]	@ (8008418 <__libc_init_array+0x3c>)
 80083e2:	1b64      	subs	r4, r4, r5
 80083e4:	10a4      	asrs	r4, r4, #2
 80083e6:	2600      	movs	r6, #0
 80083e8:	42a6      	cmp	r6, r4
 80083ea:	d109      	bne.n	8008400 <__libc_init_array+0x24>
 80083ec:	4d0b      	ldr	r5, [pc, #44]	@ (800841c <__libc_init_array+0x40>)
 80083ee:	4c0c      	ldr	r4, [pc, #48]	@ (8008420 <__libc_init_array+0x44>)
 80083f0:	f000 f818 	bl	8008424 <_init>
 80083f4:	1b64      	subs	r4, r4, r5
 80083f6:	10a4      	asrs	r4, r4, #2
 80083f8:	2600      	movs	r6, #0
 80083fa:	42a6      	cmp	r6, r4
 80083fc:	d105      	bne.n	800840a <__libc_init_array+0x2e>
 80083fe:	bd70      	pop	{r4, r5, r6, pc}
 8008400:	f855 3b04 	ldr.w	r3, [r5], #4
 8008404:	4798      	blx	r3
 8008406:	3601      	adds	r6, #1
 8008408:	e7ee      	b.n	80083e8 <__libc_init_array+0xc>
 800840a:	f855 3b04 	ldr.w	r3, [r5], #4
 800840e:	4798      	blx	r3
 8008410:	3601      	adds	r6, #1
 8008412:	e7f2      	b.n	80083fa <__libc_init_array+0x1e>
 8008414:	08008484 	.word	0x08008484
 8008418:	08008484 	.word	0x08008484
 800841c:	08008484 	.word	0x08008484
 8008420:	08008488 	.word	0x08008488

08008424 <_init>:
 8008424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008426:	bf00      	nop
 8008428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800842a:	bc08      	pop	{r3}
 800842c:	469e      	mov	lr, r3
 800842e:	4770      	bx	lr

08008430 <_fini>:
 8008430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008432:	bf00      	nop
 8008434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008436:	bc08      	pop	{r3}
 8008438:	469e      	mov	lr, r3
 800843a:	4770      	bx	lr
