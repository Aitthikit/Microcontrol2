
KalmanImprement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b2c  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08006d04  08006d04  00007d04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d68  08006d68  00008064  2**0
                  CONTENTS
  4 .ARM          00000008  08006d68  08006d68  00007d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d70  08006d70  00008064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d70  08006d70  00007d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d74  08006d74  00007d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08006d78  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000031c  20000068  08006ddc  00008068  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000384  08006ddc  00008384  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001319a  00000000  00000000  00008094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002486  00000000  00000000  0001b22e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  0001d6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d25  00000000  00000000  0001e748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025895  00000000  00000000  0001f46d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013502  00000000  00000000  00044d02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f803d  00000000  00000000  00058204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00150241  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048dc  00000000  00000000  00150284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00154b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000068 	.word	0x20000068
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006cec 	.word	0x08006cec

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000006c 	.word	0x2000006c
 8000214:	08006cec 	.word	0x08006cec

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b96a 	b.w	8000e50 <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9d08      	ldr	r5, [sp, #32]
 8000b9a:	460c      	mov	r4, r1
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d14e      	bne.n	8000c3e <__udivmoddi4+0xaa>
 8000ba0:	4694      	mov	ip, r2
 8000ba2:	458c      	cmp	ip, r1
 8000ba4:	4686      	mov	lr, r0
 8000ba6:	fab2 f282 	clz	r2, r2
 8000baa:	d962      	bls.n	8000c72 <__udivmoddi4+0xde>
 8000bac:	b14a      	cbz	r2, 8000bc2 <__udivmoddi4+0x2e>
 8000bae:	f1c2 0320 	rsb	r3, r2, #32
 8000bb2:	4091      	lsls	r1, r2
 8000bb4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bb8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bbc:	4319      	orrs	r1, r3
 8000bbe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bc6:	fa1f f68c 	uxth.w	r6, ip
 8000bca:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bd2:	fb07 1114 	mls	r1, r7, r4, r1
 8000bd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bda:	fb04 f106 	mul.w	r1, r4, r6
 8000bde:	4299      	cmp	r1, r3
 8000be0:	d90a      	bls.n	8000bf8 <__udivmoddi4+0x64>
 8000be2:	eb1c 0303 	adds.w	r3, ip, r3
 8000be6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bea:	f080 8112 	bcs.w	8000e12 <__udivmoddi4+0x27e>
 8000bee:	4299      	cmp	r1, r3
 8000bf0:	f240 810f 	bls.w	8000e12 <__udivmoddi4+0x27e>
 8000bf4:	3c02      	subs	r4, #2
 8000bf6:	4463      	add	r3, ip
 8000bf8:	1a59      	subs	r1, r3, r1
 8000bfa:	fa1f f38e 	uxth.w	r3, lr
 8000bfe:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c02:	fb07 1110 	mls	r1, r7, r0, r1
 8000c06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c0a:	fb00 f606 	mul.w	r6, r0, r6
 8000c0e:	429e      	cmp	r6, r3
 8000c10:	d90a      	bls.n	8000c28 <__udivmoddi4+0x94>
 8000c12:	eb1c 0303 	adds.w	r3, ip, r3
 8000c16:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c1a:	f080 80fc 	bcs.w	8000e16 <__udivmoddi4+0x282>
 8000c1e:	429e      	cmp	r6, r3
 8000c20:	f240 80f9 	bls.w	8000e16 <__udivmoddi4+0x282>
 8000c24:	4463      	add	r3, ip
 8000c26:	3802      	subs	r0, #2
 8000c28:	1b9b      	subs	r3, r3, r6
 8000c2a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c2e:	2100      	movs	r1, #0
 8000c30:	b11d      	cbz	r5, 8000c3a <__udivmoddi4+0xa6>
 8000c32:	40d3      	lsrs	r3, r2
 8000c34:	2200      	movs	r2, #0
 8000c36:	e9c5 3200 	strd	r3, r2, [r5]
 8000c3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3e:	428b      	cmp	r3, r1
 8000c40:	d905      	bls.n	8000c4e <__udivmoddi4+0xba>
 8000c42:	b10d      	cbz	r5, 8000c48 <__udivmoddi4+0xb4>
 8000c44:	e9c5 0100 	strd	r0, r1, [r5]
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4608      	mov	r0, r1
 8000c4c:	e7f5      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000c4e:	fab3 f183 	clz	r1, r3
 8000c52:	2900      	cmp	r1, #0
 8000c54:	d146      	bne.n	8000ce4 <__udivmoddi4+0x150>
 8000c56:	42a3      	cmp	r3, r4
 8000c58:	d302      	bcc.n	8000c60 <__udivmoddi4+0xcc>
 8000c5a:	4290      	cmp	r0, r2
 8000c5c:	f0c0 80f0 	bcc.w	8000e40 <__udivmoddi4+0x2ac>
 8000c60:	1a86      	subs	r6, r0, r2
 8000c62:	eb64 0303 	sbc.w	r3, r4, r3
 8000c66:	2001      	movs	r0, #1
 8000c68:	2d00      	cmp	r5, #0
 8000c6a:	d0e6      	beq.n	8000c3a <__udivmoddi4+0xa6>
 8000c6c:	e9c5 6300 	strd	r6, r3, [r5]
 8000c70:	e7e3      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000c72:	2a00      	cmp	r2, #0
 8000c74:	f040 8090 	bne.w	8000d98 <__udivmoddi4+0x204>
 8000c78:	eba1 040c 	sub.w	r4, r1, ip
 8000c7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c80:	fa1f f78c 	uxth.w	r7, ip
 8000c84:	2101      	movs	r1, #1
 8000c86:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c8a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c8e:	fb08 4416 	mls	r4, r8, r6, r4
 8000c92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c96:	fb07 f006 	mul.w	r0, r7, r6
 8000c9a:	4298      	cmp	r0, r3
 8000c9c:	d908      	bls.n	8000cb0 <__udivmoddi4+0x11c>
 8000c9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ca6:	d202      	bcs.n	8000cae <__udivmoddi4+0x11a>
 8000ca8:	4298      	cmp	r0, r3
 8000caa:	f200 80cd 	bhi.w	8000e48 <__udivmoddi4+0x2b4>
 8000cae:	4626      	mov	r6, r4
 8000cb0:	1a1c      	subs	r4, r3, r0
 8000cb2:	fa1f f38e 	uxth.w	r3, lr
 8000cb6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cba:	fb08 4410 	mls	r4, r8, r0, r4
 8000cbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cc2:	fb00 f707 	mul.w	r7, r0, r7
 8000cc6:	429f      	cmp	r7, r3
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x148>
 8000cca:	eb1c 0303 	adds.w	r3, ip, r3
 8000cce:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x146>
 8000cd4:	429f      	cmp	r7, r3
 8000cd6:	f200 80b0 	bhi.w	8000e3a <__udivmoddi4+0x2a6>
 8000cda:	4620      	mov	r0, r4
 8000cdc:	1bdb      	subs	r3, r3, r7
 8000cde:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ce2:	e7a5      	b.n	8000c30 <__udivmoddi4+0x9c>
 8000ce4:	f1c1 0620 	rsb	r6, r1, #32
 8000ce8:	408b      	lsls	r3, r1
 8000cea:	fa22 f706 	lsr.w	r7, r2, r6
 8000cee:	431f      	orrs	r7, r3
 8000cf0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cf4:	fa04 f301 	lsl.w	r3, r4, r1
 8000cf8:	ea43 030c 	orr.w	r3, r3, ip
 8000cfc:	40f4      	lsrs	r4, r6
 8000cfe:	fa00 f801 	lsl.w	r8, r0, r1
 8000d02:	0c38      	lsrs	r0, r7, #16
 8000d04:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d08:	fbb4 fef0 	udiv	lr, r4, r0
 8000d0c:	fa1f fc87 	uxth.w	ip, r7
 8000d10:	fb00 441e 	mls	r4, r0, lr, r4
 8000d14:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d18:	fb0e f90c 	mul.w	r9, lr, ip
 8000d1c:	45a1      	cmp	r9, r4
 8000d1e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x1a6>
 8000d24:	193c      	adds	r4, r7, r4
 8000d26:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d2a:	f080 8084 	bcs.w	8000e36 <__udivmoddi4+0x2a2>
 8000d2e:	45a1      	cmp	r9, r4
 8000d30:	f240 8081 	bls.w	8000e36 <__udivmoddi4+0x2a2>
 8000d34:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d38:	443c      	add	r4, r7
 8000d3a:	eba4 0409 	sub.w	r4, r4, r9
 8000d3e:	fa1f f983 	uxth.w	r9, r3
 8000d42:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d46:	fb00 4413 	mls	r4, r0, r3, r4
 8000d4a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d4e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d52:	45a4      	cmp	ip, r4
 8000d54:	d907      	bls.n	8000d66 <__udivmoddi4+0x1d2>
 8000d56:	193c      	adds	r4, r7, r4
 8000d58:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d5c:	d267      	bcs.n	8000e2e <__udivmoddi4+0x29a>
 8000d5e:	45a4      	cmp	ip, r4
 8000d60:	d965      	bls.n	8000e2e <__udivmoddi4+0x29a>
 8000d62:	3b02      	subs	r3, #2
 8000d64:	443c      	add	r4, r7
 8000d66:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d6a:	fba0 9302 	umull	r9, r3, r0, r2
 8000d6e:	eba4 040c 	sub.w	r4, r4, ip
 8000d72:	429c      	cmp	r4, r3
 8000d74:	46ce      	mov	lr, r9
 8000d76:	469c      	mov	ip, r3
 8000d78:	d351      	bcc.n	8000e1e <__udivmoddi4+0x28a>
 8000d7a:	d04e      	beq.n	8000e1a <__udivmoddi4+0x286>
 8000d7c:	b155      	cbz	r5, 8000d94 <__udivmoddi4+0x200>
 8000d7e:	ebb8 030e 	subs.w	r3, r8, lr
 8000d82:	eb64 040c 	sbc.w	r4, r4, ip
 8000d86:	fa04 f606 	lsl.w	r6, r4, r6
 8000d8a:	40cb      	lsrs	r3, r1
 8000d8c:	431e      	orrs	r6, r3
 8000d8e:	40cc      	lsrs	r4, r1
 8000d90:	e9c5 6400 	strd	r6, r4, [r5]
 8000d94:	2100      	movs	r1, #0
 8000d96:	e750      	b.n	8000c3a <__udivmoddi4+0xa6>
 8000d98:	f1c2 0320 	rsb	r3, r2, #32
 8000d9c:	fa20 f103 	lsr.w	r1, r0, r3
 8000da0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da4:	fa24 f303 	lsr.w	r3, r4, r3
 8000da8:	4094      	lsls	r4, r2
 8000daa:	430c      	orrs	r4, r1
 8000dac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dbc:	fb08 3110 	mls	r1, r8, r0, r3
 8000dc0:	0c23      	lsrs	r3, r4, #16
 8000dc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dc6:	fb00 f107 	mul.w	r1, r0, r7
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0x24c>
 8000dce:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dd6:	d22c      	bcs.n	8000e32 <__udivmoddi4+0x29e>
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d92a      	bls.n	8000e32 <__udivmoddi4+0x29e>
 8000ddc:	3802      	subs	r0, #2
 8000dde:	4463      	add	r3, ip
 8000de0:	1a5b      	subs	r3, r3, r1
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000de8:	fb08 3311 	mls	r3, r8, r1, r3
 8000dec:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df0:	fb01 f307 	mul.w	r3, r1, r7
 8000df4:	42a3      	cmp	r3, r4
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x276>
 8000df8:	eb1c 0404 	adds.w	r4, ip, r4
 8000dfc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e00:	d213      	bcs.n	8000e2a <__udivmoddi4+0x296>
 8000e02:	42a3      	cmp	r3, r4
 8000e04:	d911      	bls.n	8000e2a <__udivmoddi4+0x296>
 8000e06:	3902      	subs	r1, #2
 8000e08:	4464      	add	r4, ip
 8000e0a:	1ae4      	subs	r4, r4, r3
 8000e0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e10:	e739      	b.n	8000c86 <__udivmoddi4+0xf2>
 8000e12:	4604      	mov	r4, r0
 8000e14:	e6f0      	b.n	8000bf8 <__udivmoddi4+0x64>
 8000e16:	4608      	mov	r0, r1
 8000e18:	e706      	b.n	8000c28 <__udivmoddi4+0x94>
 8000e1a:	45c8      	cmp	r8, r9
 8000e1c:	d2ae      	bcs.n	8000d7c <__udivmoddi4+0x1e8>
 8000e1e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e22:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e26:	3801      	subs	r0, #1
 8000e28:	e7a8      	b.n	8000d7c <__udivmoddi4+0x1e8>
 8000e2a:	4631      	mov	r1, r6
 8000e2c:	e7ed      	b.n	8000e0a <__udivmoddi4+0x276>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	e799      	b.n	8000d66 <__udivmoddi4+0x1d2>
 8000e32:	4630      	mov	r0, r6
 8000e34:	e7d4      	b.n	8000de0 <__udivmoddi4+0x24c>
 8000e36:	46d6      	mov	lr, sl
 8000e38:	e77f      	b.n	8000d3a <__udivmoddi4+0x1a6>
 8000e3a:	4463      	add	r3, ip
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	e74d      	b.n	8000cdc <__udivmoddi4+0x148>
 8000e40:	4606      	mov	r6, r0
 8000e42:	4623      	mov	r3, r4
 8000e44:	4608      	mov	r0, r1
 8000e46:	e70f      	b.n	8000c68 <__udivmoddi4+0xd4>
 8000e48:	3e02      	subs	r6, #2
 8000e4a:	4463      	add	r3, ip
 8000e4c:	e730      	b.n	8000cb0 <__udivmoddi4+0x11c>
 8000e4e:	bf00      	nop

08000e50 <__aeabi_idiv0>:
 8000e50:	4770      	bx	lr
 8000e52:	bf00      	nop

08000e54 <mat_mult>:
float x_est[3] = {0, 0, 0};
float P_est[3][3] = {0};

float y;
// Matrix operations
void mat_mult(float a[3][3], float b[3][3], float result[3][3]) {
 8000e54:	b480      	push	{r7}
 8000e56:	b089      	sub	sp, #36	@ 0x24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8000e60:	2300      	movs	r3, #0
 8000e62:	61fb      	str	r3, [r7, #28]
 8000e64:	e05a      	b.n	8000f1c <mat_mult+0xc8>
        for (int j = 0; j < 3; j++) {
 8000e66:	2300      	movs	r3, #0
 8000e68:	61bb      	str	r3, [r7, #24]
 8000e6a:	e051      	b.n	8000f10 <mat_mult+0xbc>
            result[i][j] = 0;
 8000e6c:	69fa      	ldr	r2, [r7, #28]
 8000e6e:	4613      	mov	r3, r2
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	4413      	add	r3, r2
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	461a      	mov	r2, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	441a      	add	r2, r3
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	4413      	add	r3, r2
 8000e82:	f04f 0200 	mov.w	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
            for (int k = 0; k < 3; k++) {
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
 8000e8c:	e03a      	b.n	8000f04 <mat_mult+0xb0>
                result[i][j] += a[i][k] * b[k][j];
 8000e8e:	69fa      	ldr	r2, [r7, #28]
 8000e90:	4613      	mov	r3, r2
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	4413      	add	r3, r2
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	461a      	mov	r2, r3
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	441a      	add	r2, r3
 8000e9e:	69bb      	ldr	r3, [r7, #24]
 8000ea0:	009b      	lsls	r3, r3, #2
 8000ea2:	4413      	add	r3, r2
 8000ea4:	ed93 7a00 	vldr	s14, [r3]
 8000ea8:	69fa      	ldr	r2, [r7, #28]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	005b      	lsls	r3, r3, #1
 8000eae:	4413      	add	r3, r2
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	441a      	add	r2, r3
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	4413      	add	r3, r2
 8000ebe:	edd3 6a00 	vldr	s13, [r3]
 8000ec2:	697a      	ldr	r2, [r7, #20]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	005b      	lsls	r3, r3, #1
 8000ec8:	4413      	add	r3, r2
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	461a      	mov	r2, r3
 8000ece:	68bb      	ldr	r3, [r7, #8]
 8000ed0:	441a      	add	r2, r3
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	009b      	lsls	r3, r3, #2
 8000ed6:	4413      	add	r3, r2
 8000ed8:	edd3 7a00 	vldr	s15, [r3]
 8000edc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ee0:	69fa      	ldr	r2, [r7, #28]
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	4413      	add	r3, r2
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	461a      	mov	r2, r3
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	441a      	add	r2, r3
 8000ef0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	4413      	add	r3, r2
 8000efa:	edc3 7a00 	vstr	s15, [r3]
            for (int k = 0; k < 3; k++) {
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	3301      	adds	r3, #1
 8000f02:	617b      	str	r3, [r7, #20]
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	2b02      	cmp	r3, #2
 8000f08:	ddc1      	ble.n	8000e8e <mat_mult+0x3a>
        for (int j = 0; j < 3; j++) {
 8000f0a:	69bb      	ldr	r3, [r7, #24]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	61bb      	str	r3, [r7, #24]
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	ddaa      	ble.n	8000e6c <mat_mult+0x18>
    for (int i = 0; i < 3; i++) {
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	61fb      	str	r3, [r7, #28]
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	dda1      	ble.n	8000e66 <mat_mult+0x12>
            }
        }
    }
}
 8000f22:	bf00      	nop
 8000f24:	bf00      	nop
 8000f26:	3724      	adds	r7, #36	@ 0x24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <mat_add>:

void mat_add(float a[3][3], float b[3][3], float result[3][3]) {
 8000f30:	b480      	push	{r7}
 8000f32:	b087      	sub	sp, #28
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	60f8      	str	r0, [r7, #12]
 8000f38:	60b9      	str	r1, [r7, #8]
 8000f3a:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
 8000f40:	e034      	b.n	8000fac <mat_add+0x7c>
        for (int j = 0; j < 3; j++) {
 8000f42:	2300      	movs	r3, #0
 8000f44:	613b      	str	r3, [r7, #16]
 8000f46:	e02b      	b.n	8000fa0 <mat_add+0x70>
            result[i][j] = a[i][j] + b[i][j];
 8000f48:	697a      	ldr	r2, [r7, #20]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	005b      	lsls	r3, r3, #1
 8000f4e:	4413      	add	r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	461a      	mov	r2, r3
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	441a      	add	r2, r3
 8000f58:	693b      	ldr	r3, [r7, #16]
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	4413      	add	r3, r2
 8000f5e:	ed93 7a00 	vldr	s14, [r3]
 8000f62:	697a      	ldr	r2, [r7, #20]
 8000f64:	4613      	mov	r3, r2
 8000f66:	005b      	lsls	r3, r3, #1
 8000f68:	4413      	add	r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	441a      	add	r2, r3
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	4413      	add	r3, r2
 8000f78:	edd3 7a00 	vldr	s15, [r3]
 8000f7c:	697a      	ldr	r2, [r7, #20]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	4413      	add	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	461a      	mov	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	441a      	add	r2, r3
 8000f8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	4413      	add	r3, r2
 8000f96:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 3; j++) {
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	2b02      	cmp	r3, #2
 8000fa4:	ddd0      	ble.n	8000f48 <mat_add+0x18>
    for (int i = 0; i < 3; i++) {
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	617b      	str	r3, [r7, #20]
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	ddc7      	ble.n	8000f42 <mat_add+0x12>
        }
    }
}
 8000fb2:	bf00      	nop
 8000fb4:	bf00      	nop
 8000fb6:	371c      	adds	r7, #28
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <mat_sub>:

void mat_sub(float a[3][3], float b[3][3], float result[3][3]) {
 8000fc0:	b480      	push	{r7}
 8000fc2:	b087      	sub	sp, #28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	e034      	b.n	800103c <mat_sub+0x7c>
        for (int j = 0; j < 3; j++) {
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	e02b      	b.n	8001030 <mat_sub+0x70>
            result[i][j] = a[i][j] - b[i][j];
 8000fd8:	697a      	ldr	r2, [r7, #20]
 8000fda:	4613      	mov	r3, r2
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	4413      	add	r3, r2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	441a      	add	r2, r3
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4413      	add	r3, r2
 8000fee:	ed93 7a00 	vldr	s14, [r3]
 8000ff2:	697a      	ldr	r2, [r7, #20]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	005b      	lsls	r3, r3, #1
 8000ff8:	4413      	add	r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	68bb      	ldr	r3, [r7, #8]
 8001000:	441a      	add	r2, r3
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	4413      	add	r3, r2
 8001008:	edd3 7a00 	vldr	s15, [r3]
 800100c:	697a      	ldr	r2, [r7, #20]
 800100e:	4613      	mov	r3, r2
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	4413      	add	r3, r2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	461a      	mov	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	441a      	add	r2, r3
 800101c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	4413      	add	r3, r2
 8001026:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 3; j++) {
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	3301      	adds	r3, #1
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	2b02      	cmp	r3, #2
 8001034:	ddd0      	ble.n	8000fd8 <mat_sub+0x18>
    for (int i = 0; i < 3; i++) {
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	3301      	adds	r3, #1
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	2b02      	cmp	r3, #2
 8001040:	ddc7      	ble.n	8000fd2 <mat_sub+0x12>
        }
    }
}
 8001042:	bf00      	nop
 8001044:	bf00      	nop
 8001046:	371c      	adds	r7, #28
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr

08001050 <mat_transpose>:

void mat_transpose(float a[1][3], float result[3][1]) {
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 800105a:	2300      	movs	r3, #0
 800105c:	60fb      	str	r3, [r7, #12]
 800105e:	e00c      	b.n	800107a <mat_transpose+0x2a>
        result[i][0] = a[0][i];
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	009b      	lsls	r3, r3, #2
 8001064:	683a      	ldr	r2, [r7, #0]
 8001066:	4413      	add	r3, r2
 8001068:	6879      	ldr	r1, [r7, #4]
 800106a:	68fa      	ldr	r2, [r7, #12]
 800106c:	0092      	lsls	r2, r2, #2
 800106e:	440a      	add	r2, r1
 8001070:	6812      	ldr	r2, [r2, #0]
 8001072:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	3301      	adds	r3, #1
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	2b02      	cmp	r3, #2
 800107e:	ddef      	ble.n	8001060 <mat_transpose+0x10>
    }
}
 8001080:	bf00      	nop
 8001082:	bf00      	nop
 8001084:	3714      	adds	r7, #20
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <mat_transpose_3x3>:
            result[i][j] = a[i][j] * scalar;
        }
    }
}

void mat_transpose_3x3(float a[3][3], float result[3][3]) {
 800108e:	b480      	push	{r7}
 8001090:	b085      	sub	sp, #20
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
 8001096:	6039      	str	r1, [r7, #0]
	for (int i = 0; i < 3; i++) {
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	e023      	b.n	80010e6 <mat_transpose_3x3+0x58>
		for (int j = 0; j < 3; j++) {
 800109e:	2300      	movs	r3, #0
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	e01a      	b.n	80010da <mat_transpose_3x3+0x4c>
			result[j][i] = a[i][j];
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	4613      	mov	r3, r2
 80010a8:	005b      	lsls	r3, r3, #1
 80010aa:	4413      	add	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	461a      	mov	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	1898      	adds	r0, r3, r2
 80010b4:	68ba      	ldr	r2, [r7, #8]
 80010b6:	4613      	mov	r3, r2
 80010b8:	005b      	lsls	r3, r3, #1
 80010ba:	4413      	add	r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	461a      	mov	r2, r3
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	1899      	adds	r1, r3, r2
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4403      	add	r3, r0
 80010ca:	681a      	ldr	r2, [r3, #0]
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	440b      	add	r3, r1
 80010d2:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < 3; j++) {
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	3301      	adds	r3, #1
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	2b02      	cmp	r3, #2
 80010de:	dde1      	ble.n	80010a4 <mat_transpose_3x3+0x16>
	for (int i = 0; i < 3; i++) {
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	3301      	adds	r3, #1
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	ddd8      	ble.n	800109e <mat_transpose_3x3+0x10>
		}
	}
}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3714      	adds	r7, #20
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <mat_transpose_3x1>:
void mat_transpose_3x1(float a[3][1], float result[1][3]) {
 80010fa:	b480      	push	{r7}
 80010fc:	b085      	sub	sp, #20
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < 3; i++) {
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	e00c      	b.n	8001124 <mat_transpose_3x1+0x2a>
        result[0][i] = a[i][0];
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	4413      	add	r3, r2
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	6839      	ldr	r1, [r7, #0]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	440b      	add	r3, r1
 800111c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	3301      	adds	r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2b02      	cmp	r3, #2
 8001128:	ddef      	ble.n	800110a <mat_transpose_3x1+0x10>
    }
}
 800112a:	bf00      	nop
 800112c:	bf00      	nop
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr

08001138 <mat_mult_1x3_3x3>:

void mat_mult_1x3_3x3(float a[1][3], float b[3][3], float result[1][3]) {
 8001138:	b480      	push	{r7}
 800113a:	b087      	sub	sp, #28
 800113c:	af00      	add	r7, sp, #0
 800113e:	60f8      	str	r0, [r7, #12]
 8001140:	60b9      	str	r1, [r7, #8]
 8001142:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 3; i++) {
 8001144:	2300      	movs	r3, #0
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	e035      	b.n	80011b6 <mat_mult_1x3_3x3+0x7e>
        result[0][i] = 0;
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	4413      	add	r3, r2
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < 3; j++) {
 8001158:	2300      	movs	r3, #0
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	e025      	b.n	80011aa <mat_mult_1x3_3x3+0x72>
            result[0][i] += a[0][j] * b[j][i];
 800115e:	687a      	ldr	r2, [r7, #4]
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	4413      	add	r3, r2
 8001166:	ed93 7a00 	vldr	s14, [r3]
 800116a:	68fa      	ldr	r2, [r7, #12]
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4413      	add	r3, r2
 8001172:	edd3 6a00 	vldr	s13, [r3]
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4613      	mov	r3, r2
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	4413      	add	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	461a      	mov	r2, r3
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	441a      	add	r2, r3
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	edd3 7a00 	vldr	s15, [r3]
 8001190:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001194:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	009b      	lsls	r3, r3, #2
 800119e:	4413      	add	r3, r2
 80011a0:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 3; j++) {
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	3301      	adds	r3, #1
 80011a8:	613b      	str	r3, [r7, #16]
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	ddd6      	ble.n	800115e <mat_mult_1x3_3x3+0x26>
    for (int i = 0; i < 3; i++) {
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	3301      	adds	r3, #1
 80011b4:	617b      	str	r3, [r7, #20]
 80011b6:	697b      	ldr	r3, [r7, #20]
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	ddc6      	ble.n	800114a <mat_mult_1x3_3x3+0x12>
        }
    }
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	371c      	adds	r7, #28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <mat_mult_3x1_1x3>:
void mat_mult_3x1_1x3(float a[3][1], float b[1][3], float result[3][3]) {
 80011ca:	b480      	push	{r7}
 80011cc:	b087      	sub	sp, #28
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	60f8      	str	r0, [r7, #12]
 80011d2:	60b9      	str	r1, [r7, #8]
 80011d4:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 3; i++) {
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
 80011da:	e026      	b.n	800122a <mat_mult_3x1_1x3+0x60>
        for (int j = 0; j < 3; j++) {
 80011dc:	2300      	movs	r3, #0
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	e01d      	b.n	800121e <mat_mult_3x1_1x3+0x54>
            result[i][j] = a[i][0] * b[0][j]; // Perform the multiplication for each element
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	68fa      	ldr	r2, [r7, #12]
 80011e8:	4413      	add	r3, r2
 80011ea:	ed93 7a00 	vldr	s14, [r3]
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	edd3 7a00 	vldr	s15, [r3]
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	4613      	mov	r3, r2
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	4413      	add	r3, r2
 8001202:	009b      	lsls	r3, r3, #2
 8001204:	461a      	mov	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	441a      	add	r2, r3
 800120a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	4413      	add	r3, r2
 8001214:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 3; j++) {
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	3301      	adds	r3, #1
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	2b02      	cmp	r3, #2
 8001222:	ddde      	ble.n	80011e2 <mat_mult_3x1_1x3+0x18>
    for (int i = 0; i < 3; i++) {
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	3301      	adds	r3, #1
 8001228:	617b      	str	r3, [r7, #20]
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	2b02      	cmp	r3, #2
 800122e:	ddd5      	ble.n	80011dc <mat_mult_3x1_1x3+0x12>
        }
    }
}
 8001230:	bf00      	nop
 8001232:	bf00      	nop
 8001234:	371c      	adds	r7, #28
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <mat_mult_1x3_3x1>:
void mat_mult_1x3_3x1(float a[1][3], float b[3][1], float *result) {
 800123e:	b480      	push	{r7}
 8001240:	b087      	sub	sp, #28
 8001242:	af00      	add	r7, sp, #0
 8001244:	60f8      	str	r0, [r7, #12]
 8001246:	60b9      	str	r1, [r7, #8]
 8001248:	607a      	str	r2, [r7, #4]
    *result = 0; // Initialize the result as 0
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f04f 0200 	mov.w	r2, #0
 8001250:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
 8001256:	e018      	b.n	800128a <mat_mult_1x3_3x1+0x4c>
        *result += a[0][i] * b[i][0]; // Perform the multiplication and accumulate
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	ed93 7a00 	vldr	s14, [r3]
 800125e:	68fa      	ldr	r2, [r7, #12]
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4413      	add	r3, r2
 8001266:	edd3 6a00 	vldr	s13, [r3]
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	68ba      	ldr	r2, [r7, #8]
 8001270:	4413      	add	r3, r2
 8001272:	edd3 7a00 	vldr	s15, [r3]
 8001276:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800127a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 3; i++) {
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	3301      	adds	r3, #1
 8001288:	617b      	str	r3, [r7, #20]
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	2b02      	cmp	r3, #2
 800128e:	dde3      	ble.n	8001258 <mat_mult_1x3_3x1+0x1a>
    }
}
 8001290:	bf00      	nop
 8001292:	bf00      	nop
 8001294:	371c      	adds	r7, #28
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <mat_mult_3x3_3x1>:

void mat_mult_3x3_3x1(float a[3][3], float b[3][1], float result[3][1]) {
 800129e:	b480      	push	{r7}
 80012a0:	b087      	sub	sp, #28
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	60f8      	str	r0, [r7, #12]
 80012a6:	60b9      	str	r1, [r7, #8]
 80012a8:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 3; i++) {
 80012aa:	2300      	movs	r3, #0
 80012ac:	617b      	str	r3, [r7, #20]
 80012ae:	e035      	b.n	800131c <mat_mult_3x3_3x1+0x7e>
        result[i][0] = 0; // Initialize each element of the result
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	4413      	add	r3, r2
 80012b8:	f04f 0200 	mov.w	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < 3; j++) {
 80012be:	2300      	movs	r3, #0
 80012c0:	613b      	str	r3, [r7, #16]
 80012c2:	e025      	b.n	8001310 <mat_mult_3x3_3x1+0x72>
            result[i][0] += a[i][j] * b[j][0]; // Perform multiplication and accumulate
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	687a      	ldr	r2, [r7, #4]
 80012ca:	4413      	add	r3, r2
 80012cc:	ed93 7a00 	vldr	s14, [r3]
 80012d0:	697a      	ldr	r2, [r7, #20]
 80012d2:	4613      	mov	r3, r2
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	4413      	add	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	461a      	mov	r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	441a      	add	r2, r3
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4413      	add	r3, r2
 80012e6:	edd3 6a00 	vldr	s13, [r3]
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	4413      	add	r3, r2
 80012f2:	edd3 7a00 	vldr	s15, [r3]
 80012f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001306:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 3; j++) {
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	3301      	adds	r3, #1
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	2b02      	cmp	r3, #2
 8001314:	ddd6      	ble.n	80012c4 <mat_mult_3x3_3x1+0x26>
    for (int i = 0; i < 3; i++) {
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	3301      	adds	r3, #1
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	2b02      	cmp	r3, #2
 8001320:	ddc6      	ble.n	80012b0 <mat_mult_3x3_3x1+0x12>
        }
    }
}
 8001322:	bf00      	nop
 8001324:	bf00      	nop
 8001326:	371c      	adds	r7, #28
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <mat_mult_3x3_1x3>:
void mat_mult_3x3_1x3(float a[3][3], float b[1][3], float result[3][3]) {
 8001330:	b480      	push	{r7}
 8001332:	b087      	sub	sp, #28
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
    for (int i = 0; i < 3; i++) {
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	e02d      	b.n	800139e <mat_mult_3x3_1x3+0x6e>
        for (int j = 0; j < 3; j++) {
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	e024      	b.n	8001392 <mat_mult_3x3_1x3+0x62>
            result[i][j] = a[i][j] * b[0][j]; // Perform the multiplication for each element
 8001348:	697a      	ldr	r2, [r7, #20]
 800134a:	4613      	mov	r3, r2
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	4413      	add	r3, r2
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	461a      	mov	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	441a      	add	r2, r3
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	ed93 7a00 	vldr	s14, [r3]
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	009b      	lsls	r3, r3, #2
 8001368:	4413      	add	r3, r2
 800136a:	edd3 7a00 	vldr	s15, [r3]
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	4613      	mov	r3, r2
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	4413      	add	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	461a      	mov	r2, r3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	441a      	add	r2, r3
 800137e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	4413      	add	r3, r2
 8001388:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 3; j++) {
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	3301      	adds	r3, #1
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	2b02      	cmp	r3, #2
 8001396:	ddd7      	ble.n	8001348 <mat_mult_3x3_1x3+0x18>
    for (int i = 0; i < 3; i++) {
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	3301      	adds	r3, #1
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	ddce      	ble.n	8001342 <mat_mult_3x3_1x3+0x12>
        }
    }
}
 80013a4:	bf00      	nop
 80013a6:	bf00      	nop
 80013a8:	371c      	adds	r7, #28
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr

080013b2 <kalman_predict>:
void kalman_predict(float x_est[3], float P_est[3][3], float A[3][3], float G[3][1], float Q) {
 80013b2:	b580      	push	{r7, lr}
 80013b4:	b0b8      	sub	sp, #224	@ 0xe0
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6178      	str	r0, [r7, #20]
 80013ba:	6139      	str	r1, [r7, #16]
 80013bc:	60fa      	str	r2, [r7, #12]
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	ed87 0a01 	vstr	s0, [r7, #4]
    // x_pred = A * x_est
    float x_pred[3] = {0};
 80013c4:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
    for (int i = 0; i < 3; i++) {
 80013d0:	2300      	movs	r3, #0
 80013d2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80013d6:	e03b      	b.n	8001450 <kalman_predict+0x9e>
        for (int j = 0; j < 3; j++) {
 80013d8:	2300      	movs	r3, #0
 80013da:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80013de:	e02e      	b.n	800143e <kalman_predict+0x8c>
            x_pred[i] += A[i][j] * x_est[j];
 80013e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	33e0      	adds	r3, #224	@ 0xe0
 80013e8:	443b      	add	r3, r7
 80013ea:	3b1c      	subs	r3, #28
 80013ec:	ed93 7a00 	vldr	s14, [r3]
 80013f0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80013f4:	4613      	mov	r3, r2
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	4413      	add	r3, r2
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	461a      	mov	r2, r3
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	441a      	add	r2, r3
 8001402:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	edd3 6a00 	vldr	s13, [r3]
 800140e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	4413      	add	r3, r2
 8001418:	edd3 7a00 	vldr	s15, [r3]
 800141c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001420:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001424:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	33e0      	adds	r3, #224	@ 0xe0
 800142c:	443b      	add	r3, r7
 800142e:	3b1c      	subs	r3, #28
 8001430:	edc3 7a00 	vstr	s15, [r3]
        for (int j = 0; j < 3; j++) {
 8001434:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001438:	3301      	adds	r3, #1
 800143a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800143e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001442:	2b02      	cmp	r3, #2
 8001444:	ddcc      	ble.n	80013e0 <kalman_predict+0x2e>
    for (int i = 0; i < 3; i++) {
 8001446:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800144a:	3301      	adds	r3, #1
 800144c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001450:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001454:	2b02      	cmp	r3, #2
 8001456:	ddbf      	ble.n	80013d8 <kalman_predict+0x26>
        }
    }

    // P_pred = A * P_est * A' + G * Q * G'
    float A_T[3][3];
    mat_transpose_3x3(A, A_T);
 8001458:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800145c:	4619      	mov	r1, r3
 800145e:	68f8      	ldr	r0, [r7, #12]
 8001460:	f7ff fe15 	bl	800108e <mat_transpose_3x3>

    float temp1[3][3];
    mat_mult(A, P_est, temp1);
 8001464:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001468:	461a      	mov	r2, r3
 800146a:	6939      	ldr	r1, [r7, #16]
 800146c:	68f8      	ldr	r0, [r7, #12]
 800146e:	f7ff fcf1 	bl	8000e54 <mat_mult>

    float temp2[3][3];
    mat_mult(temp1, A_T, temp2);
 8001472:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8001476:	f107 01a0 	add.w	r1, r7, #160	@ 0xa0
 800147a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff fce8 	bl	8000e54 <mat_mult>

    float G_Q[3][1];
    for (int i = 0; i < 3; i++) {
 8001484:	2300      	movs	r3, #0
 8001486:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800148a:	e017      	b.n	80014bc <kalman_predict+0x10a>
		G_Q[i][0] = G[i][0] * Q;
 800148c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	4413      	add	r3, r2
 8001496:	ed93 7a00 	vldr	s14, [r3]
 800149a:	edd7 7a01 	vldr	s15, [r7, #4]
 800149e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	33e0      	adds	r3, #224	@ 0xe0
 80014aa:	443b      	add	r3, r7
 80014ac:	3b94      	subs	r3, #148	@ 0x94
 80014ae:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 3; i++) {
 80014b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80014b6:	3301      	adds	r3, #1
 80014b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80014bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	dde3      	ble.n	800148c <kalman_predict+0xda>
	}
//    mat_scalar_mult(G, Q, G_Q);

    float G_T[1][3];
    mat_transpose_3x1(G, G_T);
 80014c4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80014c8:	4619      	mov	r1, r3
 80014ca:	68b8      	ldr	r0, [r7, #8]
 80014cc:	f7ff fe15 	bl	80010fa <mat_transpose_3x1>

    float G_Q_G_T[3][3];
    mat_mult_3x1_1x3(G_Q, G_T, G_Q_G_T);
 80014d0:	f107 021c 	add.w	r2, r7, #28
 80014d4:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80014d8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff fe74 	bl	80011ca <mat_mult_3x1_1x3>

    mat_add(temp2, G_Q_G_T, P_est);
 80014e2:	f107 011c 	add.w	r1, r7, #28
 80014e6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fd1f 	bl	8000f30 <mat_add>

    // Update the state estimate
    for (int i = 0; i < 3; i++) {
 80014f2:	2300      	movs	r3, #0
 80014f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80014f8:	e011      	b.n	800151e <kalman_predict+0x16c>
        x_est[i] = x_pred[i];
 80014fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	697a      	ldr	r2, [r7, #20]
 8001502:	4413      	add	r3, r2
 8001504:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8001508:	0092      	lsls	r2, r2, #2
 800150a:	32e0      	adds	r2, #224	@ 0xe0
 800150c:	443a      	add	r2, r7
 800150e:	3a1c      	subs	r2, #28
 8001510:	6812      	ldr	r2, [r2, #0]
 8001512:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 3; i++) {
 8001514:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001518:	3301      	adds	r3, #1
 800151a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800151e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001522:	2b02      	cmp	r3, #2
 8001524:	dde9      	ble.n	80014fa <kalman_predict+0x148>
    }
}
 8001526:	bf00      	nop
 8001528:	bf00      	nop
 800152a:	37e0      	adds	r7, #224	@ 0xe0
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <kalman_update>:

void kalman_update(float x_est[3], float P_est[3][3], float C[1][3], float R, float z) {
 8001530:	b5b0      	push	{r4, r5, r7, lr}
 8001532:	b0be      	sub	sp, #248	@ 0xf8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6178      	str	r0, [r7, #20]
 8001538:	6139      	str	r1, [r7, #16]
 800153a:	60fa      	str	r2, [r7, #12]
 800153c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001540:	edc7 0a01 	vstr	s1, [r7, #4]
    // y = z - C * x_pred
    float C_x[1] = {0};
 8001544:	f04f 0300 	mov.w	r3, #0
 8001548:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    for (int i = 0; i < 3; i++) {
 800154c:	2300      	movs	r3, #0
 800154e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001552:	e01a      	b.n	800158a <kalman_update+0x5a>
        C_x[0] += C[0][i] * x_est[i];
 8001554:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	4413      	add	r3, r2
 8001562:	edd3 6a00 	vldr	s13, [r3]
 8001566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	697a      	ldr	r2, [r7, #20]
 800156e:	4413      	add	r3, r2
 8001570:	edd3 7a00 	vldr	s15, [r3]
 8001574:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001578:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157c:	edc7 7a37 	vstr	s15, [r7, #220]	@ 0xdc
    for (int i = 0; i < 3; i++) {
 8001580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001584:	3301      	adds	r3, #1
 8001586:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800158a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800158e:	2b02      	cmp	r3, #2
 8001590:	dde0      	ble.n	8001554 <kalman_update+0x24>
    }

    y = z - C_x[0];
 8001592:	edd7 7a37 	vldr	s15, [r7, #220]	@ 0xdc
 8001596:	ed97 7a01 	vldr	s14, [r7, #4]
 800159a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800159e:	4b68      	ldr	r3, [pc, #416]	@ (8001740 <kalman_update+0x210>)
 80015a0:	edc3 7a00 	vstr	s15, [r3]

    // S = C * P_pred * C' + R
    float C_T[3][1];
    mat_transpose(C, C_T);
 80015a4:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80015a8:	4619      	mov	r1, r3
 80015aa:	68f8      	ldr	r0, [r7, #12]
 80015ac:	f7ff fd50 	bl	8001050 <mat_transpose>

    float temp1[1][3];
    mat_mult_1x3_3x3(C, P_est, temp1);
 80015b0:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80015b4:	461a      	mov	r2, r3
 80015b6:	6939      	ldr	r1, [r7, #16]
 80015b8:	68f8      	ldr	r0, [r7, #12]
 80015ba:	f7ff fdbd 	bl	8001138 <mat_mult_1x3_3x3>

    float temp2;
    mat_mult_1x3_3x1(temp1, C_T, &temp2);
 80015be:	f107 02c0 	add.w	r2, r7, #192	@ 0xc0
 80015c2:	f107 01d0 	add.w	r1, r7, #208	@ 0xd0
 80015c6:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff fe37 	bl	800123e <mat_mult_1x3_3x1>

    float S = temp2 + R;
 80015d0:	edd7 7a30 	vldr	s15, [r7, #192]	@ 0xc0
 80015d4:	ed97 7a02 	vldr	s14, [r7, #8]
 80015d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015dc:	edc7 7a38 	vstr	s15, [r7, #224]	@ 0xe0

    // K = P_pred * C' / S
    float temp3[3][1];
    mat_mult_3x3_3x1(P_est, C_T, temp3);
 80015e0:	f107 02b4 	add.w	r2, r7, #180	@ 0xb4
 80015e4:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 80015e8:	4619      	mov	r1, r3
 80015ea:	6938      	ldr	r0, [r7, #16]
 80015ec:	f7ff fe57 	bl	800129e <mat_mult_3x3_3x1>

    float K[3][1];
    for (int i = 0; i < 3; i++) {
 80015f0:	2300      	movs	r3, #0
 80015f2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80015f6:	e018      	b.n	800162a <kalman_update+0xfa>
        K[i][0] = temp3[i][0] / S;
 80015f8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	33f8      	adds	r3, #248	@ 0xf8
 8001600:	443b      	add	r3, r7
 8001602:	3b44      	subs	r3, #68	@ 0x44
 8001604:	edd3 6a00 	vldr	s13, [r3]
 8001608:	ed97 7a38 	vldr	s14, [r7, #224]	@ 0xe0
 800160c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001610:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	33f8      	adds	r3, #248	@ 0xf8
 8001618:	443b      	add	r3, r7
 800161a:	3b50      	subs	r3, #80	@ 0x50
 800161c:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 3; i++) {
 8001620:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8001624:	3301      	adds	r3, #1
 8001626:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800162a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800162e:	2b02      	cmp	r3, #2
 8001630:	dde2      	ble.n	80015f8 <kalman_update+0xc8>
    }

    // x_est = x_pred + K * y
    for (int i = 0; i < 3; i++) {
 8001632:	2300      	movs	r3, #0
 8001634:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001638:	e021      	b.n	800167e <kalman_update+0x14e>
        x_est[i] += K[i][0] * y;
 800163a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	697a      	ldr	r2, [r7, #20]
 8001642:	4413      	add	r3, r2
 8001644:	ed93 7a00 	vldr	s14, [r3]
 8001648:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	33f8      	adds	r3, #248	@ 0xf8
 8001650:	443b      	add	r3, r7
 8001652:	3b50      	subs	r3, #80	@ 0x50
 8001654:	edd3 6a00 	vldr	s13, [r3]
 8001658:	4b39      	ldr	r3, [pc, #228]	@ (8001740 <kalman_update+0x210>)
 800165a:	edd3 7a00 	vldr	s15, [r3]
 800165e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001662:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	697a      	ldr	r2, [r7, #20]
 800166a:	4413      	add	r3, r2
 800166c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001670:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < 3; i++) {
 8001674:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001678:	3301      	adds	r3, #1
 800167a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800167e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001682:	2b02      	cmp	r3, #2
 8001684:	ddd9      	ble.n	800163a <kalman_update+0x10a>
    }

    // P_est = (I - K * C) * P_pred
    float K_C[3][3];
    mat_mult_3x3_1x3(K, C, K_C);
 8001686:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 800168a:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800168e:	68f9      	ldr	r1, [r7, #12]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fe4d 	bl	8001330 <mat_mult_3x3_1x3>

    float I[3][3] = { {1, 0, 0}, {0, 1, 0}, {0, 0, 1} };
 8001696:	4b2b      	ldr	r3, [pc, #172]	@ (8001744 <kalman_update+0x214>)
 8001698:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 800169c:	461d      	mov	r5, r3
 800169e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016a6:	682b      	ldr	r3, [r5, #0]
 80016a8:	6023      	str	r3, [r4, #0]

    float I_minus_K_C[3][3];
    mat_sub(I, K_C, I_minus_K_C);
 80016aa:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80016ae:	f107 0184 	add.w	r1, r7, #132	@ 0x84
 80016b2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff fc82 	bl	8000fc0 <mat_sub>

    float new_P[3][3];
    mat_mult(I_minus_K_C, P_est, new_P);
 80016bc:	f107 0218 	add.w	r2, r7, #24
 80016c0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80016c4:	6939      	ldr	r1, [r7, #16]
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7ff fbc4 	bl	8000e54 <mat_mult>

    for (int i = 0; i < 3; i++) {
 80016cc:	2300      	movs	r3, #0
 80016ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80016d2:	e02c      	b.n	800172e <kalman_update+0x1fe>
        for (int j = 0; j < 3; j++) {
 80016d4:	2300      	movs	r3, #0
 80016d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80016da:	e01f      	b.n	800171c <kalman_update+0x1ec>
            P_est[i][j] = new_P[i][j];
 80016dc:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 80016e0:	4613      	mov	r3, r2
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	4413      	add	r3, r2
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	461a      	mov	r2, r3
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1899      	adds	r1, r3, r2
 80016ee:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 80016f2:	4613      	mov	r3, r2
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	4413      	add	r3, r2
 80016f8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80016fc:	4413      	add	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	33f8      	adds	r3, #248	@ 0xf8
 8001702:	443b      	add	r3, r7
 8001704:	3be0      	subs	r3, #224	@ 0xe0
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	440b      	add	r3, r1
 8001710:	601a      	str	r2, [r3, #0]
        for (int j = 0; j < 3; j++) {
 8001712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001716:	3301      	adds	r3, #1
 8001718:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800171c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001720:	2b02      	cmp	r3, #2
 8001722:	dddb      	ble.n	80016dc <kalman_update+0x1ac>
    for (int i = 0; i < 3; i++) {
 8001724:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001728:	3301      	adds	r3, #1
 800172a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800172e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8001732:	2b02      	cmp	r3, #2
 8001734:	ddce      	ble.n	80016d4 <kalman_update+0x1a4>
        }
    }
}
 8001736:	bf00      	nop
 8001738:	bf00      	nop
 800173a:	37f8      	adds	r7, #248	@ 0xf8
 800173c:	46bd      	mov	sp, r7
 800173e:	bdb0      	pop	{r4, r5, r7, pc}
 8001740:	200000a8 	.word	0x200000a8
 8001744:	08006d04 	.word	0x08006d04

08001748 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001748:	b5b0      	push	{r4, r5, r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800174e:	f001 fbca 	bl	8002ee6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001752:	f000 f8b7 	bl	80018c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001756:	f000 faa7 	bl	8001ca8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800175a:	f000 f8ff 	bl	800195c <MX_LPUART1_UART_Init>
  MX_TIM3_Init();
 800175e:	f000 f947 	bl	80019f0 <MX_TIM3_Init>
  MX_TIM5_Init();
 8001762:	f000 fa1d 	bl	8001ba0 <MX_TIM5_Init>
  MX_TIM4_Init();
 8001766:	f000 f999 	bl	8001a9c <MX_TIM4_Init>
  MX_TIM6_Init();
 800176a:	f000 fa67 	bl	8001c3c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim4);
 800176e:	4846      	ldr	r0, [pc, #280]	@ (8001888 <main+0x140>)
 8001770:	f002 ff74 	bl	800465c <HAL_TIM_Base_Start>
  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8001774:	213c      	movs	r1, #60	@ 0x3c
 8001776:	4845      	ldr	r0, [pc, #276]	@ (800188c <main+0x144>)
 8001778:	f003 fa72 	bl	8004c60 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800177c:	2100      	movs	r1, #0
 800177e:	4842      	ldr	r0, [pc, #264]	@ (8001888 <main+0x140>)
 8001780:	f003 f8b6 	bl	80048f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001784:	2104      	movs	r1, #4
 8001786:	4840      	ldr	r0, [pc, #256]	@ (8001888 <main+0x140>)
 8001788:	f003 f8b2 	bl	80048f0 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 800178c:	4840      	ldr	r0, [pc, #256]	@ (8001890 <main+0x148>)
 800178e:	f002 ffd5 	bl	800473c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);
 8001792:	4840      	ldr	r0, [pc, #256]	@ (8001894 <main+0x14c>)
 8001794:	f002 ffd2 	bl	800473c <HAL_TIM_Base_Start_IT>

  Poscontrol.kp = 0;
 8001798:	4b3f      	ldr	r3, [pc, #252]	@ (8001898 <main+0x150>)
 800179a:	f04f 0200 	mov.w	r2, #0
 800179e:	619a      	str	r2, [r3, #24]
  Poscontrol.ki = 0;
 80017a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001898 <main+0x150>)
 80017a2:	f04f 0200 	mov.w	r2, #0
 80017a6:	61da      	str	r2, [r3, #28]
  Poscontrol.kd = 0;
 80017a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001898 <main+0x150>)
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	621a      	str	r2, [r3, #32]
  Poscontrol.T = 0.0001;
 80017b0:	4b39      	ldr	r3, [pc, #228]	@ (8001898 <main+0x150>)
 80017b2:	4a3a      	ldr	r2, [pc, #232]	@ (800189c <main+0x154>)
 80017b4:	625a      	str	r2, [r3, #36]	@ 0x24


  Velocontrol.kp = 1.2;
 80017b6:	4b3a      	ldr	r3, [pc, #232]	@ (80018a0 <main+0x158>)
 80017b8:	4a3a      	ldr	r2, [pc, #232]	@ (80018a4 <main+0x15c>)
 80017ba:	619a      	str	r2, [r3, #24]
  Velocontrol.ki = 0.4;
 80017bc:	4b38      	ldr	r3, [pc, #224]	@ (80018a0 <main+0x158>)
 80017be:	4a3a      	ldr	r2, [pc, #232]	@ (80018a8 <main+0x160>)
 80017c0:	61da      	str	r2, [r3, #28]
  Velocontrol.kd = 0;
 80017c2:	4b37      	ldr	r3, [pc, #220]	@ (80018a0 <main+0x158>)
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	621a      	str	r2, [r3, #32]
  Velocontrol.T = 0.0001;
 80017ca:	4b35      	ldr	r3, [pc, #212]	@ (80018a0 <main+0x158>)
 80017cc:	4a33      	ldr	r2, [pc, #204]	@ (800189c <main+0x154>)
 80017ce:	625a      	str	r2, [r3, #36]	@ 0x24
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim3);
 80017d0:	4b2e      	ldr	r3, [pc, #184]	@ (800188c <main+0x144>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d6:	4a35      	ldr	r2, [pc, #212]	@ (80018ac <main+0x164>)
 80017d8:	6013      	str	r3, [r2, #0]
	  static uint64_t timestamp =0;
	  static uint64_t timestamp2 =0;
	  int64_t currentTime = micros();
 80017da:	f000 fb1d 	bl	8001e18 <micros>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	e9c7 2300 	strd	r2, r3, [r7]
	  if(currentTime > timestamp)
 80017e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017ea:	4931      	ldr	r1, [pc, #196]	@ (80018b0 <main+0x168>)
 80017ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80017f0:	4290      	cmp	r0, r2
 80017f2:	eb71 0303 	sbcs.w	r3, r1, r3
 80017f6:	d20c      	bcs.n	8001812 <main+0xca>
	  {
	  timestamp =currentTime + 100;//us
 80017f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80017fc:	f112 0464 	adds.w	r4, r2, #100	@ 0x64
 8001800:	f143 0500 	adc.w	r5, r3, #0
 8001804:	4622      	mov	r2, r4
 8001806:	462b      	mov	r3, r5
 8001808:	4929      	ldr	r1, [pc, #164]	@ (80018b0 <main+0x168>)
 800180a:	e9c1 2300 	strd	r2, r3, [r1]
	  QEIEncoderPosVel_Update();
 800180e:	f000 fb1f 	bl	8001e50 <QEIEncoderPosVel_Update>
	  }
	  if(start == 1)
 8001812:	4b28      	ldr	r3, [pc, #160]	@ (80018b4 <main+0x16c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d129      	bne.n	800186e <main+0x126>
	  {

		  Trajectory();
 800181a:	f000 fcb5 	bl	8002188 <Trajectory>
		  PIDposition();
 800181e:	f000 ff67 	bl	80026f0 <PIDposition>
		  if(fabs(Pos-Pos_Target)<0.01)
 8001822:	4b25      	ldr	r3, [pc, #148]	@ (80018b8 <main+0x170>)
 8001824:	ed93 7a00 	vldr	s14, [r3]
 8001828:	4b24      	ldr	r3, [pc, #144]	@ (80018bc <main+0x174>)
 800182a:	edd3 7a00 	vldr	s15, [r3]
 800182e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001832:	eef0 7ae7 	vabs.f32	s15, s15
 8001836:	ee17 0a90 	vmov	r0, s15
 800183a:	f7fe fe51 	bl	80004e0 <__aeabi_f2d>
 800183e:	a310      	add	r3, pc, #64	@ (adr r3, 8001880 <main+0x138>)
 8001840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001844:	f7ff f916 	bl	8000a74 <__aeabi_dcmplt>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d017      	beq.n	800187e <main+0x136>
		  {
			  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,0);
 800184e:	4b0e      	ldr	r3, [pc, #56]	@ (8001888 <main+0x140>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2200      	movs	r2, #0
 8001854:	635a      	str	r2, [r3, #52]	@ 0x34
			  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8001856:	4b0c      	ldr	r3, [pc, #48]	@ (8001888 <main+0x140>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2200      	movs	r2, #0
 800185c:	639a      	str	r2, [r3, #56]	@ 0x38
			  if(state_Tra == 3)
 800185e:	4b18      	ldr	r3, [pc, #96]	@ (80018c0 <main+0x178>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2b03      	cmp	r3, #3
 8001864:	d1b4      	bne.n	80017d0 <main+0x88>
			  {
			  start = 0;
 8001866:	4b13      	ldr	r3, [pc, #76]	@ (80018b4 <main+0x16c>)
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	e7b0      	b.n	80017d0 <main+0x88>
			  }
		  }
	  }
	  else
	  {
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1,0);
 800186e:	4b06      	ldr	r3, [pc, #24]	@ (8001888 <main+0x140>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2200      	movs	r2, #0
 8001874:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8001876:	4b04      	ldr	r3, [pc, #16]	@ (8001888 <main+0x140>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2200      	movs	r2, #0
 800187c:	639a      	str	r2, [r3, #56]	@ 0x38
  {
 800187e:	e7a7      	b.n	80017d0 <main+0x88>
 8001880:	47ae147b 	.word	0x47ae147b
 8001884:	3f847ae1 	.word	0x3f847ae1
 8001888:	2000018c 	.word	0x2000018c
 800188c:	20000140 	.word	0x20000140
 8001890:	20000224 	.word	0x20000224
 8001894:	200001d8 	.word	0x200001d8
 8001898:	20000300 	.word	0x20000300
 800189c:	38d1b717 	.word	0x38d1b717
 80018a0:	200002d8 	.word	0x200002d8
 80018a4:	3f99999a 	.word	0x3f99999a
 80018a8:	3ecccccd 	.word	0x3ecccccd
 80018ac:	20000328 	.word	0x20000328
 80018b0:	20000358 	.word	0x20000358
 80018b4:	20000270 	.word	0x20000270
 80018b8:	200002b0 	.word	0x200002b0
 80018bc:	20000044 	.word	0x20000044
 80018c0:	20000290 	.word	0x20000290

080018c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b094      	sub	sp, #80	@ 0x50
 80018c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ca:	f107 0318 	add.w	r3, r7, #24
 80018ce:	2238      	movs	r2, #56	@ 0x38
 80018d0:	2100      	movs	r1, #0
 80018d2:	4618      	mov	r0, r3
 80018d4:	f005 f9de 	bl	8006c94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
 80018e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80018e6:	2000      	movs	r0, #0
 80018e8:	f001 fe30 	bl	800354c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018ec:	2302      	movs	r3, #2
 80018ee:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80018f4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018f6:	2340      	movs	r3, #64	@ 0x40
 80018f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018fa:	2302      	movs	r3, #2
 80018fc:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018fe:	2302      	movs	r3, #2
 8001900:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001902:	2304      	movs	r3, #4
 8001904:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001906:	2355      	movs	r3, #85	@ 0x55
 8001908:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800190a:	2302      	movs	r3, #2
 800190c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800190e:	2302      	movs	r3, #2
 8001910:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001912:	2302      	movs	r3, #2
 8001914:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001916:	f107 0318 	add.w	r3, r7, #24
 800191a:	4618      	mov	r0, r3
 800191c:	f001 feca 	bl	80036b4 <HAL_RCC_OscConfig>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001926:	f001 f917 	bl	8002b58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800192a:	230f      	movs	r3, #15
 800192c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800192e:	2303      	movs	r3, #3
 8001930:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001932:	2300      	movs	r3, #0
 8001934:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001936:	2300      	movs	r3, #0
 8001938:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800193e:	1d3b      	adds	r3, r7, #4
 8001940:	2104      	movs	r1, #4
 8001942:	4618      	mov	r0, r3
 8001944:	f002 f9c8 	bl	8003cd8 <HAL_RCC_ClockConfig>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800194e:	f001 f903 	bl	8002b58 <Error_Handler>
  }
}
 8001952:	bf00      	nop
 8001954:	3750      	adds	r7, #80	@ 0x50
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
	...

0800195c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001960:	4b21      	ldr	r3, [pc, #132]	@ (80019e8 <MX_LPUART1_UART_Init+0x8c>)
 8001962:	4a22      	ldr	r2, [pc, #136]	@ (80019ec <MX_LPUART1_UART_Init+0x90>)
 8001964:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001966:	4b20      	ldr	r3, [pc, #128]	@ (80019e8 <MX_LPUART1_UART_Init+0x8c>)
 8001968:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800196c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800196e:	4b1e      	ldr	r3, [pc, #120]	@ (80019e8 <MX_LPUART1_UART_Init+0x8c>)
 8001970:	2200      	movs	r2, #0
 8001972:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001974:	4b1c      	ldr	r3, [pc, #112]	@ (80019e8 <MX_LPUART1_UART_Init+0x8c>)
 8001976:	2200      	movs	r2, #0
 8001978:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800197a:	4b1b      	ldr	r3, [pc, #108]	@ (80019e8 <MX_LPUART1_UART_Init+0x8c>)
 800197c:	2200      	movs	r2, #0
 800197e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001980:	4b19      	ldr	r3, [pc, #100]	@ (80019e8 <MX_LPUART1_UART_Init+0x8c>)
 8001982:	220c      	movs	r2, #12
 8001984:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001986:	4b18      	ldr	r3, [pc, #96]	@ (80019e8 <MX_LPUART1_UART_Init+0x8c>)
 8001988:	2200      	movs	r2, #0
 800198a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800198c:	4b16      	ldr	r3, [pc, #88]	@ (80019e8 <MX_LPUART1_UART_Init+0x8c>)
 800198e:	2200      	movs	r2, #0
 8001990:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001992:	4b15      	ldr	r3, [pc, #84]	@ (80019e8 <MX_LPUART1_UART_Init+0x8c>)
 8001994:	2200      	movs	r2, #0
 8001996:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001998:	4b13      	ldr	r3, [pc, #76]	@ (80019e8 <MX_LPUART1_UART_Init+0x8c>)
 800199a:	2200      	movs	r2, #0
 800199c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800199e:	4812      	ldr	r0, [pc, #72]	@ (80019e8 <MX_LPUART1_UART_Init+0x8c>)
 80019a0:	f004 fb0a 	bl	8005fb8 <HAL_UART_Init>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80019aa:	f001 f8d5 	bl	8002b58 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019ae:	2100      	movs	r1, #0
 80019b0:	480d      	ldr	r0, [pc, #52]	@ (80019e8 <MX_LPUART1_UART_Init+0x8c>)
 80019b2:	f005 f8a5 	bl	8006b00 <HAL_UARTEx_SetTxFifoThreshold>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80019bc:	f001 f8cc 	bl	8002b58 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80019c0:	2100      	movs	r1, #0
 80019c2:	4809      	ldr	r0, [pc, #36]	@ (80019e8 <MX_LPUART1_UART_Init+0x8c>)
 80019c4:	f005 f8da 	bl	8006b7c <HAL_UARTEx_SetRxFifoThreshold>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80019ce:	f001 f8c3 	bl	8002b58 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80019d2:	4805      	ldr	r0, [pc, #20]	@ (80019e8 <MX_LPUART1_UART_Init+0x8c>)
 80019d4:	f005 f85b 	bl	8006a8e <HAL_UARTEx_DisableFifoMode>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d001      	beq.n	80019e2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80019de:	f001 f8bb 	bl	8002b58 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	200000ac 	.word	0x200000ac
 80019ec:	40008000 	.word	0x40008000

080019f0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08c      	sub	sp, #48	@ 0x30
 80019f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019f6:	f107 030c 	add.w	r3, r7, #12
 80019fa:	2224      	movs	r2, #36	@ 0x24
 80019fc:	2100      	movs	r1, #0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f005 f948 	bl	8006c94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a04:	463b      	mov	r3, r7
 8001a06:	2200      	movs	r2, #0
 8001a08:	601a      	str	r2, [r3, #0]
 8001a0a:	605a      	str	r2, [r3, #4]
 8001a0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a0e:	4b21      	ldr	r3, [pc, #132]	@ (8001a94 <MX_TIM3_Init+0xa4>)
 8001a10:	4a21      	ldr	r2, [pc, #132]	@ (8001a98 <MX_TIM3_Init+0xa8>)
 8001a12:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a14:	4b1f      	ldr	r3, [pc, #124]	@ (8001a94 <MX_TIM3_Init+0xa4>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001a94 <MX_TIM3_Init+0xa4>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64511;
 8001a20:	4b1c      	ldr	r3, [pc, #112]	@ (8001a94 <MX_TIM3_Init+0xa4>)
 8001a22:	f64f 32ff 	movw	r2, #64511	@ 0xfbff
 8001a26:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a28:	4b1a      	ldr	r3, [pc, #104]	@ (8001a94 <MX_TIM3_Init+0xa4>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a2e:	4b19      	ldr	r3, [pc, #100]	@ (8001a94 <MX_TIM3_Init+0xa4>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a34:	2303      	movs	r3, #3
 8001a36:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a40:	2300      	movs	r3, #0
 8001a42:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a50:	2300      	movs	r3, #0
 8001a52:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001a54:	2300      	movs	r3, #0
 8001a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a58:	f107 030c 	add.w	r3, r7, #12
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	480d      	ldr	r0, [pc, #52]	@ (8001a94 <MX_TIM3_Init+0xa4>)
 8001a60:	f003 f858 	bl	8004b14 <HAL_TIM_Encoder_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001a6a:	f001 f875 	bl	8002b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a72:	2300      	movs	r3, #0
 8001a74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a76:	463b      	mov	r3, r7
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4806      	ldr	r0, [pc, #24]	@ (8001a94 <MX_TIM3_Init+0xa4>)
 8001a7c:	f004 f9c0 	bl	8005e00 <HAL_TIMEx_MasterConfigSynchronization>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001a86:	f001 f867 	bl	8002b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a8a:	bf00      	nop
 8001a8c:	3730      	adds	r7, #48	@ 0x30
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000140 	.word	0x20000140
 8001a98:	40000400 	.word	0x40000400

08001a9c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b08e      	sub	sp, #56	@ 0x38
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aa2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	609a      	str	r2, [r3, #8]
 8001aae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ab0:	f107 031c 	add.w	r3, r7, #28
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001abc:	463b      	mov	r3, r7
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	605a      	str	r2, [r3, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
 8001ac6:	60da      	str	r2, [r3, #12]
 8001ac8:	611a      	str	r2, [r3, #16]
 8001aca:	615a      	str	r2, [r3, #20]
 8001acc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ace:	4b32      	ldr	r3, [pc, #200]	@ (8001b98 <MX_TIM4_Init+0xfc>)
 8001ad0:	4a32      	ldr	r2, [pc, #200]	@ (8001b9c <MX_TIM4_Init+0x100>)
 8001ad2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8001ad4:	4b30      	ldr	r3, [pc, #192]	@ (8001b98 <MX_TIM4_Init+0xfc>)
 8001ad6:	22a9      	movs	r2, #169	@ 0xa9
 8001ad8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ada:	4b2f      	ldr	r3, [pc, #188]	@ (8001b98 <MX_TIM4_Init+0xfc>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8001ae0:	4b2d      	ldr	r3, [pc, #180]	@ (8001b98 <MX_TIM4_Init+0xfc>)
 8001ae2:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001ae6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae8:	4b2b      	ldr	r3, [pc, #172]	@ (8001b98 <MX_TIM4_Init+0xfc>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aee:	4b2a      	ldr	r3, [pc, #168]	@ (8001b98 <MX_TIM4_Init+0xfc>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001af4:	4828      	ldr	r0, [pc, #160]	@ (8001b98 <MX_TIM4_Init+0xfc>)
 8001af6:	f002 fd59 	bl	80045ac <HAL_TIM_Base_Init>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8001b00:	f001 f82a 	bl	8002b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b04:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b08:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b0a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4821      	ldr	r0, [pc, #132]	@ (8001b98 <MX_TIM4_Init+0xfc>)
 8001b12:	f003 fb97 	bl	8005244 <HAL_TIM_ConfigClockSource>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8001b1c:	f001 f81c 	bl	8002b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001b20:	481d      	ldr	r0, [pc, #116]	@ (8001b98 <MX_TIM4_Init+0xfc>)
 8001b22:	f002 fe83 	bl	800482c <HAL_TIM_PWM_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8001b2c:	f001 f814 	bl	8002b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b30:	2300      	movs	r3, #0
 8001b32:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b34:	2300      	movs	r3, #0
 8001b36:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b38:	f107 031c 	add.w	r3, r7, #28
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4816      	ldr	r0, [pc, #88]	@ (8001b98 <MX_TIM4_Init+0xfc>)
 8001b40:	f004 f95e 	bl	8005e00 <HAL_TIMEx_MasterConfigSynchronization>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001b4a:	f001 f805 	bl	8002b58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b4e:	2360      	movs	r3, #96	@ 0x60
 8001b50:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b52:	2300      	movs	r3, #0
 8001b54:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b56:	2300      	movs	r3, #0
 8001b58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b5e:	463b      	mov	r3, r7
 8001b60:	2200      	movs	r2, #0
 8001b62:	4619      	mov	r1, r3
 8001b64:	480c      	ldr	r0, [pc, #48]	@ (8001b98 <MX_TIM4_Init+0xfc>)
 8001b66:	f003 fa59 	bl	800501c <HAL_TIM_PWM_ConfigChannel>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001b70:	f000 fff2 	bl	8002b58 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b74:	463b      	mov	r3, r7
 8001b76:	2204      	movs	r2, #4
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4807      	ldr	r0, [pc, #28]	@ (8001b98 <MX_TIM4_Init+0xfc>)
 8001b7c:	f003 fa4e 	bl	800501c <HAL_TIM_PWM_ConfigChannel>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_TIM4_Init+0xee>
  {
    Error_Handler();
 8001b86:	f000 ffe7 	bl	8002b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001b8a:	4803      	ldr	r0, [pc, #12]	@ (8001b98 <MX_TIM4_Init+0xfc>)
 8001b8c:	f001 f8f6 	bl	8002d7c <HAL_TIM_MspPostInit>

}
 8001b90:	bf00      	nop
 8001b92:	3738      	adds	r7, #56	@ 0x38
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	2000018c 	.word	0x2000018c
 8001b9c:	40000800 	.word	0x40000800

08001ba0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b088      	sub	sp, #32
 8001ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ba6:	f107 0310 	add.w	r3, r7, #16
 8001baa:	2200      	movs	r2, #0
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	605a      	str	r2, [r3, #4]
 8001bb0:	609a      	str	r2, [r3, #8]
 8001bb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb4:	1d3b      	adds	r3, r7, #4
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]
 8001bbc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001bbe:	4b1d      	ldr	r3, [pc, #116]	@ (8001c34 <MX_TIM5_Init+0x94>)
 8001bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8001c38 <MX_TIM5_Init+0x98>)
 8001bc2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8001bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c34 <MX_TIM5_Init+0x94>)
 8001bc6:	22a9      	movs	r2, #169	@ 0xa9
 8001bc8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bca:	4b1a      	ldr	r3, [pc, #104]	@ (8001c34 <MX_TIM5_Init+0x94>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001bd0:	4b18      	ldr	r3, [pc, #96]	@ (8001c34 <MX_TIM5_Init+0x94>)
 8001bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd8:	4b16      	ldr	r3, [pc, #88]	@ (8001c34 <MX_TIM5_Init+0x94>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bde:	4b15      	ldr	r3, [pc, #84]	@ (8001c34 <MX_TIM5_Init+0x94>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001be4:	4813      	ldr	r0, [pc, #76]	@ (8001c34 <MX_TIM5_Init+0x94>)
 8001be6:	f002 fce1 	bl	80045ac <HAL_TIM_Base_Init>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001bf0:	f000 ffb2 	bl	8002b58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bf4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bf8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001bfa:	f107 0310 	add.w	r3, r7, #16
 8001bfe:	4619      	mov	r1, r3
 8001c00:	480c      	ldr	r0, [pc, #48]	@ (8001c34 <MX_TIM5_Init+0x94>)
 8001c02:	f003 fb1f 	bl	8005244 <HAL_TIM_ConfigClockSource>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d001      	beq.n	8001c10 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001c0c:	f000 ffa4 	bl	8002b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c10:	2300      	movs	r3, #0
 8001c12:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c14:	2300      	movs	r3, #0
 8001c16:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c18:	1d3b      	adds	r3, r7, #4
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4805      	ldr	r0, [pc, #20]	@ (8001c34 <MX_TIM5_Init+0x94>)
 8001c1e:	f004 f8ef 	bl	8005e00 <HAL_TIMEx_MasterConfigSynchronization>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001c28:	f000 ff96 	bl	8002b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001c2c:	bf00      	nop
 8001c2e:	3720      	adds	r7, #32
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	200001d8 	.word	0x200001d8
 8001c38:	40000c00 	.word	0x40000c00

08001c3c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c42:	1d3b      	adds	r3, r7, #4
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001c4c:	4b14      	ldr	r3, [pc, #80]	@ (8001ca0 <MX_TIM6_Init+0x64>)
 8001c4e:	4a15      	ldr	r2, [pc, #84]	@ (8001ca4 <MX_TIM6_Init+0x68>)
 8001c50:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 169;
 8001c52:	4b13      	ldr	r3, [pc, #76]	@ (8001ca0 <MX_TIM6_Init+0x64>)
 8001c54:	22a9      	movs	r2, #169	@ 0xa9
 8001c56:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c58:	4b11      	ldr	r3, [pc, #68]	@ (8001ca0 <MX_TIM6_Init+0x64>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001c5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ca0 <MX_TIM6_Init+0x64>)
 8001c60:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001c64:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c66:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca0 <MX_TIM6_Init+0x64>)
 8001c68:	2280      	movs	r2, #128	@ 0x80
 8001c6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c6c:	480c      	ldr	r0, [pc, #48]	@ (8001ca0 <MX_TIM6_Init+0x64>)
 8001c6e:	f002 fc9d 	bl	80045ac <HAL_TIM_Base_Init>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001c78:	f000 ff6e 	bl	8002b58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	4619      	mov	r1, r3
 8001c88:	4805      	ldr	r0, [pc, #20]	@ (8001ca0 <MX_TIM6_Init+0x64>)
 8001c8a:	f004 f8b9 	bl	8005e00 <HAL_TIMEx_MasterConfigSynchronization>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001c94:	f000 ff60 	bl	8002b58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001c98:	bf00      	nop
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20000224 	.word	0x20000224
 8001ca4:	40001000 	.word	0x40001000

08001ca8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08a      	sub	sp, #40	@ 0x28
 8001cac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cae:	f107 0314 	add.w	r3, r7, #20
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	609a      	str	r2, [r3, #8]
 8001cba:	60da      	str	r2, [r3, #12]
 8001cbc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cbe:	4b2f      	ldr	r3, [pc, #188]	@ (8001d7c <MX_GPIO_Init+0xd4>)
 8001cc0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc2:	4a2e      	ldr	r2, [pc, #184]	@ (8001d7c <MX_GPIO_Init+0xd4>)
 8001cc4:	f043 0304 	orr.w	r3, r3, #4
 8001cc8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cca:	4b2c      	ldr	r3, [pc, #176]	@ (8001d7c <MX_GPIO_Init+0xd4>)
 8001ccc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cce:	f003 0304 	and.w	r3, r3, #4
 8001cd2:	613b      	str	r3, [r7, #16]
 8001cd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cd6:	4b29      	ldr	r3, [pc, #164]	@ (8001d7c <MX_GPIO_Init+0xd4>)
 8001cd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cda:	4a28      	ldr	r2, [pc, #160]	@ (8001d7c <MX_GPIO_Init+0xd4>)
 8001cdc:	f043 0320 	orr.w	r3, r3, #32
 8001ce0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ce2:	4b26      	ldr	r3, [pc, #152]	@ (8001d7c <MX_GPIO_Init+0xd4>)
 8001ce4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce6:	f003 0320 	and.w	r3, r3, #32
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cee:	4b23      	ldr	r3, [pc, #140]	@ (8001d7c <MX_GPIO_Init+0xd4>)
 8001cf0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf2:	4a22      	ldr	r2, [pc, #136]	@ (8001d7c <MX_GPIO_Init+0xd4>)
 8001cf4:	f043 0301 	orr.w	r3, r3, #1
 8001cf8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cfa:	4b20      	ldr	r3, [pc, #128]	@ (8001d7c <MX_GPIO_Init+0xd4>)
 8001cfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	60bb      	str	r3, [r7, #8]
 8001d04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d06:	4b1d      	ldr	r3, [pc, #116]	@ (8001d7c <MX_GPIO_Init+0xd4>)
 8001d08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d0a:	4a1c      	ldr	r2, [pc, #112]	@ (8001d7c <MX_GPIO_Init+0xd4>)
 8001d0c:	f043 0302 	orr.w	r3, r3, #2
 8001d10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d12:	4b1a      	ldr	r3, [pc, #104]	@ (8001d7c <MX_GPIO_Init+0xd4>)
 8001d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d16:	f003 0302 	and.w	r3, r3, #2
 8001d1a:	607b      	str	r3, [r7, #4]
 8001d1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2120      	movs	r1, #32
 8001d22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d26:	f001 fbe1 	bl	80034ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d30:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001d34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d36:	2300      	movs	r3, #0
 8001d38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d3a:	f107 0314 	add.w	r3, r7, #20
 8001d3e:	4619      	mov	r1, r3
 8001d40:	480f      	ldr	r0, [pc, #60]	@ (8001d80 <MX_GPIO_Init+0xd8>)
 8001d42:	f001 fa51 	bl	80031e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001d46:	2320      	movs	r3, #32
 8001d48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d52:	2300      	movs	r3, #0
 8001d54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001d56:	f107 0314 	add.w	r3, r7, #20
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d60:	f001 fa42 	bl	80031e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001d64:	2200      	movs	r2, #0
 8001d66:	2100      	movs	r1, #0
 8001d68:	2028      	movs	r0, #40	@ 0x28
 8001d6a:	f001 fa08 	bl	800317e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d6e:	2028      	movs	r0, #40	@ 0x28
 8001d70:	f001 fa1f 	bl	80031b2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d74:	bf00      	nop
 8001d76:	3728      	adds	r7, #40	@ 0x28
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	48000800 	.word	0x48000800

08001d84 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d84:	b5b0      	push	{r4, r5, r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
if(htim == &htim6)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a17      	ldr	r2, [pc, #92]	@ (8001dec <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d119      	bne.n	8001dc8 <HAL_TIM_PeriodElapsedCallback+0x44>
{
kalman_predict(feedback, P_est, A, G, Q);
 8001d94:	4b16      	ldr	r3, [pc, #88]	@ (8001df0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001d96:	edd3 7a00 	vldr	s15, [r3]
 8001d9a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d9e:	4b15      	ldr	r3, [pc, #84]	@ (8001df4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001da0:	4a15      	ldr	r2, [pc, #84]	@ (8001df8 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001da2:	4916      	ldr	r1, [pc, #88]	@ (8001dfc <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001da4:	4816      	ldr	r0, [pc, #88]	@ (8001e00 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001da6:	f7ff fb04 	bl	80013b2 <kalman_predict>
kalman_update(feedback,P_est, C, R, Pos);
 8001daa:	4b16      	ldr	r3, [pc, #88]	@ (8001e04 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001dac:	edd3 7a00 	vldr	s15, [r3]
 8001db0:	4b15      	ldr	r3, [pc, #84]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001db2:	ed93 7a00 	vldr	s14, [r3]
 8001db6:	eef0 0a47 	vmov.f32	s1, s14
 8001dba:	eeb0 0a67 	vmov.f32	s0, s15
 8001dbe:	4a13      	ldr	r2, [pc, #76]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001dc0:	490e      	ldr	r1, [pc, #56]	@ (8001dfc <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001dc2:	480f      	ldr	r0, [pc, #60]	@ (8001e00 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001dc4:	f7ff fbb4 	bl	8001530 <kalman_update>
}
if(htim == &htim5)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	4a11      	ldr	r2, [pc, #68]	@ (8001e10 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d108      	bne.n	8001de2 <HAL_TIM_PeriodElapsedCallback+0x5e>
{
_micros += UINT32_MAX;
 8001dd0:	4b10      	ldr	r3, [pc, #64]	@ (8001e14 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd6:	1e54      	subs	r4, r2, #1
 8001dd8:	f143 0500 	adc.w	r5, r3, #0
 8001ddc:	4b0d      	ldr	r3, [pc, #52]	@ (8001e14 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001dde:	e9c3 4500 	strd	r4, r5, [r3]
}
}
 8001de2:	bf00      	nop
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bdb0      	pop	{r4, r5, r7, pc}
 8001dea:	bf00      	nop
 8001dec:	20000224 	.word	0x20000224
 8001df0:	20000040 	.word	0x20000040
 8001df4:	20000030 	.word	0x20000030
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	20000084 	.word	0x20000084
 8001e00:	20000294 	.word	0x20000294
 8001e04:	2000003c 	.word	0x2000003c
 8001e08:	200002b0 	.word	0x200002b0
 8001e0c:	20000024 	.word	0x20000024
 8001e10:	200001d8 	.word	0x200001d8
 8001e14:	20000350 	.word	0x20000350

08001e18 <micros>:
uint64_t micros()
{
 8001e18:	b4b0      	push	{r4, r5, r7}
 8001e1a:	af00      	add	r7, sp, #0
return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 8001e1c:	4b09      	ldr	r3, [pc, #36]	@ (8001e44 <micros+0x2c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e22:	2200      	movs	r2, #0
 8001e24:	4618      	mov	r0, r3
 8001e26:	4611      	mov	r1, r2
 8001e28:	4b07      	ldr	r3, [pc, #28]	@ (8001e48 <micros+0x30>)
 8001e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2e:	1884      	adds	r4, r0, r2
 8001e30:	eb41 0503 	adc.w	r5, r1, r3
 8001e34:	4622      	mov	r2, r4
 8001e36:	462b      	mov	r3, r5
}
 8001e38:	4610      	mov	r0, r2
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bcb0      	pop	{r4, r5, r7}
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	200001d8 	.word	0x200001d8
 8001e48:	20000350 	.word	0x20000350
 8001e4c:	00000000 	.word	0x00000000

08001e50 <QEIEncoderPosVel_Update>:
void QEIEncoderPosVel_Update()
{
 8001e50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e54:	b084      	sub	sp, #16
 8001e56:	af00      	add	r7, sp, #0
//collect data
QEIdata.TimeStamp[NEW] = micros();
 8001e58:	f7ff ffde 	bl	8001e18 <micros>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	49b9      	ldr	r1, [pc, #740]	@ (8002148 <QEIEncoderPosVel_Update+0x2f8>)
 8001e62:	e9c1 2302 	strd	r2, r3, [r1, #8]
QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim3);
 8001e66:	4bb9      	ldr	r3, [pc, #740]	@ (800214c <QEIEncoderPosVel_Update+0x2fc>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e6c:	4ab6      	ldr	r2, [pc, #728]	@ (8002148 <QEIEncoderPosVel_Update+0x2f8>)
 8001e6e:	6013      	str	r3, [r2, #0]
//Postion 1 turn calculation
QEIdata.QEIPostion_1turn = QEIdata.Position[NEW] % 3072;
 8001e70:	4bb5      	ldr	r3, [pc, #724]	@ (8002148 <QEIEncoderPosVel_Update+0x2f8>)
 8001e72:	6819      	ldr	r1, [r3, #0]
 8001e74:	4bb6      	ldr	r3, [pc, #728]	@ (8002150 <QEIEncoderPosVel_Update+0x300>)
 8001e76:	fba3 2301 	umull	r2, r3, r3, r1
 8001e7a:	0ada      	lsrs	r2, r3, #11
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	4413      	add	r3, r2
 8001e82:	029b      	lsls	r3, r3, #10
 8001e84:	1aca      	subs	r2, r1, r3
 8001e86:	ee07 2a90 	vmov	s15, r2
 8001e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e8e:	4bae      	ldr	r3, [pc, #696]	@ (8002148 <QEIEncoderPosVel_Update+0x2f8>)
 8001e90:	edc3 7a06 	vstr	s15, [r3, #24]
//calculate dx
int32_t diffPosition = QEIdata.Position[NEW] - QEIdata.Position[OLD];
 8001e94:	4bac      	ldr	r3, [pc, #688]	@ (8002148 <QEIEncoderPosVel_Update+0x2f8>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4bab      	ldr	r3, [pc, #684]	@ (8002148 <QEIEncoderPosVel_Update+0x2f8>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	60fb      	str	r3, [r7, #12]
//Handle Warp around
if(diffPosition > 32256)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f5b3 4ffc 	cmp.w	r3, #32256	@ 0x7e00
 8001ea6:	dd03      	ble.n	8001eb0 <QEIEncoderPosVel_Update+0x60>
diffPosition -=64512;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
 8001eae:	60fb      	str	r3, [r7, #12]
if(diffPosition < -32256)
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f513 4ffc 	cmn.w	r3, #32256	@ 0x7e00
 8001eb6:	da03      	bge.n	8001ec0 <QEIEncoderPosVel_Update+0x70>
diffPosition +=64512;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f503 437c 	add.w	r3, r3, #64512	@ 0xfc00
 8001ebe:	60fb      	str	r3, [r7, #12]
//calculate dt
float diffTime = (QEIdata.TimeStamp[NEW]-QEIdata.TimeStamp[OLD]) * 0.000001;
 8001ec0:	4ba1      	ldr	r3, [pc, #644]	@ (8002148 <QEIEncoderPosVel_Update+0x2f8>)
 8001ec2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001ec6:	4ba0      	ldr	r3, [pc, #640]	@ (8002148 <QEIEncoderPosVel_Update+0x2f8>)
 8001ec8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001ecc:	ebb0 0802 	subs.w	r8, r0, r2
 8001ed0:	eb61 0903 	sbc.w	r9, r1, r3
 8001ed4:	4640      	mov	r0, r8
 8001ed6:	4649      	mov	r1, r9
 8001ed8:	f7fe fb24 	bl	8000524 <__aeabi_ul2d>
 8001edc:	a390      	add	r3, pc, #576	@ (adr r3, 8002120 <QEIEncoderPosVel_Update+0x2d0>)
 8001ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee2:	f7fe fb55 	bl	8000590 <__aeabi_dmul>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	460b      	mov	r3, r1
 8001eea:	4610      	mov	r0, r2
 8001eec:	4619      	mov	r1, r3
 8001eee:	f7fe fde9 	bl	8000ac4 <__aeabi_d2f>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	60bb      	str	r3, [r7, #8]
//calculate anglar velocity
Pos = (QEIdata.Position[NEW]*2*3.14/3072);
 8001ef6:	4b94      	ldr	r3, [pc, #592]	@ (8002148 <QEIEncoderPosVel_Update+0x2f8>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	005b      	lsls	r3, r3, #1
 8001efc:	4618      	mov	r0, r3
 8001efe:	f7fe facd 	bl	800049c <__aeabi_ui2d>
 8001f02:	a389      	add	r3, pc, #548	@ (adr r3, 8002128 <QEIEncoderPosVel_Update+0x2d8>)
 8001f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f08:	f7fe fb42 	bl	8000590 <__aeabi_dmul>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4610      	mov	r0, r2
 8001f12:	4619      	mov	r1, r3
 8001f14:	f04f 0200 	mov.w	r2, #0
 8001f18:	4b8e      	ldr	r3, [pc, #568]	@ (8002154 <QEIEncoderPosVel_Update+0x304>)
 8001f1a:	f7fe fc63 	bl	80007e4 <__aeabi_ddiv>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	460b      	mov	r3, r1
 8001f22:	4610      	mov	r0, r2
 8001f24:	4619      	mov	r1, r3
 8001f26:	f7fe fdcd 	bl	8000ac4 <__aeabi_d2f>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	4a8a      	ldr	r2, [pc, #552]	@ (8002158 <QEIEncoderPosVel_Update+0x308>)
 8001f2e:	6013      	str	r3, [r2, #0]
QEIdata.QEIAngularVelocity = diffPosition / diffTime;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	ee07 3a90 	vmov	s15, r3
 8001f36:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f3a:	ed97 7a02 	vldr	s14, [r7, #8]
 8001f3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f42:	4b81      	ldr	r3, [pc, #516]	@ (8002148 <QEIEncoderPosVel_Update+0x2f8>)
 8001f44:	edc3 7a07 	vstr	s15, [r3, #28]


speed = (QEIdata.QEIAngularVelocity*2*3.14)/3072;
 8001f48:	4b7f      	ldr	r3, [pc, #508]	@ (8002148 <QEIEncoderPosVel_Update+0x2f8>)
 8001f4a:	edd3 7a07 	vldr	s15, [r3, #28]
 8001f4e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001f52:	ee17 0a90 	vmov	r0, s15
 8001f56:	f7fe fac3 	bl	80004e0 <__aeabi_f2d>
 8001f5a:	a373      	add	r3, pc, #460	@ (adr r3, 8002128 <QEIEncoderPosVel_Update+0x2d8>)
 8001f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f60:	f7fe fb16 	bl	8000590 <__aeabi_dmul>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	4610      	mov	r0, r2
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f04f 0200 	mov.w	r2, #0
 8001f70:	4b78      	ldr	r3, [pc, #480]	@ (8002154 <QEIEncoderPosVel_Update+0x304>)
 8001f72:	f7fe fc37 	bl	80007e4 <__aeabi_ddiv>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	4610      	mov	r0, r2
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	f7fe fda1 	bl	8000ac4 <__aeabi_d2f>
 8001f82:	4603      	mov	r3, r0
 8001f84:	4a75      	ldr	r2, [pc, #468]	@ (800215c <QEIEncoderPosVel_Update+0x30c>)
 8001f86:	6013      	str	r3, [r2, #0]
speed_fill = (0.969*speed_fill_1)+(0.0155*speed)+(0.0155*speed_1);
 8001f88:	4b75      	ldr	r3, [pc, #468]	@ (8002160 <QEIEncoderPosVel_Update+0x310>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7fe faa7 	bl	80004e0 <__aeabi_f2d>
 8001f92:	a367      	add	r3, pc, #412	@ (adr r3, 8002130 <QEIEncoderPosVel_Update+0x2e0>)
 8001f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f98:	f7fe fafa 	bl	8000590 <__aeabi_dmul>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4690      	mov	r8, r2
 8001fa2:	4699      	mov	r9, r3
 8001fa4:	4b6d      	ldr	r3, [pc, #436]	@ (800215c <QEIEncoderPosVel_Update+0x30c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7fe fa99 	bl	80004e0 <__aeabi_f2d>
 8001fae:	a362      	add	r3, pc, #392	@ (adr r3, 8002138 <QEIEncoderPosVel_Update+0x2e8>)
 8001fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb4:	f7fe faec 	bl	8000590 <__aeabi_dmul>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	4640      	mov	r0, r8
 8001fbe:	4649      	mov	r1, r9
 8001fc0:	f7fe f930 	bl	8000224 <__adddf3>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	4690      	mov	r8, r2
 8001fca:	4699      	mov	r9, r3
 8001fcc:	4b65      	ldr	r3, [pc, #404]	@ (8002164 <QEIEncoderPosVel_Update+0x314>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7fe fa85 	bl	80004e0 <__aeabi_f2d>
 8001fd6:	a358      	add	r3, pc, #352	@ (adr r3, 8002138 <QEIEncoderPosVel_Update+0x2e8>)
 8001fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fdc:	f7fe fad8 	bl	8000590 <__aeabi_dmul>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4640      	mov	r0, r8
 8001fe6:	4649      	mov	r1, r9
 8001fe8:	f7fe f91c 	bl	8000224 <__adddf3>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	4610      	mov	r0, r2
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	f7fe fd66 	bl	8000ac4 <__aeabi_d2f>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	4a5b      	ldr	r2, [pc, #364]	@ (8002168 <QEIEncoderPosVel_Update+0x318>)
 8001ffc:	6013      	str	r3, [r2, #0]
speed_1 = speed;
 8001ffe:	4b57      	ldr	r3, [pc, #348]	@ (800215c <QEIEncoderPosVel_Update+0x30c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a58      	ldr	r2, [pc, #352]	@ (8002164 <QEIEncoderPosVel_Update+0x314>)
 8002004:	6013      	str	r3, [r2, #0]
speed_fill_1 = speed_fill;
 8002006:	4b58      	ldr	r3, [pc, #352]	@ (8002168 <QEIEncoderPosVel_Update+0x318>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a55      	ldr	r2, [pc, #340]	@ (8002160 <QEIEncoderPosVel_Update+0x310>)
 800200c:	6013      	str	r3, [r2, #0]


//store value for next loop
static uint64_t timestamp_Accelation =0;
if(timestamp_Accelation < HAL_GetTick())
 800200e:	f000 ffcf 	bl	8002fb0 <HAL_GetTick>
 8002012:	4603      	mov	r3, r0
 8002014:	2200      	movs	r2, #0
 8002016:	461c      	mov	r4, r3
 8002018:	4615      	mov	r5, r2
 800201a:	4b54      	ldr	r3, [pc, #336]	@ (800216c <QEIEncoderPosVel_Update+0x31c>)
 800201c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002020:	42a2      	cmp	r2, r4
 8002022:	41ab      	sbcs	r3, r5
 8002024:	d26b      	bcs.n	80020fe <QEIEncoderPosVel_Update+0x2ae>
{
	static float oldVelo = 0;
	float diffVelocity = speed_fill - oldVelo;
 8002026:	4b50      	ldr	r3, [pc, #320]	@ (8002168 <QEIEncoderPosVel_Update+0x318>)
 8002028:	ed93 7a00 	vldr	s14, [r3]
 800202c:	4b50      	ldr	r3, [pc, #320]	@ (8002170 <QEIEncoderPosVel_Update+0x320>)
 800202e:	edd3 7a00 	vldr	s15, [r3]
 8002032:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002036:	edc7 7a01 	vstr	s15, [r7, #4]
	Accelation = (diffVelocity / 0.01);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7fe fa50 	bl	80004e0 <__aeabi_f2d>
 8002040:	a33f      	add	r3, pc, #252	@ (adr r3, 8002140 <QEIEncoderPosVel_Update+0x2f0>)
 8002042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002046:	f7fe fbcd 	bl	80007e4 <__aeabi_ddiv>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	4610      	mov	r0, r2
 8002050:	4619      	mov	r1, r3
 8002052:	f7fe fd37 	bl	8000ac4 <__aeabi_d2f>
 8002056:	4603      	mov	r3, r0
 8002058:	4a46      	ldr	r2, [pc, #280]	@ (8002174 <QEIEncoderPosVel_Update+0x324>)
 800205a:	6013      	str	r3, [r2, #0]
	Accelation_fill = (0.969*Accelation_fill_1)+(0.0155*Accelation)+(0.0155*Accelation_1);
 800205c:	4b46      	ldr	r3, [pc, #280]	@ (8002178 <QEIEncoderPosVel_Update+0x328>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4618      	mov	r0, r3
 8002062:	f7fe fa3d 	bl	80004e0 <__aeabi_f2d>
 8002066:	a332      	add	r3, pc, #200	@ (adr r3, 8002130 <QEIEncoderPosVel_Update+0x2e0>)
 8002068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800206c:	f7fe fa90 	bl	8000590 <__aeabi_dmul>
 8002070:	4602      	mov	r2, r0
 8002072:	460b      	mov	r3, r1
 8002074:	4614      	mov	r4, r2
 8002076:	461d      	mov	r5, r3
 8002078:	4b3e      	ldr	r3, [pc, #248]	@ (8002174 <QEIEncoderPosVel_Update+0x324>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4618      	mov	r0, r3
 800207e:	f7fe fa2f 	bl	80004e0 <__aeabi_f2d>
 8002082:	a32d      	add	r3, pc, #180	@ (adr r3, 8002138 <QEIEncoderPosVel_Update+0x2e8>)
 8002084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002088:	f7fe fa82 	bl	8000590 <__aeabi_dmul>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	4620      	mov	r0, r4
 8002092:	4629      	mov	r1, r5
 8002094:	f7fe f8c6 	bl	8000224 <__adddf3>
 8002098:	4602      	mov	r2, r0
 800209a:	460b      	mov	r3, r1
 800209c:	4614      	mov	r4, r2
 800209e:	461d      	mov	r5, r3
 80020a0:	4b36      	ldr	r3, [pc, #216]	@ (800217c <QEIEncoderPosVel_Update+0x32c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7fe fa1b 	bl	80004e0 <__aeabi_f2d>
 80020aa:	a323      	add	r3, pc, #140	@ (adr r3, 8002138 <QEIEncoderPosVel_Update+0x2e8>)
 80020ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b0:	f7fe fa6e 	bl	8000590 <__aeabi_dmul>
 80020b4:	4602      	mov	r2, r0
 80020b6:	460b      	mov	r3, r1
 80020b8:	4620      	mov	r0, r4
 80020ba:	4629      	mov	r1, r5
 80020bc:	f7fe f8b2 	bl	8000224 <__adddf3>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4610      	mov	r0, r2
 80020c6:	4619      	mov	r1, r3
 80020c8:	f7fe fcfc 	bl	8000ac4 <__aeabi_d2f>
 80020cc:	4603      	mov	r3, r0
 80020ce:	4a2c      	ldr	r2, [pc, #176]	@ (8002180 <QEIEncoderPosVel_Update+0x330>)
 80020d0:	6013      	str	r3, [r2, #0]
	Accelation_1 = Accelation;
 80020d2:	4b28      	ldr	r3, [pc, #160]	@ (8002174 <QEIEncoderPosVel_Update+0x324>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a29      	ldr	r2, [pc, #164]	@ (800217c <QEIEncoderPosVel_Update+0x32c>)
 80020d8:	6013      	str	r3, [r2, #0]
	Accelation_fill_1 = Accelation_fill;
 80020da:	4b29      	ldr	r3, [pc, #164]	@ (8002180 <QEIEncoderPosVel_Update+0x330>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a26      	ldr	r2, [pc, #152]	@ (8002178 <QEIEncoderPosVel_Update+0x328>)
 80020e0:	6013      	str	r3, [r2, #0]
	oldVelo =  speed_fill;
 80020e2:	4b21      	ldr	r3, [pc, #132]	@ (8002168 <QEIEncoderPosVel_Update+0x318>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a22      	ldr	r2, [pc, #136]	@ (8002170 <QEIEncoderPosVel_Update+0x320>)
 80020e8:	6013      	str	r3, [r2, #0]
timestamp_Accelation = HAL_GetTick()+10;
 80020ea:	f000 ff61 	bl	8002fb0 <HAL_GetTick>
 80020ee:	4603      	mov	r3, r0
 80020f0:	330a      	adds	r3, #10
 80020f2:	2200      	movs	r2, #0
 80020f4:	469a      	mov	sl, r3
 80020f6:	4693      	mov	fp, r2
 80020f8:	4b1c      	ldr	r3, [pc, #112]	@ (800216c <QEIEncoderPosVel_Update+0x31c>)
 80020fa:	e9c3 ab00 	strd	sl, fp, [r3]
}
QEIdata.Position[OLD] = QEIdata.Position[NEW];
 80020fe:	4b12      	ldr	r3, [pc, #72]	@ (8002148 <QEIEncoderPosVel_Update+0x2f8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a11      	ldr	r2, [pc, #68]	@ (8002148 <QEIEncoderPosVel_Update+0x2f8>)
 8002104:	6053      	str	r3, [r2, #4]
QEIdata.TimeStamp[OLD]=QEIdata.TimeStamp[NEW];
 8002106:	4b10      	ldr	r3, [pc, #64]	@ (8002148 <QEIEncoderPosVel_Update+0x2f8>)
 8002108:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800210c:	490e      	ldr	r1, [pc, #56]	@ (8002148 <QEIEncoderPosVel_Update+0x2f8>)
 800210e:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8002112:	bf00      	nop
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800211c:	f3af 8000 	nop.w
 8002120:	a0b5ed8d 	.word	0xa0b5ed8d
 8002124:	3eb0c6f7 	.word	0x3eb0c6f7
 8002128:	51eb851f 	.word	0x51eb851f
 800212c:	40091eb8 	.word	0x40091eb8
 8002130:	49ba5e35 	.word	0x49ba5e35
 8002134:	3fef020c 	.word	0x3fef020c
 8002138:	c8b43958 	.word	0xc8b43958
 800213c:	3f8fbe76 	.word	0x3f8fbe76
 8002140:	47ae147b 	.word	0x47ae147b
 8002144:	3f847ae1 	.word	0x3f847ae1
 8002148:	20000330 	.word	0x20000330
 800214c:	20000140 	.word	0x20000140
 8002150:	aaaaaaab 	.word	0xaaaaaaab
 8002154:	40a80000 	.word	0x40a80000
 8002158:	200002b0 	.word	0x200002b0
 800215c:	200002a0 	.word	0x200002a0
 8002160:	200002ac 	.word	0x200002ac
 8002164:	200002a4 	.word	0x200002a4
 8002168:	200002a8 	.word	0x200002a8
 800216c:	20000360 	.word	0x20000360
 8002170:	20000368 	.word	0x20000368
 8002174:	200002b4 	.word	0x200002b4
 8002178:	200002c0 	.word	0x200002c0
 800217c:	200002b8 	.word	0x200002b8
 8002180:	200002bc 	.word	0x200002bc
 8002184:	00000000 	.word	0x00000000

08002188 <Trajectory>:


void Trajectory()
{
 8002188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
	static uint64_t timestamp_Traject =0;
		int64_t currentTime = micros();
 8002190:	f7ff fe42 	bl	8001e18 <micros>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	e9c7 2300 	strd	r2, r3, [r7]
		  if(timestamp_Traject < currentTime)
 800219c:	4b99      	ldr	r3, [pc, #612]	@ (8002404 <Trajectory+0x27c>)
 800219e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021a6:	4290      	cmp	r0, r2
 80021a8:	eb71 0303 	sbcs.w	r3, r1, r3
 80021ac:	f080 8221 	bcs.w	80025f2 <Trajectory+0x46a>
		  {
			  switch(state_Tra)
 80021b0:	4b95      	ldr	r3, [pc, #596]	@ (8002408 <Trajectory+0x280>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2b03      	cmp	r3, #3
 80021b6:	f200 81fe 	bhi.w	80025b6 <Trajectory+0x42e>
 80021ba:	a201      	add	r2, pc, #4	@ (adr r2, 80021c0 <Trajectory+0x38>)
 80021bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021c0:	080021d1 	.word	0x080021d1
 80021c4:	08002375 	.word	0x08002375
 80021c8:	08002439 	.word	0x08002439
 80021cc:	0800254f 	.word	0x0800254f
			  	  		  {
			  	  		  case 0:
			  	  			  if(Pos_Start > Pos_Target)
 80021d0:	4b8e      	ldr	r3, [pc, #568]	@ (800240c <Trajectory+0x284>)
 80021d2:	ed93 7a00 	vldr	s14, [r3]
 80021d6:	4b8e      	ldr	r3, [pc, #568]	@ (8002410 <Trajectory+0x288>)
 80021d8:	edd3 7a00 	vldr	s15, [r3]
 80021dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80021e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e4:	dd04      	ble.n	80021f0 <Trajectory+0x68>
			  	  			  {
			  	  				  direction = -1;
 80021e6:	4b8b      	ldr	r3, [pc, #556]	@ (8002414 <Trajectory+0x28c>)
 80021e8:	f04f 32ff 	mov.w	r2, #4294967295
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	e002      	b.n	80021f6 <Trajectory+0x6e>
			  	  			  }
			  	  			  else
			  	  			  {
			  	  				  direction = 1;
 80021f0:	4b88      	ldr	r3, [pc, #544]	@ (8002414 <Trajectory+0x28c>)
 80021f2:	2201      	movs	r2, #1
 80021f4:	601a      	str	r2, [r3, #0]
			  	  			  }
			  	  			  	q_Pos = Pos_Start + (Velo_Start*t)+((direction*0.5*Max_Acc)*(t*t));
 80021f6:	4b88      	ldr	r3, [pc, #544]	@ (8002418 <Trajectory+0x290>)
 80021f8:	ed93 7a00 	vldr	s14, [r3]
 80021fc:	4b87      	ldr	r3, [pc, #540]	@ (800241c <Trajectory+0x294>)
 80021fe:	edd3 7a00 	vldr	s15, [r3]
 8002202:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002206:	4b81      	ldr	r3, [pc, #516]	@ (800240c <Trajectory+0x284>)
 8002208:	edd3 7a00 	vldr	s15, [r3]
 800220c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002210:	ee17 0a90 	vmov	r0, s15
 8002214:	f7fe f964 	bl	80004e0 <__aeabi_f2d>
 8002218:	4680      	mov	r8, r0
 800221a:	4689      	mov	r9, r1
 800221c:	4b7d      	ldr	r3, [pc, #500]	@ (8002414 <Trajectory+0x28c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f7fe f94b 	bl	80004bc <__aeabi_i2d>
 8002226:	f04f 0200 	mov.w	r2, #0
 800222a:	4b7d      	ldr	r3, [pc, #500]	@ (8002420 <Trajectory+0x298>)
 800222c:	f7fe f9b0 	bl	8000590 <__aeabi_dmul>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	4692      	mov	sl, r2
 8002236:	469b      	mov	fp, r3
 8002238:	4b7a      	ldr	r3, [pc, #488]	@ (8002424 <Trajectory+0x29c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f7fe f94f 	bl	80004e0 <__aeabi_f2d>
 8002242:	4602      	mov	r2, r0
 8002244:	460b      	mov	r3, r1
 8002246:	4650      	mov	r0, sl
 8002248:	4659      	mov	r1, fp
 800224a:	f7fe f9a1 	bl	8000590 <__aeabi_dmul>
 800224e:	4602      	mov	r2, r0
 8002250:	460b      	mov	r3, r1
 8002252:	4692      	mov	sl, r2
 8002254:	469b      	mov	fp, r3
 8002256:	4b71      	ldr	r3, [pc, #452]	@ (800241c <Trajectory+0x294>)
 8002258:	ed93 7a00 	vldr	s14, [r3]
 800225c:	4b6f      	ldr	r3, [pc, #444]	@ (800241c <Trajectory+0x294>)
 800225e:	edd3 7a00 	vldr	s15, [r3]
 8002262:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002266:	ee17 0a90 	vmov	r0, s15
 800226a:	f7fe f939 	bl	80004e0 <__aeabi_f2d>
 800226e:	4602      	mov	r2, r0
 8002270:	460b      	mov	r3, r1
 8002272:	4650      	mov	r0, sl
 8002274:	4659      	mov	r1, fp
 8002276:	f7fe f98b 	bl	8000590 <__aeabi_dmul>
 800227a:	4602      	mov	r2, r0
 800227c:	460b      	mov	r3, r1
 800227e:	4640      	mov	r0, r8
 8002280:	4649      	mov	r1, r9
 8002282:	f7fd ffcf 	bl	8000224 <__adddf3>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4610      	mov	r0, r2
 800228c:	4619      	mov	r1, r3
 800228e:	f7fe fc19 	bl	8000ac4 <__aeabi_d2f>
 8002292:	4603      	mov	r3, r0
 8002294:	4a64      	ldr	r2, [pc, #400]	@ (8002428 <Trajectory+0x2a0>)
 8002296:	6013      	str	r3, [r2, #0]
			  	  			  	q_Velo = Velo_Start + direction*Max_Acc*t;
 8002298:	4b5e      	ldr	r3, [pc, #376]	@ (8002414 <Trajectory+0x28c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	ee07 3a90 	vmov	s15, r3
 80022a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022a4:	4b5f      	ldr	r3, [pc, #380]	@ (8002424 <Trajectory+0x29c>)
 80022a6:	edd3 7a00 	vldr	s15, [r3]
 80022aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022ae:	4b5b      	ldr	r3, [pc, #364]	@ (800241c <Trajectory+0x294>)
 80022b0:	edd3 7a00 	vldr	s15, [r3]
 80022b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022b8:	4b57      	ldr	r3, [pc, #348]	@ (8002418 <Trajectory+0x290>)
 80022ba:	edd3 7a00 	vldr	s15, [r3]
 80022be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022c2:	4b5a      	ldr	r3, [pc, #360]	@ (800242c <Trajectory+0x2a4>)
 80022c4:	edc3 7a00 	vstr	s15, [r3]
			  	  			  	q_Acc = Max_Acc*direction;
 80022c8:	4b52      	ldr	r3, [pc, #328]	@ (8002414 <Trajectory+0x28c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	ee07 3a90 	vmov	s15, r3
 80022d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022d4:	4b53      	ldr	r3, [pc, #332]	@ (8002424 <Trajectory+0x29c>)
 80022d6:	edd3 7a00 	vldr	s15, [r3]
 80022da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022de:	4b54      	ldr	r3, [pc, #336]	@ (8002430 <Trajectory+0x2a8>)
 80022e0:	edc3 7a00 	vstr	s15, [r3]
			  	  			  if(fabs(q_Velo) >= Max_Velo)
 80022e4:	4b51      	ldr	r3, [pc, #324]	@ (800242c <Trajectory+0x2a4>)
 80022e6:	edd3 7a00 	vldr	s15, [r3]
 80022ea:	eeb0 7ae7 	vabs.f32	s14, s15
 80022ee:	4b51      	ldr	r3, [pc, #324]	@ (8002434 <Trajectory+0x2ac>)
 80022f0:	edd3 7a00 	vldr	s15, [r3]
 80022f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022fc:	db0e      	blt.n	800231c <Trajectory+0x194>
			  	  				{
			  	  					state_Tra = 1;
 80022fe:	4b42      	ldr	r3, [pc, #264]	@ (8002408 <Trajectory+0x280>)
 8002300:	2201      	movs	r2, #1
 8002302:	601a      	str	r2, [r3, #0]
			  	  					Pos_Start = q_Pos;
 8002304:	4b48      	ldr	r3, [pc, #288]	@ (8002428 <Trajectory+0x2a0>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a40      	ldr	r2, [pc, #256]	@ (800240c <Trajectory+0x284>)
 800230a:	6013      	str	r3, [r2, #0]
			  	  					Velo_Start = q_Velo;
 800230c:	4b47      	ldr	r3, [pc, #284]	@ (800242c <Trajectory+0x2a4>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a41      	ldr	r2, [pc, #260]	@ (8002418 <Trajectory+0x290>)
 8002312:	6013      	str	r3, [r2, #0]
			  	  					t = 0;
 8002314:	4b41      	ldr	r3, [pc, #260]	@ (800241c <Trajectory+0x294>)
 8002316:	f04f 0200 	mov.w	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
			  	  				}
			  	  			  if(fabs((q_Pos-Pos_Start)*2) >= fabs(Pos_Target-Pos_Start))
 800231c:	4b42      	ldr	r3, [pc, #264]	@ (8002428 <Trajectory+0x2a0>)
 800231e:	ed93 7a00 	vldr	s14, [r3]
 8002322:	4b3a      	ldr	r3, [pc, #232]	@ (800240c <Trajectory+0x284>)
 8002324:	edd3 7a00 	vldr	s15, [r3]
 8002328:	ee77 7a67 	vsub.f32	s15, s14, s15
 800232c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002330:	eeb0 7ae7 	vabs.f32	s14, s15
 8002334:	4b36      	ldr	r3, [pc, #216]	@ (8002410 <Trajectory+0x288>)
 8002336:	edd3 6a00 	vldr	s13, [r3]
 800233a:	4b34      	ldr	r3, [pc, #208]	@ (800240c <Trajectory+0x284>)
 800233c:	edd3 7a00 	vldr	s15, [r3]
 8002340:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002344:	eef0 7ae7 	vabs.f32	s15, s15
 8002348:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800234c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002350:	da00      	bge.n	8002354 <Trajectory+0x1cc>
			  	  				state_Tra = 2;
								Pos_Start = q_Pos;
								Velo_Start = q_Velo;
								t = 0;
			  	  			  }
			  	  			  	break;
 8002352:	e130      	b.n	80025b6 <Trajectory+0x42e>
			  	  				state_Tra = 2;
 8002354:	4b2c      	ldr	r3, [pc, #176]	@ (8002408 <Trajectory+0x280>)
 8002356:	2202      	movs	r2, #2
 8002358:	601a      	str	r2, [r3, #0]
								Pos_Start = q_Pos;
 800235a:	4b33      	ldr	r3, [pc, #204]	@ (8002428 <Trajectory+0x2a0>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a2b      	ldr	r2, [pc, #172]	@ (800240c <Trajectory+0x284>)
 8002360:	6013      	str	r3, [r2, #0]
								Velo_Start = q_Velo;
 8002362:	4b32      	ldr	r3, [pc, #200]	@ (800242c <Trajectory+0x2a4>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a2c      	ldr	r2, [pc, #176]	@ (8002418 <Trajectory+0x290>)
 8002368:	6013      	str	r3, [r2, #0]
								t = 0;
 800236a:	4b2c      	ldr	r3, [pc, #176]	@ (800241c <Trajectory+0x294>)
 800236c:	f04f 0200 	mov.w	r2, #0
 8002370:	601a      	str	r2, [r3, #0]
			  	  			  	break;
 8002372:	e120      	b.n	80025b6 <Trajectory+0x42e>
			  	  		  case 1:
			  	  			  	q_Pos = Pos_Start +(Velo_Start*t);
 8002374:	4b28      	ldr	r3, [pc, #160]	@ (8002418 <Trajectory+0x290>)
 8002376:	ed93 7a00 	vldr	s14, [r3]
 800237a:	4b28      	ldr	r3, [pc, #160]	@ (800241c <Trajectory+0x294>)
 800237c:	edd3 7a00 	vldr	s15, [r3]
 8002380:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002384:	4b21      	ldr	r3, [pc, #132]	@ (800240c <Trajectory+0x284>)
 8002386:	edd3 7a00 	vldr	s15, [r3]
 800238a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800238e:	4b26      	ldr	r3, [pc, #152]	@ (8002428 <Trajectory+0x2a0>)
 8002390:	edc3 7a00 	vstr	s15, [r3]
			  	  			  	q_Velo = Velo_Start;
 8002394:	4b20      	ldr	r3, [pc, #128]	@ (8002418 <Trajectory+0x290>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a24      	ldr	r2, [pc, #144]	@ (800242c <Trajectory+0x2a4>)
 800239a:	6013      	str	r3, [r2, #0]
			  	  			  	q_Acc = 0;
 800239c:	4b24      	ldr	r3, [pc, #144]	@ (8002430 <Trajectory+0x2a8>)
 800239e:	f04f 0200 	mov.w	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
			  	  			  if(fabs(Pos_Target-q_Pos) <= (q_Velo*q_Velo)/(2*Max_Acc))
 80023a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002410 <Trajectory+0x288>)
 80023a6:	ed93 7a00 	vldr	s14, [r3]
 80023aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002428 <Trajectory+0x2a0>)
 80023ac:	edd3 7a00 	vldr	s15, [r3]
 80023b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023b4:	eeb0 7ae7 	vabs.f32	s14, s15
 80023b8:	4b1c      	ldr	r3, [pc, #112]	@ (800242c <Trajectory+0x2a4>)
 80023ba:	edd3 6a00 	vldr	s13, [r3]
 80023be:	4b1b      	ldr	r3, [pc, #108]	@ (800242c <Trajectory+0x2a4>)
 80023c0:	edd3 7a00 	vldr	s15, [r3]
 80023c4:	ee26 6aa7 	vmul.f32	s12, s13, s15
 80023c8:	4b16      	ldr	r3, [pc, #88]	@ (8002424 <Trajectory+0x29c>)
 80023ca:	edd3 7a00 	vldr	s15, [r3]
 80023ce:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80023d2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80023d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023de:	d900      	bls.n	80023e2 <Trajectory+0x25a>
			  	  					state_Tra = 2;
			  	  					Pos_Start = q_Pos;
			  	  					Velo_Start = q_Velo;
			  	  					t = 0;
			  	  				}
			  	  			  	break;
 80023e0:	e0e9      	b.n	80025b6 <Trajectory+0x42e>
			  	  					state_Tra = 2;
 80023e2:	4b09      	ldr	r3, [pc, #36]	@ (8002408 <Trajectory+0x280>)
 80023e4:	2202      	movs	r2, #2
 80023e6:	601a      	str	r2, [r3, #0]
			  	  					Pos_Start = q_Pos;
 80023e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002428 <Trajectory+0x2a0>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a07      	ldr	r2, [pc, #28]	@ (800240c <Trajectory+0x284>)
 80023ee:	6013      	str	r3, [r2, #0]
			  	  					Velo_Start = q_Velo;
 80023f0:	4b0e      	ldr	r3, [pc, #56]	@ (800242c <Trajectory+0x2a4>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a08      	ldr	r2, [pc, #32]	@ (8002418 <Trajectory+0x290>)
 80023f6:	6013      	str	r3, [r2, #0]
			  	  					t = 0;
 80023f8:	4b08      	ldr	r3, [pc, #32]	@ (800241c <Trajectory+0x294>)
 80023fa:	f04f 0200 	mov.w	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
			  	  			  	break;
 8002400:	e0d9      	b.n	80025b6 <Trajectory+0x42e>
 8002402:	bf00      	nop
 8002404:	20000370 	.word	0x20000370
 8002408:	20000290 	.word	0x20000290
 800240c:	20000274 	.word	0x20000274
 8002410:	20000044 	.word	0x20000044
 8002414:	20000050 	.word	0x20000050
 8002418:	2000027c 	.word	0x2000027c
 800241c:	2000028c 	.word	0x2000028c
 8002420:	3fe00000 	.word	0x3fe00000
 8002424:	2000004c 	.word	0x2000004c
 8002428:	20000280 	.word	0x20000280
 800242c:	20000284 	.word	0x20000284
 8002430:	20000288 	.word	0x20000288
 8002434:	20000048 	.word	0x20000048
			  	  		  case 2:
			  	  			  	q_Pos = Pos_Start + (Velo_Start*t)-((direction*0.5*Max_Acc)*(t*t));
 8002438:	4b73      	ldr	r3, [pc, #460]	@ (8002608 <Trajectory+0x480>)
 800243a:	ed93 7a00 	vldr	s14, [r3]
 800243e:	4b73      	ldr	r3, [pc, #460]	@ (800260c <Trajectory+0x484>)
 8002440:	edd3 7a00 	vldr	s15, [r3]
 8002444:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002448:	4b71      	ldr	r3, [pc, #452]	@ (8002610 <Trajectory+0x488>)
 800244a:	edd3 7a00 	vldr	s15, [r3]
 800244e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002452:	ee17 0a90 	vmov	r0, s15
 8002456:	f7fe f843 	bl	80004e0 <__aeabi_f2d>
 800245a:	4680      	mov	r8, r0
 800245c:	4689      	mov	r9, r1
 800245e:	4b6d      	ldr	r3, [pc, #436]	@ (8002614 <Trajectory+0x48c>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f7fe f82a 	bl	80004bc <__aeabi_i2d>
 8002468:	f04f 0200 	mov.w	r2, #0
 800246c:	4b6a      	ldr	r3, [pc, #424]	@ (8002618 <Trajectory+0x490>)
 800246e:	f7fe f88f 	bl	8000590 <__aeabi_dmul>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	4692      	mov	sl, r2
 8002478:	469b      	mov	fp, r3
 800247a:	4b68      	ldr	r3, [pc, #416]	@ (800261c <Trajectory+0x494>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe f82e 	bl	80004e0 <__aeabi_f2d>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	4650      	mov	r0, sl
 800248a:	4659      	mov	r1, fp
 800248c:	f7fe f880 	bl	8000590 <__aeabi_dmul>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4692      	mov	sl, r2
 8002496:	469b      	mov	fp, r3
 8002498:	4b5c      	ldr	r3, [pc, #368]	@ (800260c <Trajectory+0x484>)
 800249a:	ed93 7a00 	vldr	s14, [r3]
 800249e:	4b5b      	ldr	r3, [pc, #364]	@ (800260c <Trajectory+0x484>)
 80024a0:	edd3 7a00 	vldr	s15, [r3]
 80024a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024a8:	ee17 0a90 	vmov	r0, s15
 80024ac:	f7fe f818 	bl	80004e0 <__aeabi_f2d>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	4650      	mov	r0, sl
 80024b6:	4659      	mov	r1, fp
 80024b8:	f7fe f86a 	bl	8000590 <__aeabi_dmul>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	4640      	mov	r0, r8
 80024c2:	4649      	mov	r1, r9
 80024c4:	f7fd feac 	bl	8000220 <__aeabi_dsub>
 80024c8:	4602      	mov	r2, r0
 80024ca:	460b      	mov	r3, r1
 80024cc:	4610      	mov	r0, r2
 80024ce:	4619      	mov	r1, r3
 80024d0:	f7fe faf8 	bl	8000ac4 <__aeabi_d2f>
 80024d4:	4603      	mov	r3, r0
 80024d6:	4a52      	ldr	r2, [pc, #328]	@ (8002620 <Trajectory+0x498>)
 80024d8:	6013      	str	r3, [r2, #0]
			  	  			  	q_Velo = Velo_Start - direction*Max_Acc*t;
 80024da:	4b4b      	ldr	r3, [pc, #300]	@ (8002608 <Trajectory+0x480>)
 80024dc:	ed93 7a00 	vldr	s14, [r3]
 80024e0:	4b4c      	ldr	r3, [pc, #304]	@ (8002614 <Trajectory+0x48c>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	ee07 3a90 	vmov	s15, r3
 80024e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80024ec:	4b4b      	ldr	r3, [pc, #300]	@ (800261c <Trajectory+0x494>)
 80024ee:	edd3 7a00 	vldr	s15, [r3]
 80024f2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80024f6:	4b45      	ldr	r3, [pc, #276]	@ (800260c <Trajectory+0x484>)
 80024f8:	edd3 7a00 	vldr	s15, [r3]
 80024fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002500:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002504:	4b47      	ldr	r3, [pc, #284]	@ (8002624 <Trajectory+0x49c>)
 8002506:	edc3 7a00 	vstr	s15, [r3]
			  	  			  	q_Acc = -direction*Max_Acc;
 800250a:	4b42      	ldr	r3, [pc, #264]	@ (8002614 <Trajectory+0x48c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	425b      	negs	r3, r3
 8002510:	ee07 3a90 	vmov	s15, r3
 8002514:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002518:	4b40      	ldr	r3, [pc, #256]	@ (800261c <Trajectory+0x494>)
 800251a:	edd3 7a00 	vldr	s15, [r3]
 800251e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002522:	4b41      	ldr	r3, [pc, #260]	@ (8002628 <Trajectory+0x4a0>)
 8002524:	edc3 7a00 	vstr	s15, [r3]
			  	  			  if(fabs(q_Velo) <= 0)
 8002528:	4b3e      	ldr	r3, [pc, #248]	@ (8002624 <Trajectory+0x49c>)
 800252a:	edd3 7a00 	vldr	s15, [r3]
 800252e:	eef0 7ae7 	vabs.f32	s15, s15
 8002532:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800253a:	d900      	bls.n	800253e <Trajectory+0x3b6>
			  	  				{
			  	  					state_Tra = 3;
			  	  					t = 0;
			  	  				}
			  	  			  	break;
 800253c:	e03b      	b.n	80025b6 <Trajectory+0x42e>
			  	  					state_Tra = 3;
 800253e:	4b3b      	ldr	r3, [pc, #236]	@ (800262c <Trajectory+0x4a4>)
 8002540:	2203      	movs	r2, #3
 8002542:	601a      	str	r2, [r3, #0]
			  	  					t = 0;
 8002544:	4b31      	ldr	r3, [pc, #196]	@ (800260c <Trajectory+0x484>)
 8002546:	f04f 0200 	mov.w	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
			  	  			  	break;
 800254c:	e033      	b.n	80025b6 <Trajectory+0x42e>
			  	  		  case 3:
			  	  			  	if (FirstTraject == 1)
 800254e:	4b38      	ldr	r3, [pc, #224]	@ (8002630 <Trajectory+0x4a8>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d10a      	bne.n	800256c <Trajectory+0x3e4>
			  	  			  	{
			  	  			  	Old_Target = Pos_Target;
 8002556:	4b37      	ldr	r3, [pc, #220]	@ (8002634 <Trajectory+0x4ac>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a37      	ldr	r2, [pc, #220]	@ (8002638 <Trajectory+0x4b0>)
 800255c:	6013      	str	r3, [r2, #0]
			  	  			  	FirstTraject = 0;
 800255e:	4b34      	ldr	r3, [pc, #208]	@ (8002630 <Trajectory+0x4a8>)
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
			  	  			  	q_Acc = 0;
 8002564:	4b30      	ldr	r3, [pc, #192]	@ (8002628 <Trajectory+0x4a0>)
 8002566:	f04f 0200 	mov.w	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
			  	  			  	}
			  	  			  	if(Pos_Target != Old_Target)
 800256c:	4b31      	ldr	r3, [pc, #196]	@ (8002634 <Trajectory+0x4ac>)
 800256e:	ed93 7a00 	vldr	s14, [r3]
 8002572:	4b31      	ldr	r3, [pc, #196]	@ (8002638 <Trajectory+0x4b0>)
 8002574:	edd3 7a00 	vldr	s15, [r3]
 8002578:	eeb4 7a67 	vcmp.f32	s14, s15
 800257c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002580:	d018      	beq.n	80025b4 <Trajectory+0x42c>
			  	  			  	{
			  	  			  		state_Tra = 0;
 8002582:	4b2a      	ldr	r3, [pc, #168]	@ (800262c <Trajectory+0x4a4>)
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
			  	  			  		t = 0;
 8002588:	4b20      	ldr	r3, [pc, #128]	@ (800260c <Trajectory+0x484>)
 800258a:	f04f 0200 	mov.w	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
			  	  			  		Pos_Start = Pos;
 8002590:	4b2a      	ldr	r3, [pc, #168]	@ (800263c <Trajectory+0x4b4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a1e      	ldr	r2, [pc, #120]	@ (8002610 <Trajectory+0x488>)
 8002596:	6013      	str	r3, [r2, #0]
//			  	  			  		Pos_Start = q_Pos;
			  	  			  		Velo_Start = q_Velo;
 8002598:	4b22      	ldr	r3, [pc, #136]	@ (8002624 <Trajectory+0x49c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a1a      	ldr	r2, [pc, #104]	@ (8002608 <Trajectory+0x480>)
 800259e:	6013      	str	r3, [r2, #0]
			  	  			  		q_Acc = 0;
 80025a0:	4b21      	ldr	r3, [pc, #132]	@ (8002628 <Trajectory+0x4a0>)
 80025a2:	f04f 0200 	mov.w	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
			  	  			  		Old_Target = Pos_Target;
 80025a8:	4b22      	ldr	r3, [pc, #136]	@ (8002634 <Trajectory+0x4ac>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a22      	ldr	r2, [pc, #136]	@ (8002638 <Trajectory+0x4b0>)
 80025ae:	6013      	str	r3, [r2, #0]
			  	  			  		reset();
 80025b0:	f000 f848 	bl	8002644 <reset>

			  	  			  	}
			  	  			  	break;
 80025b4:	bf00      	nop
			  	  		  }
		  t = t+0.0001;
 80025b6:	4b15      	ldr	r3, [pc, #84]	@ (800260c <Trajectory+0x484>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f7fd ff90 	bl	80004e0 <__aeabi_f2d>
 80025c0:	a30f      	add	r3, pc, #60	@ (adr r3, 8002600 <Trajectory+0x478>)
 80025c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c6:	f7fd fe2d 	bl	8000224 <__adddf3>
 80025ca:	4602      	mov	r2, r0
 80025cc:	460b      	mov	r3, r1
 80025ce:	4610      	mov	r0, r2
 80025d0:	4619      	mov	r1, r3
 80025d2:	f7fe fa77 	bl	8000ac4 <__aeabi_d2f>
 80025d6:	4603      	mov	r3, r0
 80025d8:	4a0c      	ldr	r2, [pc, #48]	@ (800260c <Trajectory+0x484>)
 80025da:	6013      	str	r3, [r2, #0]
		  timestamp_Traject = currentTime + 100;
 80025dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80025e0:	f112 0464 	adds.w	r4, r2, #100	@ 0x64
 80025e4:	f143 0500 	adc.w	r5, r3, #0
 80025e8:	4622      	mov	r2, r4
 80025ea:	462b      	mov	r3, r5
 80025ec:	4914      	ldr	r1, [pc, #80]	@ (8002640 <Trajectory+0x4b8>)
 80025ee:	e9c1 2300 	strd	r2, r3, [r1]
		  }
}
 80025f2:	bf00      	nop
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025fc:	f3af 8000 	nop.w
 8002600:	eb1c432d 	.word	0xeb1c432d
 8002604:	3f1a36e2 	.word	0x3f1a36e2
 8002608:	2000027c 	.word	0x2000027c
 800260c:	2000028c 	.word	0x2000028c
 8002610:	20000274 	.word	0x20000274
 8002614:	20000050 	.word	0x20000050
 8002618:	3fe00000 	.word	0x3fe00000
 800261c:	2000004c 	.word	0x2000004c
 8002620:	20000280 	.word	0x20000280
 8002624:	20000284 	.word	0x20000284
 8002628:	20000288 	.word	0x20000288
 800262c:	20000290 	.word	0x20000290
 8002630:	20000054 	.word	0x20000054
 8002634:	20000044 	.word	0x20000044
 8002638:	20000278 	.word	0x20000278
 800263c:	200002b0 	.word	0x200002b0
 8002640:	20000370 	.word	0x20000370

08002644 <reset>:

void reset(){
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
	Velocontrol.Error[NEW] = 0;
 8002648:	4b22      	ldr	r3, [pc, #136]	@ (80026d4 <reset+0x90>)
 800264a:	f04f 0200 	mov.w	r2, #0
 800264e:	60da      	str	r2, [r3, #12]
	Velocontrol.Error[OLD] = 0;
 8002650:	4b20      	ldr	r3, [pc, #128]	@ (80026d4 <reset+0x90>)
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	611a      	str	r2, [r3, #16]
	Velocontrol.Error[OLDER] = 0;
 8002658:	4b1e      	ldr	r3, [pc, #120]	@ (80026d4 <reset+0x90>)
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	615a      	str	r2, [r3, #20]
	Velocontrol.Output[NEW] = 0;
 8002660:	4b1c      	ldr	r3, [pc, #112]	@ (80026d4 <reset+0x90>)
 8002662:	f04f 0200 	mov.w	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
	Velocontrol.Output[OLD] = 0;
 8002668:	4b1a      	ldr	r3, [pc, #104]	@ (80026d4 <reset+0x90>)
 800266a:	f04f 0200 	mov.w	r2, #0
 800266e:	605a      	str	r2, [r3, #4]
	Velocontrol.Output[OLDER] = 0;
 8002670:	4b18      	ldr	r3, [pc, #96]	@ (80026d4 <reset+0x90>)
 8002672:	f04f 0200 	mov.w	r2, #0
 8002676:	609a      	str	r2, [r3, #8]

	Poscontrol.Error[NEW] = 0;
 8002678:	4b17      	ldr	r3, [pc, #92]	@ (80026d8 <reset+0x94>)
 800267a:	f04f 0200 	mov.w	r2, #0
 800267e:	60da      	str	r2, [r3, #12]
	Poscontrol.Error[OLD] = 0;
 8002680:	4b15      	ldr	r3, [pc, #84]	@ (80026d8 <reset+0x94>)
 8002682:	f04f 0200 	mov.w	r2, #0
 8002686:	611a      	str	r2, [r3, #16]
	Poscontrol.Error[OLDER] = 0;
 8002688:	4b13      	ldr	r3, [pc, #76]	@ (80026d8 <reset+0x94>)
 800268a:	f04f 0200 	mov.w	r2, #0
 800268e:	615a      	str	r2, [r3, #20]
	Poscontrol.Output[NEW] = 0;
 8002690:	4b11      	ldr	r3, [pc, #68]	@ (80026d8 <reset+0x94>)
 8002692:	f04f 0200 	mov.w	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
	Poscontrol.Output[OLD] = 0;
 8002698:	4b0f      	ldr	r3, [pc, #60]	@ (80026d8 <reset+0x94>)
 800269a:	f04f 0200 	mov.w	r2, #0
 800269e:	605a      	str	r2, [r3, #4]
	Poscontrol.Output[OLDER] = 0;
 80026a0:	4b0d      	ldr	r3, [pc, #52]	@ (80026d8 <reset+0x94>)
 80026a2:	f04f 0200 	mov.w	r2, #0
 80026a6:	609a      	str	r2, [r3, #8]
	PWMmap = 0;
 80026a8:	4b0c      	ldr	r3, [pc, #48]	@ (80026dc <reset+0x98>)
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
	Pos_Start = Pos;
 80026b0:	4b0b      	ldr	r3, [pc, #44]	@ (80026e0 <reset+0x9c>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a0b      	ldr	r2, [pc, #44]	@ (80026e4 <reset+0xa0>)
 80026b6:	6013      	str	r3, [r2, #0]
	Velo_Start = 0;
 80026b8:	4b0b      	ldr	r3, [pc, #44]	@ (80026e8 <reset+0xa4>)
 80026ba:	f04f 0200 	mov.w	r2, #0
 80026be:	601a      	str	r2, [r3, #0]
	t = 0;
 80026c0:	4b0a      	ldr	r3, [pc, #40]	@ (80026ec <reset+0xa8>)
 80026c2:	f04f 0200 	mov.w	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
}
 80026c8:	bf00      	nop
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	200002d8 	.word	0x200002d8
 80026d8:	20000300 	.word	0x20000300
 80026dc:	200002c4 	.word	0x200002c4
 80026e0:	200002b0 	.word	0x200002b0
 80026e4:	20000274 	.word	0x20000274
 80026e8:	2000027c 	.word	0x2000027c
 80026ec:	2000028c 	.word	0x2000028c

080026f0 <PIDposition>:

void PIDposition()
{
 80026f0:	b5b0      	push	{r4, r5, r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
	static uint64_t timestamp3 =0;
	int64_t currentTime = micros();
 80026f6:	f7ff fb8f 	bl	8001e18 <micros>
 80026fa:	4602      	mov	r2, r0
 80026fc:	460b      	mov	r3, r1
 80026fe:	e9c7 2300 	strd	r2, r3, [r7]
	if(currentTime > timestamp3)
 8002702:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002706:	49c8      	ldr	r1, [pc, #800]	@ (8002a28 <PIDposition+0x338>)
 8002708:	e9d1 0100 	ldrd	r0, r1, [r1]
 800270c:	4290      	cmp	r0, r2
 800270e:	eb71 0303 	sbcs.w	r3, r1, r3
 8002712:	f080 816f 	bcs.w	80029f4 <PIDposition+0x304>
	  {
			Poscontrol.Error[NEW] = q_Pos - Pos;//
 8002716:	4bc5      	ldr	r3, [pc, #788]	@ (8002a2c <PIDposition+0x33c>)
 8002718:	ed93 7a00 	vldr	s14, [r3]
 800271c:	4bc4      	ldr	r3, [pc, #784]	@ (8002a30 <PIDposition+0x340>)
 800271e:	edd3 7a00 	vldr	s15, [r3]
 8002722:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002726:	4bc3      	ldr	r3, [pc, #780]	@ (8002a34 <PIDposition+0x344>)
 8002728:	edc3 7a03 	vstr	s15, [r3, #12]
//			Poscontrol.Output[NEW] = ((((Poscontrol.kp*Poscontrol.T)+(Poscontrol.ki*Poscontrol.T*Poscontrol.T)+(Poscontrol.kd))*Poscontrol.Error[NEW])-(((Poscontrol.kp*Poscontrol.T)+(2*Poscontrol.kd))*Poscontrol.Error[OLD])+(Poscontrol.kd*Poscontrol.Error[OLDER])+(Poscontrol.Output[OLD]*Poscontrol.T))/Poscontrol.T;
			Poscontrol.Output[NEW] = ((((Poscontrol.kp*2*Poscontrol.T)+(Poscontrol.ki*Poscontrol.T*Poscontrol.T)+(2*Poscontrol.kd))*Poscontrol.Error[NEW])-(((Poscontrol.kp*2*Poscontrol.T)-(Poscontrol.ki*Poscontrol.T*Poscontrol.T)+(4*Poscontrol.kd))*Poscontrol.Error[OLD])+(2*Poscontrol.kd*Poscontrol.Error[OLDER])+(Poscontrol.Output[OLD]*2*Poscontrol.T))/(2*Poscontrol.T);
 800272c:	4bc1      	ldr	r3, [pc, #772]	@ (8002a34 <PIDposition+0x344>)
 800272e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002732:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002736:	4bbf      	ldr	r3, [pc, #764]	@ (8002a34 <PIDposition+0x344>)
 8002738:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800273c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002740:	4bbc      	ldr	r3, [pc, #752]	@ (8002a34 <PIDposition+0x344>)
 8002742:	edd3 6a07 	vldr	s13, [r3, #28]
 8002746:	4bbb      	ldr	r3, [pc, #748]	@ (8002a34 <PIDposition+0x344>)
 8002748:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800274c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002750:	4bb8      	ldr	r3, [pc, #736]	@ (8002a34 <PIDposition+0x344>)
 8002752:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002756:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800275a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800275e:	4bb5      	ldr	r3, [pc, #724]	@ (8002a34 <PIDposition+0x344>)
 8002760:	edd3 7a08 	vldr	s15, [r3, #32]
 8002764:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002768:	ee37 7a27 	vadd.f32	s14, s14, s15
 800276c:	4bb1      	ldr	r3, [pc, #708]	@ (8002a34 <PIDposition+0x344>)
 800276e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002772:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002776:	4baf      	ldr	r3, [pc, #700]	@ (8002a34 <PIDposition+0x344>)
 8002778:	edd3 7a06 	vldr	s15, [r3, #24]
 800277c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002780:	4bac      	ldr	r3, [pc, #688]	@ (8002a34 <PIDposition+0x344>)
 8002782:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002786:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800278a:	4baa      	ldr	r3, [pc, #680]	@ (8002a34 <PIDposition+0x344>)
 800278c:	ed93 6a07 	vldr	s12, [r3, #28]
 8002790:	4ba8      	ldr	r3, [pc, #672]	@ (8002a34 <PIDposition+0x344>)
 8002792:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002796:	ee26 6a27 	vmul.f32	s12, s12, s15
 800279a:	4ba6      	ldr	r3, [pc, #664]	@ (8002a34 <PIDposition+0x344>)
 800279c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80027a0:	ee66 7a27 	vmul.f32	s15, s12, s15
 80027a4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80027a8:	4ba2      	ldr	r3, [pc, #648]	@ (8002a34 <PIDposition+0x344>)
 80027aa:	edd3 7a08 	vldr	s15, [r3, #32]
 80027ae:	eeb1 6a00 	vmov.f32	s12, #16	@ 0x40800000  4.0
 80027b2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80027b6:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80027ba:	4b9e      	ldr	r3, [pc, #632]	@ (8002a34 <PIDposition+0x344>)
 80027bc:	edd3 7a04 	vldr	s15, [r3, #16]
 80027c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027c8:	4b9a      	ldr	r3, [pc, #616]	@ (8002a34 <PIDposition+0x344>)
 80027ca:	edd3 7a08 	vldr	s15, [r3, #32]
 80027ce:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80027d2:	4b98      	ldr	r3, [pc, #608]	@ (8002a34 <PIDposition+0x344>)
 80027d4:	edd3 7a05 	vldr	s15, [r3, #20]
 80027d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027e0:	4b94      	ldr	r3, [pc, #592]	@ (8002a34 <PIDposition+0x344>)
 80027e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80027e6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80027ea:	4b92      	ldr	r3, [pc, #584]	@ (8002a34 <PIDposition+0x344>)
 80027ec:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80027f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027f4:	ee77 6a27 	vadd.f32	s13, s14, s15
 80027f8:	4b8e      	ldr	r3, [pc, #568]	@ (8002a34 <PIDposition+0x344>)
 80027fa:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80027fe:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002802:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002806:	4b8b      	ldr	r3, [pc, #556]	@ (8002a34 <PIDposition+0x344>)
 8002808:	edc3 7a00 	vstr	s15, [r3]
			Poscontrol.Error[OLDER] = Poscontrol.Error[OLD];
 800280c:	4b89      	ldr	r3, [pc, #548]	@ (8002a34 <PIDposition+0x344>)
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	4a88      	ldr	r2, [pc, #544]	@ (8002a34 <PIDposition+0x344>)
 8002812:	6153      	str	r3, [r2, #20]
			Poscontrol.Error[OLD] = Poscontrol.Error[NEW];
 8002814:	4b87      	ldr	r3, [pc, #540]	@ (8002a34 <PIDposition+0x344>)
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	4a86      	ldr	r2, [pc, #536]	@ (8002a34 <PIDposition+0x344>)
 800281a:	6113      	str	r3, [r2, #16]
			Poscontrol.Output[OLDER] = Poscontrol.Output[OLD];
 800281c:	4b85      	ldr	r3, [pc, #532]	@ (8002a34 <PIDposition+0x344>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	4a84      	ldr	r2, [pc, #528]	@ (8002a34 <PIDposition+0x344>)
 8002822:	6093      	str	r3, [r2, #8]
			Poscontrol.Output[OLD] = Poscontrol.Output[NEW];
 8002824:	4b83      	ldr	r3, [pc, #524]	@ (8002a34 <PIDposition+0x344>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a82      	ldr	r2, [pc, #520]	@ (8002a34 <PIDposition+0x344>)
 800282a:	6053      	str	r3, [r2, #4]

			Velocontrol.Error[NEW] = Poscontrol.Output[NEW]+q_Velo-speed_fill;//
 800282c:	4b81      	ldr	r3, [pc, #516]	@ (8002a34 <PIDposition+0x344>)
 800282e:	ed93 7a00 	vldr	s14, [r3]
 8002832:	4b81      	ldr	r3, [pc, #516]	@ (8002a38 <PIDposition+0x348>)
 8002834:	edd3 7a00 	vldr	s15, [r3]
 8002838:	ee37 7a27 	vadd.f32	s14, s14, s15
 800283c:	4b7f      	ldr	r3, [pc, #508]	@ (8002a3c <PIDposition+0x34c>)
 800283e:	edd3 7a00 	vldr	s15, [r3]
 8002842:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002846:	4b7e      	ldr	r3, [pc, #504]	@ (8002a40 <PIDposition+0x350>)
 8002848:	edc3 7a03 	vstr	s15, [r3, #12]
			ONE = (((Velocontrol.kp*2*Velocontrol.T)+(Velocontrol.ki*Velocontrol.T*Velocontrol.T)+(2*Velocontrol.kd))*Velocontrol.Error[NEW])/(2*Velocontrol.T);
 800284c:	4b7c      	ldr	r3, [pc, #496]	@ (8002a40 <PIDposition+0x350>)
 800284e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002852:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002856:	4b7a      	ldr	r3, [pc, #488]	@ (8002a40 <PIDposition+0x350>)
 8002858:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800285c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002860:	4b77      	ldr	r3, [pc, #476]	@ (8002a40 <PIDposition+0x350>)
 8002862:	edd3 6a07 	vldr	s13, [r3, #28]
 8002866:	4b76      	ldr	r3, [pc, #472]	@ (8002a40 <PIDposition+0x350>)
 8002868:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800286c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002870:	4b73      	ldr	r3, [pc, #460]	@ (8002a40 <PIDposition+0x350>)
 8002872:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002876:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800287a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800287e:	4b70      	ldr	r3, [pc, #448]	@ (8002a40 <PIDposition+0x350>)
 8002880:	edd3 7a08 	vldr	s15, [r3, #32]
 8002884:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002888:	ee37 7a27 	vadd.f32	s14, s14, s15
 800288c:	4b6c      	ldr	r3, [pc, #432]	@ (8002a40 <PIDposition+0x350>)
 800288e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002892:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002896:	4b6a      	ldr	r3, [pc, #424]	@ (8002a40 <PIDposition+0x350>)
 8002898:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800289c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80028a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028a4:	4b67      	ldr	r3, [pc, #412]	@ (8002a44 <PIDposition+0x354>)
 80028a6:	edc3 7a00 	vstr	s15, [r3]
			TWO = (((Velocontrol.kp*2*Velocontrol.T)-(Velocontrol.ki*Velocontrol.T*Velocontrol.T)+(4*Velocontrol.kd))*Velocontrol.Error[OLD])/(2*Velocontrol.T);
 80028aa:	4b65      	ldr	r3, [pc, #404]	@ (8002a40 <PIDposition+0x350>)
 80028ac:	edd3 7a06 	vldr	s15, [r3, #24]
 80028b0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80028b4:	4b62      	ldr	r3, [pc, #392]	@ (8002a40 <PIDposition+0x350>)
 80028b6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80028ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028be:	4b60      	ldr	r3, [pc, #384]	@ (8002a40 <PIDposition+0x350>)
 80028c0:	edd3 6a07 	vldr	s13, [r3, #28]
 80028c4:	4b5e      	ldr	r3, [pc, #376]	@ (8002a40 <PIDposition+0x350>)
 80028c6:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80028ca:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80028ce:	4b5c      	ldr	r3, [pc, #368]	@ (8002a40 <PIDposition+0x350>)
 80028d0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80028d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80028dc:	4b58      	ldr	r3, [pc, #352]	@ (8002a40 <PIDposition+0x350>)
 80028de:	edd3 7a08 	vldr	s15, [r3, #32]
 80028e2:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 80028e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80028ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028ee:	4b54      	ldr	r3, [pc, #336]	@ (8002a40 <PIDposition+0x350>)
 80028f0:	edd3 7a04 	vldr	s15, [r3, #16]
 80028f4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80028f8:	4b51      	ldr	r3, [pc, #324]	@ (8002a40 <PIDposition+0x350>)
 80028fa:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80028fe:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002902:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002906:	4b50      	ldr	r3, [pc, #320]	@ (8002a48 <PIDposition+0x358>)
 8002908:	edc3 7a00 	vstr	s15, [r3]
			THREE = (2*Velocontrol.kd*Velocontrol.Error[OLDER])/(2*Velocontrol.T);
 800290c:	4b4c      	ldr	r3, [pc, #304]	@ (8002a40 <PIDposition+0x350>)
 800290e:	edd3 7a08 	vldr	s15, [r3, #32]
 8002912:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002916:	4b4a      	ldr	r3, [pc, #296]	@ (8002a40 <PIDposition+0x350>)
 8002918:	edd3 7a05 	vldr	s15, [r3, #20]
 800291c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002920:	4b47      	ldr	r3, [pc, #284]	@ (8002a40 <PIDposition+0x350>)
 8002922:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002926:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800292a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800292e:	4b47      	ldr	r3, [pc, #284]	@ (8002a4c <PIDposition+0x35c>)
 8002930:	edc3 7a00 	vstr	s15, [r3]
			FOUR = (Velocontrol.Output[OLD]*2*Velocontrol.T)/(2*Velocontrol.T);
 8002934:	4b42      	ldr	r3, [pc, #264]	@ (8002a40 <PIDposition+0x350>)
 8002936:	edd3 7a01 	vldr	s15, [r3, #4]
 800293a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800293e:	4b40      	ldr	r3, [pc, #256]	@ (8002a40 <PIDposition+0x350>)
 8002940:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002944:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002948:	4b3d      	ldr	r3, [pc, #244]	@ (8002a40 <PIDposition+0x350>)
 800294a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800294e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002952:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002956:	4b3e      	ldr	r3, [pc, #248]	@ (8002a50 <PIDposition+0x360>)
 8002958:	edc3 7a00 	vstr	s15, [r3]
			Velocontrol.Output[NEW] = (ONE-TWO+THREE+FOUR);//
 800295c:	4b39      	ldr	r3, [pc, #228]	@ (8002a44 <PIDposition+0x354>)
 800295e:	ed93 7a00 	vldr	s14, [r3]
 8002962:	4b39      	ldr	r3, [pc, #228]	@ (8002a48 <PIDposition+0x358>)
 8002964:	edd3 7a00 	vldr	s15, [r3]
 8002968:	ee37 7a67 	vsub.f32	s14, s14, s15
 800296c:	4b37      	ldr	r3, [pc, #220]	@ (8002a4c <PIDposition+0x35c>)
 800296e:	edd3 7a00 	vldr	s15, [r3]
 8002972:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002976:	4b36      	ldr	r3, [pc, #216]	@ (8002a50 <PIDposition+0x360>)
 8002978:	edd3 7a00 	vldr	s15, [r3]
 800297c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002980:	4b2f      	ldr	r3, [pc, #188]	@ (8002a40 <PIDposition+0x350>)
 8002982:	edc3 7a00 	vstr	s15, [r3]
//			test = (ONE-TWO+THREE+FOUR);
			if(Velocontrol.Output[NEW]>3.3)Velocontrol.Output[NEW]=3.3;
 8002986:	4b2e      	ldr	r3, [pc, #184]	@ (8002a40 <PIDposition+0x350>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4618      	mov	r0, r3
 800298c:	f7fd fda8 	bl	80004e0 <__aeabi_f2d>
 8002990:	a321      	add	r3, pc, #132	@ (adr r3, 8002a18 <PIDposition+0x328>)
 8002992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002996:	f7fe f88b 	bl	8000ab0 <__aeabi_dcmpgt>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d002      	beq.n	80029a6 <PIDposition+0x2b6>
 80029a0:	4b27      	ldr	r3, [pc, #156]	@ (8002a40 <PIDposition+0x350>)
 80029a2:	4a2c      	ldr	r2, [pc, #176]	@ (8002a54 <PIDposition+0x364>)
 80029a4:	601a      	str	r2, [r3, #0]
			if(Velocontrol.Output[NEW]<-3.3)Velocontrol.Output[NEW]=-3.3;
 80029a6:	4b26      	ldr	r3, [pc, #152]	@ (8002a40 <PIDposition+0x350>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fd fd98 	bl	80004e0 <__aeabi_f2d>
 80029b0:	a31b      	add	r3, pc, #108	@ (adr r3, 8002a20 <PIDposition+0x330>)
 80029b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b6:	f7fe f85d 	bl	8000a74 <__aeabi_dcmplt>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d002      	beq.n	80029c6 <PIDposition+0x2d6>
 80029c0:	4b1f      	ldr	r3, [pc, #124]	@ (8002a40 <PIDposition+0x350>)
 80029c2:	4a25      	ldr	r2, [pc, #148]	@ (8002a58 <PIDposition+0x368>)
 80029c4:	601a      	str	r2, [r3, #0]
			Velocontrol.Error[OLDER] = Velocontrol.Error[OLD];
 80029c6:	4b1e      	ldr	r3, [pc, #120]	@ (8002a40 <PIDposition+0x350>)
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	4a1d      	ldr	r2, [pc, #116]	@ (8002a40 <PIDposition+0x350>)
 80029cc:	6153      	str	r3, [r2, #20]
			Velocontrol.Error[OLD] = Velocontrol.Error[NEW];
 80029ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002a40 <PIDposition+0x350>)
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	4a1b      	ldr	r2, [pc, #108]	@ (8002a40 <PIDposition+0x350>)
 80029d4:	6113      	str	r3, [r2, #16]
			Velocontrol.Output[OLD] = Velocontrol.Output[NEW];
 80029d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002a40 <PIDposition+0x350>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a19      	ldr	r2, [pc, #100]	@ (8002a40 <PIDposition+0x350>)
 80029dc:	6053      	str	r3, [r2, #4]
//			Velocontrol.Error[OLDER] = Velocontrol.Error[OLD];
//			Velocontrol.Error[OLD] = Velocontrol.Error[NEW];
//			Velocontrol.Output[OLDER] = Velocontrol.Output[OLD];
//			Velocontrol.Output[OLD] = Velocontrol.Output[NEW];
	//					if(fabs(Pos_Target-Pos) <= 0.1)start = 0;
			timestamp3 =currentTime + 100;
 80029de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029e2:	f112 0464 	adds.w	r4, r2, #100	@ 0x64
 80029e6:	f143 0500 	adc.w	r5, r3, #0
 80029ea:	4622      	mov	r2, r4
 80029ec:	462b      	mov	r3, r5
 80029ee:	490e      	ldr	r1, [pc, #56]	@ (8002a28 <PIDposition+0x338>)
 80029f0:	e9c1 2300 	strd	r2, r3, [r1]
	  }
		PWMmap = mapFloat(Velocontrol.Output[NEW],-3.3,3.3,-20000,20000);
 80029f4:	4b12      	ldr	r3, [pc, #72]	@ (8002a40 <PIDposition+0x350>)
 80029f6:	edd3 7a00 	vldr	s15, [r3]
 80029fa:	ed9f 2a18 	vldr	s4, [pc, #96]	@ 8002a5c <PIDposition+0x36c>
 80029fe:	eddf 1a18 	vldr	s3, [pc, #96]	@ 8002a60 <PIDposition+0x370>
 8002a02:	ed9f 1a18 	vldr	s2, [pc, #96]	@ 8002a64 <PIDposition+0x374>
 8002a06:	eddf 0a18 	vldr	s1, [pc, #96]	@ 8002a68 <PIDposition+0x378>
 8002a0a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a0e:	f000 f861 	bl	8002ad4 <mapFloat>
 8002a12:	e02b      	b.n	8002a6c <PIDposition+0x37c>
 8002a14:	f3af 8000 	nop.w
 8002a18:	66666666 	.word	0x66666666
 8002a1c:	400a6666 	.word	0x400a6666
 8002a20:	66666666 	.word	0x66666666
 8002a24:	c00a6666 	.word	0xc00a6666
 8002a28:	20000378 	.word	0x20000378
 8002a2c:	20000280 	.word	0x20000280
 8002a30:	200002b0 	.word	0x200002b0
 8002a34:	20000300 	.word	0x20000300
 8002a38:	20000284 	.word	0x20000284
 8002a3c:	200002a8 	.word	0x200002a8
 8002a40:	200002d8 	.word	0x200002d8
 8002a44:	200002c8 	.word	0x200002c8
 8002a48:	200002cc 	.word	0x200002cc
 8002a4c:	200002d0 	.word	0x200002d0
 8002a50:	200002d4 	.word	0x200002d4
 8002a54:	40533333 	.word	0x40533333
 8002a58:	c0533333 	.word	0xc0533333
 8002a5c:	469c4000 	.word	0x469c4000
 8002a60:	c69c4000 	.word	0xc69c4000
 8002a64:	40533333 	.word	0x40533333
 8002a68:	c0533333 	.word	0xc0533333
 8002a6c:	eef0 7a40 	vmov.f32	s15, s0
 8002a70:	4b16      	ldr	r3, [pc, #88]	@ (8002acc <PIDposition+0x3dc>)
 8002a72:	edc3 7a00 	vstr	s15, [r3]
	  if(PWMmap > 0)
 8002a76:	4b15      	ldr	r3, [pc, #84]	@ (8002acc <PIDposition+0x3dc>)
 8002a78:	edd3 7a00 	vldr	s15, [r3]
 8002a7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a84:	dd0e      	ble.n	8002aa4 <PIDposition+0x3b4>
	  {
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, 0);
 8002a86:	4b12      	ldr	r3, [pc, #72]	@ (8002ad0 <PIDposition+0x3e0>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, PWMmap);
 8002a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8002acc <PIDposition+0x3dc>)
 8002a90:	edd3 7a00 	vldr	s15, [r3]
 8002a94:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad0 <PIDposition+0x3e0>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a9c:	ee17 2a90 	vmov	r2, s15
 8002aa0:	639a      	str	r2, [r3, #56]	@ 0x38
	  else
	  {
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, fabs(PWMmap));
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
	  }
}
 8002aa2:	e00f      	b.n	8002ac4 <PIDposition+0x3d4>
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, fabs(PWMmap));
 8002aa4:	4b09      	ldr	r3, [pc, #36]	@ (8002acc <PIDposition+0x3dc>)
 8002aa6:	edd3 7a00 	vldr	s15, [r3]
 8002aaa:	eef0 7ae7 	vabs.f32	s15, s15
 8002aae:	4b08      	ldr	r3, [pc, #32]	@ (8002ad0 <PIDposition+0x3e0>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ab6:	ee17 2a90 	vmov	r2, s15
 8002aba:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 0);
 8002abc:	4b04      	ldr	r3, [pc, #16]	@ (8002ad0 <PIDposition+0x3e0>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002ac4:	bf00      	nop
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bdb0      	pop	{r4, r5, r7, pc}
 8002acc:	200002c4 	.word	0x200002c4
 8002ad0:	2000018c 	.word	0x2000018c

08002ad4 <mapFloat>:
float mapFloat(float x, float in_min, float in_max, float out_min, float out_max) {
 8002ad4:	b480      	push	{r7}
 8002ad6:	b087      	sub	sp, #28
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	ed87 0a05 	vstr	s0, [r7, #20]
 8002ade:	edc7 0a04 	vstr	s1, [r7, #16]
 8002ae2:	ed87 1a03 	vstr	s2, [r7, #12]
 8002ae6:	edc7 1a02 	vstr	s3, [r7, #8]
 8002aea:	ed87 2a01 	vstr	s4, [r7, #4]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8002aee:	ed97 7a05 	vldr	s14, [r7, #20]
 8002af2:	edd7 7a04 	vldr	s15, [r7, #16]
 8002af6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002afa:	edd7 6a01 	vldr	s13, [r7, #4]
 8002afe:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b02:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002b06:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002b0a:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b1a:	edd7 7a02 	vldr	s15, [r7, #8]
 8002b1e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002b22:	eeb0 0a67 	vmov.f32	s0, s15
 8002b26:	371c      	adds	r7, #28
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	4603      	mov	r3, r0
 8002b38:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 8002b3a:	88fb      	ldrh	r3, [r7, #6]
 8002b3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002b40:	d102      	bne.n	8002b48 <HAL_GPIO_EXTI_Callback+0x18>
	{
		start  = 1;
 8002b42:	4b04      	ldr	r3, [pc, #16]	@ (8002b54 <HAL_GPIO_EXTI_Callback+0x24>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	601a      	str	r2, [r3, #0]
	}
}
 8002b48:	bf00      	nop
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	20000270 	.word	0x20000270

08002b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b5c:	b672      	cpsid	i
}
 8002b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b60:	bf00      	nop
 8002b62:	e7fd      	b.n	8002b60 <Error_Handler+0x8>

08002b64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b6a:	4b0f      	ldr	r3, [pc, #60]	@ (8002ba8 <HAL_MspInit+0x44>)
 8002b6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b6e:	4a0e      	ldr	r2, [pc, #56]	@ (8002ba8 <HAL_MspInit+0x44>)
 8002b70:	f043 0301 	orr.w	r3, r3, #1
 8002b74:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b76:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba8 <HAL_MspInit+0x44>)
 8002b78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	607b      	str	r3, [r7, #4]
 8002b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b82:	4b09      	ldr	r3, [pc, #36]	@ (8002ba8 <HAL_MspInit+0x44>)
 8002b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b86:	4a08      	ldr	r2, [pc, #32]	@ (8002ba8 <HAL_MspInit+0x44>)
 8002b88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b8e:	4b06      	ldr	r3, [pc, #24]	@ (8002ba8 <HAL_MspInit+0x44>)
 8002b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b96:	603b      	str	r3, [r7, #0]
 8002b98:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002b9a:	f000 fd7b 	bl	8003694 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b9e:	bf00      	nop
 8002ba0:	3708      	adds	r7, #8
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	40021000 	.word	0x40021000

08002bac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b09e      	sub	sp, #120	@ 0x78
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002bb8:	2200      	movs	r2, #0
 8002bba:	601a      	str	r2, [r3, #0]
 8002bbc:	605a      	str	r2, [r3, #4]
 8002bbe:	609a      	str	r2, [r3, #8]
 8002bc0:	60da      	str	r2, [r3, #12]
 8002bc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002bc4:	f107 0310 	add.w	r3, r7, #16
 8002bc8:	2254      	movs	r2, #84	@ 0x54
 8002bca:	2100      	movs	r1, #0
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f004 f861 	bl	8006c94 <memset>
  if(huart->Instance==LPUART1)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a1f      	ldr	r2, [pc, #124]	@ (8002c54 <HAL_UART_MspInit+0xa8>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d136      	bne.n	8002c4a <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002bdc:	2320      	movs	r3, #32
 8002bde:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002be0:	2300      	movs	r3, #0
 8002be2:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002be4:	f107 0310 	add.w	r3, r7, #16
 8002be8:	4618      	mov	r0, r3
 8002bea:	f001 fa91 	bl	8004110 <HAL_RCCEx_PeriphCLKConfig>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002bf4:	f7ff ffb0 	bl	8002b58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002bf8:	4b17      	ldr	r3, [pc, #92]	@ (8002c58 <HAL_UART_MspInit+0xac>)
 8002bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bfc:	4a16      	ldr	r2, [pc, #88]	@ (8002c58 <HAL_UART_MspInit+0xac>)
 8002bfe:	f043 0301 	orr.w	r3, r3, #1
 8002c02:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002c04:	4b14      	ldr	r3, [pc, #80]	@ (8002c58 <HAL_UART_MspInit+0xac>)
 8002c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c10:	4b11      	ldr	r3, [pc, #68]	@ (8002c58 <HAL_UART_MspInit+0xac>)
 8002c12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c14:	4a10      	ldr	r2, [pc, #64]	@ (8002c58 <HAL_UART_MspInit+0xac>)
 8002c16:	f043 0301 	orr.w	r3, r3, #1
 8002c1a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8002c58 <HAL_UART_MspInit+0xac>)
 8002c1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	60bb      	str	r3, [r7, #8]
 8002c26:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002c28:	230c      	movs	r3, #12
 8002c2a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c30:	2300      	movs	r3, #0
 8002c32:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c34:	2300      	movs	r3, #0
 8002c36:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002c38:	230c      	movs	r3, #12
 8002c3a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c3c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002c40:	4619      	mov	r1, r3
 8002c42:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c46:	f000 facf 	bl	80031e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8002c4a:	bf00      	nop
 8002c4c:	3778      	adds	r7, #120	@ 0x78
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	40008000 	.word	0x40008000
 8002c58:	40021000 	.word	0x40021000

08002c5c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b08a      	sub	sp, #40	@ 0x28
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c64:	f107 0314 	add.w	r3, r7, #20
 8002c68:	2200      	movs	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	605a      	str	r2, [r3, #4]
 8002c6e:	609a      	str	r2, [r3, #8]
 8002c70:	60da      	str	r2, [r3, #12]
 8002c72:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a17      	ldr	r2, [pc, #92]	@ (8002cd8 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d128      	bne.n	8002cd0 <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c7e:	4b17      	ldr	r3, [pc, #92]	@ (8002cdc <HAL_TIM_Encoder_MspInit+0x80>)
 8002c80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c82:	4a16      	ldr	r2, [pc, #88]	@ (8002cdc <HAL_TIM_Encoder_MspInit+0x80>)
 8002c84:	f043 0302 	orr.w	r3, r3, #2
 8002c88:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c8a:	4b14      	ldr	r3, [pc, #80]	@ (8002cdc <HAL_TIM_Encoder_MspInit+0x80>)
 8002c8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c8e:	f003 0302 	and.w	r3, r3, #2
 8002c92:	613b      	str	r3, [r7, #16]
 8002c94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c96:	4b11      	ldr	r3, [pc, #68]	@ (8002cdc <HAL_TIM_Encoder_MspInit+0x80>)
 8002c98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c9a:	4a10      	ldr	r2, [pc, #64]	@ (8002cdc <HAL_TIM_Encoder_MspInit+0x80>)
 8002c9c:	f043 0301 	orr.w	r3, r3, #1
 8002ca0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ca2:	4b0e      	ldr	r3, [pc, #56]	@ (8002cdc <HAL_TIM_Encoder_MspInit+0x80>)
 8002ca4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	60fb      	str	r3, [r7, #12]
 8002cac:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002cae:	23c0      	movs	r3, #192	@ 0xc0
 8002cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cc2:	f107 0314 	add.w	r3, r7, #20
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ccc:	f000 fa8c 	bl	80031e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002cd0:	bf00      	nop
 8002cd2:	3728      	adds	r7, #40	@ 0x28
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40000400 	.word	0x40000400
 8002cdc:	40021000 	.word	0x40021000

08002ce0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a1f      	ldr	r2, [pc, #124]	@ (8002d6c <HAL_TIM_Base_MspInit+0x8c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d10c      	bne.n	8002d0c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002cf2:	4b1f      	ldr	r3, [pc, #124]	@ (8002d70 <HAL_TIM_Base_MspInit+0x90>)
 8002cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf6:	4a1e      	ldr	r2, [pc, #120]	@ (8002d70 <HAL_TIM_Base_MspInit+0x90>)
 8002cf8:	f043 0304 	orr.w	r3, r3, #4
 8002cfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8002cfe:	4b1c      	ldr	r3, [pc, #112]	@ (8002d70 <HAL_TIM_Base_MspInit+0x90>)
 8002d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d02:	f003 0304 	and.w	r3, r3, #4
 8002d06:	617b      	str	r3, [r7, #20]
 8002d08:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002d0a:	e02a      	b.n	8002d62 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM5)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a18      	ldr	r2, [pc, #96]	@ (8002d74 <HAL_TIM_Base_MspInit+0x94>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d10c      	bne.n	8002d30 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002d16:	4b16      	ldr	r3, [pc, #88]	@ (8002d70 <HAL_TIM_Base_MspInit+0x90>)
 8002d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d1a:	4a15      	ldr	r2, [pc, #84]	@ (8002d70 <HAL_TIM_Base_MspInit+0x90>)
 8002d1c:	f043 0308 	orr.w	r3, r3, #8
 8002d20:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d22:	4b13      	ldr	r3, [pc, #76]	@ (8002d70 <HAL_TIM_Base_MspInit+0x90>)
 8002d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	613b      	str	r3, [r7, #16]
 8002d2c:	693b      	ldr	r3, [r7, #16]
}
 8002d2e:	e018      	b.n	8002d62 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a10      	ldr	r2, [pc, #64]	@ (8002d78 <HAL_TIM_Base_MspInit+0x98>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d113      	bne.n	8002d62 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002d3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d70 <HAL_TIM_Base_MspInit+0x90>)
 8002d3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d3e:	4a0c      	ldr	r2, [pc, #48]	@ (8002d70 <HAL_TIM_Base_MspInit+0x90>)
 8002d40:	f043 0310 	orr.w	r3, r3, #16
 8002d44:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d46:	4b0a      	ldr	r3, [pc, #40]	@ (8002d70 <HAL_TIM_Base_MspInit+0x90>)
 8002d48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d4a:	f003 0310 	and.w	r3, r3, #16
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002d52:	2200      	movs	r2, #0
 8002d54:	2100      	movs	r1, #0
 8002d56:	2036      	movs	r0, #54	@ 0x36
 8002d58:	f000 fa11 	bl	800317e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002d5c:	2036      	movs	r0, #54	@ 0x36
 8002d5e:	f000 fa28 	bl	80031b2 <HAL_NVIC_EnableIRQ>
}
 8002d62:	bf00      	nop
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40000800 	.word	0x40000800
 8002d70:	40021000 	.word	0x40021000
 8002d74:	40000c00 	.word	0x40000c00
 8002d78:	40001000 	.word	0x40001000

08002d7c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b088      	sub	sp, #32
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d84:	f107 030c 	add.w	r3, r7, #12
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	605a      	str	r2, [r3, #4]
 8002d8e:	609a      	str	r2, [r3, #8]
 8002d90:	60da      	str	r2, [r3, #12]
 8002d92:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a12      	ldr	r2, [pc, #72]	@ (8002de4 <HAL_TIM_MspPostInit+0x68>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d11d      	bne.n	8002dda <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d9e:	4b12      	ldr	r3, [pc, #72]	@ (8002de8 <HAL_TIM_MspPostInit+0x6c>)
 8002da0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002da2:	4a11      	ldr	r2, [pc, #68]	@ (8002de8 <HAL_TIM_MspPostInit+0x6c>)
 8002da4:	f043 0301 	orr.w	r3, r3, #1
 8002da8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002daa:	4b0f      	ldr	r3, [pc, #60]	@ (8002de8 <HAL_TIM_MspPostInit+0x6c>)
 8002dac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	60bb      	str	r3, [r7, #8]
 8002db4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PA11     ------> TIM4_CH1
    PA12     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002db6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002dba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8002dc8:	230a      	movs	r3, #10
 8002dca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dcc:	f107 030c 	add.w	r3, r7, #12
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002dd6:	f000 fa07 	bl	80031e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002dda:	bf00      	nop
 8002ddc:	3720      	adds	r7, #32
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40000800 	.word	0x40000800
 8002de8:	40021000 	.word	0x40021000

08002dec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002df0:	bf00      	nop
 8002df2:	e7fd      	b.n	8002df0 <NMI_Handler+0x4>

08002df4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002df8:	bf00      	nop
 8002dfa:	e7fd      	b.n	8002df8 <HardFault_Handler+0x4>

08002dfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e00:	bf00      	nop
 8002e02:	e7fd      	b.n	8002e00 <MemManage_Handler+0x4>

08002e04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e08:	bf00      	nop
 8002e0a:	e7fd      	b.n	8002e08 <BusFault_Handler+0x4>

08002e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e10:	bf00      	nop
 8002e12:	e7fd      	b.n	8002e10 <UsageFault_Handler+0x4>

08002e14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e18:	bf00      	nop
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e22:	b480      	push	{r7}
 8002e24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e26:	bf00      	nop
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e34:	bf00      	nop
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e42:	f000 f8a3 	bl	8002f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e46:	bf00      	nop
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002e4e:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002e52:	f000 fb63 	bl	800351c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e56:	bf00      	nop
 8002e58:	bd80      	pop	{r7, pc}
	...

08002e5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002e60:	4802      	ldr	r0, [pc, #8]	@ (8002e6c <TIM6_DAC_IRQHandler+0x10>)
 8002e62:	f001 ff8b 	bl	8004d7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002e66:	bf00      	nop
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	20000224 	.word	0x20000224

08002e70 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002e74:	4b06      	ldr	r3, [pc, #24]	@ (8002e90 <SystemInit+0x20>)
 8002e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e7a:	4a05      	ldr	r2, [pc, #20]	@ (8002e90 <SystemInit+0x20>)
 8002e7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e84:	bf00      	nop
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	e000ed00 	.word	0xe000ed00

08002e94 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   r0, =_estack
 8002e94:	480d      	ldr	r0, [pc, #52]	@ (8002ecc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002e96:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e98:	f7ff ffea 	bl	8002e70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e9c:	480c      	ldr	r0, [pc, #48]	@ (8002ed0 <LoopForever+0x6>)
  ldr r1, =_edata
 8002e9e:	490d      	ldr	r1, [pc, #52]	@ (8002ed4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ea0:	4a0d      	ldr	r2, [pc, #52]	@ (8002ed8 <LoopForever+0xe>)
  movs r3, #0
 8002ea2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002ea4:	e002      	b.n	8002eac <LoopCopyDataInit>

08002ea6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ea6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ea8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002eaa:	3304      	adds	r3, #4

08002eac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002eac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002eae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002eb0:	d3f9      	bcc.n	8002ea6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8002edc <LoopForever+0x12>)
  ldr r4, =_ebss
 8002eb4:	4c0a      	ldr	r4, [pc, #40]	@ (8002ee0 <LoopForever+0x16>)
  movs r3, #0
 8002eb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002eb8:	e001      	b.n	8002ebe <LoopFillZerobss>

08002eba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002eba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ebc:	3204      	adds	r2, #4

08002ebe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ebe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ec0:	d3fb      	bcc.n	8002eba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ec2:	f003 feef 	bl	8006ca4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ec6:	f7fe fc3f 	bl	8001748 <main>

08002eca <LoopForever>:

LoopForever:
    b LoopForever
 8002eca:	e7fe      	b.n	8002eca <LoopForever>
Reset_Handler:  ldr   r0, =_estack
 8002ecc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ed0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ed4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8002ed8:	08006d78 	.word	0x08006d78
  ldr r2, =_sbss
 8002edc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002ee0:	20000384 	.word	0x20000384

08002ee4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ee4:	e7fe      	b.n	8002ee4 <ADC1_2_IRQHandler>

08002ee6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b082      	sub	sp, #8
 8002eea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002eec:	2300      	movs	r3, #0
 8002eee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ef0:	2003      	movs	r0, #3
 8002ef2:	f000 f939 	bl	8003168 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ef6:	2000      	movs	r0, #0
 8002ef8:	f000 f80e 	bl	8002f18 <HAL_InitTick>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d002      	beq.n	8002f08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	71fb      	strb	r3, [r7, #7]
 8002f06:	e001      	b.n	8002f0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002f08:	f7ff fe2c 	bl	8002b64 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002f0c:	79fb      	ldrb	r3, [r7, #7]

}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
	...

08002f18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002f20:	2300      	movs	r3, #0
 8002f22:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002f24:	4b16      	ldr	r3, [pc, #88]	@ (8002f80 <HAL_InitTick+0x68>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d022      	beq.n	8002f72 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002f2c:	4b15      	ldr	r3, [pc, #84]	@ (8002f84 <HAL_InitTick+0x6c>)
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	4b13      	ldr	r3, [pc, #76]	@ (8002f80 <HAL_InitTick+0x68>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8002f38:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f40:	4618      	mov	r0, r3
 8002f42:	f000 f944 	bl	80031ce <HAL_SYSTICK_Config>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10f      	bne.n	8002f6c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b0f      	cmp	r3, #15
 8002f50:	d809      	bhi.n	8002f66 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f52:	2200      	movs	r2, #0
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	f04f 30ff 	mov.w	r0, #4294967295
 8002f5a:	f000 f910 	bl	800317e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002f5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002f88 <HAL_InitTick+0x70>)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6013      	str	r3, [r2, #0]
 8002f64:	e007      	b.n	8002f76 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	73fb      	strb	r3, [r7, #15]
 8002f6a:	e004      	b.n	8002f76 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	73fb      	strb	r3, [r7, #15]
 8002f70:	e001      	b.n	8002f76 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	20000060 	.word	0x20000060
 8002f84:	20000058 	.word	0x20000058
 8002f88:	2000005c 	.word	0x2000005c

08002f8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f90:	4b05      	ldr	r3, [pc, #20]	@ (8002fa8 <HAL_IncTick+0x1c>)
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	4b05      	ldr	r3, [pc, #20]	@ (8002fac <HAL_IncTick+0x20>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4413      	add	r3, r2
 8002f9a:	4a03      	ldr	r2, [pc, #12]	@ (8002fa8 <HAL_IncTick+0x1c>)
 8002f9c:	6013      	str	r3, [r2, #0]
}
 8002f9e:	bf00      	nop
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr
 8002fa8:	20000380 	.word	0x20000380
 8002fac:	20000060 	.word	0x20000060

08002fb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  return uwTick;
 8002fb4:	4b03      	ldr	r3, [pc, #12]	@ (8002fc4 <HAL_GetTick+0x14>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	20000380 	.word	0x20000380

08002fc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f003 0307 	and.w	r3, r3, #7
 8002fd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800300c <__NVIC_SetPriorityGrouping+0x44>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ff0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ff4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ff8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ffa:	4a04      	ldr	r2, [pc, #16]	@ (800300c <__NVIC_SetPriorityGrouping+0x44>)
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	60d3      	str	r3, [r2, #12]
}
 8003000:	bf00      	nop
 8003002:	3714      	adds	r7, #20
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	e000ed00 	.word	0xe000ed00

08003010 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003014:	4b04      	ldr	r3, [pc, #16]	@ (8003028 <__NVIC_GetPriorityGrouping+0x18>)
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	0a1b      	lsrs	r3, r3, #8
 800301a:	f003 0307 	and.w	r3, r3, #7
}
 800301e:	4618      	mov	r0, r3
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	e000ed00 	.word	0xe000ed00

0800302c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	4603      	mov	r3, r0
 8003034:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303a:	2b00      	cmp	r3, #0
 800303c:	db0b      	blt.n	8003056 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800303e:	79fb      	ldrb	r3, [r7, #7]
 8003040:	f003 021f 	and.w	r2, r3, #31
 8003044:	4907      	ldr	r1, [pc, #28]	@ (8003064 <__NVIC_EnableIRQ+0x38>)
 8003046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304a:	095b      	lsrs	r3, r3, #5
 800304c:	2001      	movs	r0, #1
 800304e:	fa00 f202 	lsl.w	r2, r0, r2
 8003052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003056:	bf00      	nop
 8003058:	370c      	adds	r7, #12
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	e000e100 	.word	0xe000e100

08003068 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	4603      	mov	r3, r0
 8003070:	6039      	str	r1, [r7, #0]
 8003072:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003074:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003078:	2b00      	cmp	r3, #0
 800307a:	db0a      	blt.n	8003092 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	b2da      	uxtb	r2, r3
 8003080:	490c      	ldr	r1, [pc, #48]	@ (80030b4 <__NVIC_SetPriority+0x4c>)
 8003082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003086:	0112      	lsls	r2, r2, #4
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	440b      	add	r3, r1
 800308c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003090:	e00a      	b.n	80030a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	b2da      	uxtb	r2, r3
 8003096:	4908      	ldr	r1, [pc, #32]	@ (80030b8 <__NVIC_SetPriority+0x50>)
 8003098:	79fb      	ldrb	r3, [r7, #7]
 800309a:	f003 030f 	and.w	r3, r3, #15
 800309e:	3b04      	subs	r3, #4
 80030a0:	0112      	lsls	r2, r2, #4
 80030a2:	b2d2      	uxtb	r2, r2
 80030a4:	440b      	add	r3, r1
 80030a6:	761a      	strb	r2, [r3, #24]
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	e000e100 	.word	0xe000e100
 80030b8:	e000ed00 	.word	0xe000ed00

080030bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030bc:	b480      	push	{r7}
 80030be:	b089      	sub	sp, #36	@ 0x24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f003 0307 	and.w	r3, r3, #7
 80030ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	f1c3 0307 	rsb	r3, r3, #7
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	bf28      	it	cs
 80030da:	2304      	movcs	r3, #4
 80030dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	3304      	adds	r3, #4
 80030e2:	2b06      	cmp	r3, #6
 80030e4:	d902      	bls.n	80030ec <NVIC_EncodePriority+0x30>
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	3b03      	subs	r3, #3
 80030ea:	e000      	b.n	80030ee <NVIC_EncodePriority+0x32>
 80030ec:	2300      	movs	r3, #0
 80030ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030f0:	f04f 32ff 	mov.w	r2, #4294967295
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	fa02 f303 	lsl.w	r3, r2, r3
 80030fa:	43da      	mvns	r2, r3
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	401a      	ands	r2, r3
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003104:	f04f 31ff 	mov.w	r1, #4294967295
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	fa01 f303 	lsl.w	r3, r1, r3
 800310e:	43d9      	mvns	r1, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003114:	4313      	orrs	r3, r2
         );
}
 8003116:	4618      	mov	r0, r3
 8003118:	3724      	adds	r7, #36	@ 0x24
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
	...

08003124 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b082      	sub	sp, #8
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3b01      	subs	r3, #1
 8003130:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003134:	d301      	bcc.n	800313a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003136:	2301      	movs	r3, #1
 8003138:	e00f      	b.n	800315a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800313a:	4a0a      	ldr	r2, [pc, #40]	@ (8003164 <SysTick_Config+0x40>)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	3b01      	subs	r3, #1
 8003140:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003142:	210f      	movs	r1, #15
 8003144:	f04f 30ff 	mov.w	r0, #4294967295
 8003148:	f7ff ff8e 	bl	8003068 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800314c:	4b05      	ldr	r3, [pc, #20]	@ (8003164 <SysTick_Config+0x40>)
 800314e:	2200      	movs	r2, #0
 8003150:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003152:	4b04      	ldr	r3, [pc, #16]	@ (8003164 <SysTick_Config+0x40>)
 8003154:	2207      	movs	r2, #7
 8003156:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3708      	adds	r7, #8
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	e000e010 	.word	0xe000e010

08003168 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	f7ff ff29 	bl	8002fc8 <__NVIC_SetPriorityGrouping>
}
 8003176:	bf00      	nop
 8003178:	3708      	adds	r7, #8
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b086      	sub	sp, #24
 8003182:	af00      	add	r7, sp, #0
 8003184:	4603      	mov	r3, r0
 8003186:	60b9      	str	r1, [r7, #8]
 8003188:	607a      	str	r2, [r7, #4]
 800318a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800318c:	f7ff ff40 	bl	8003010 <__NVIC_GetPriorityGrouping>
 8003190:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	68b9      	ldr	r1, [r7, #8]
 8003196:	6978      	ldr	r0, [r7, #20]
 8003198:	f7ff ff90 	bl	80030bc <NVIC_EncodePriority>
 800319c:	4602      	mov	r2, r0
 800319e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031a2:	4611      	mov	r1, r2
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff ff5f 	bl	8003068 <__NVIC_SetPriority>
}
 80031aa:	bf00      	nop
 80031ac:	3718      	adds	r7, #24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b082      	sub	sp, #8
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	4603      	mov	r3, r0
 80031ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff ff33 	bl	800302c <__NVIC_EnableIRQ>
}
 80031c6:	bf00      	nop
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}

080031ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031ce:	b580      	push	{r7, lr}
 80031d0:	b082      	sub	sp, #8
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f7ff ffa4 	bl	8003124 <SysTick_Config>
 80031dc:	4603      	mov	r3, r0
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3708      	adds	r7, #8
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
	...

080031e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b087      	sub	sp, #28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80031f2:	2300      	movs	r3, #0
 80031f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80031f6:	e15a      	b.n	80034ae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	2101      	movs	r1, #1
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	fa01 f303 	lsl.w	r3, r1, r3
 8003204:	4013      	ands	r3, r2
 8003206:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 814c 	beq.w	80034a8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f003 0303 	and.w	r3, r3, #3
 8003218:	2b01      	cmp	r3, #1
 800321a:	d005      	beq.n	8003228 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003224:	2b02      	cmp	r3, #2
 8003226:	d130      	bne.n	800328a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	2203      	movs	r2, #3
 8003234:	fa02 f303 	lsl.w	r3, r2, r3
 8003238:	43db      	mvns	r3, r3
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	4013      	ands	r3, r2
 800323e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	68da      	ldr	r2, [r3, #12]
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	4313      	orrs	r3, r2
 8003250:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	693a      	ldr	r2, [r7, #16]
 8003256:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800325e:	2201      	movs	r2, #1
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	43db      	mvns	r3, r3
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	4013      	ands	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	091b      	lsrs	r3, r3, #4
 8003274:	f003 0201 	and.w	r2, r3, #1
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	4313      	orrs	r3, r2
 8003282:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	2b03      	cmp	r3, #3
 8003294:	d017      	beq.n	80032c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	2203      	movs	r2, #3
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	43db      	mvns	r3, r3
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	4013      	ands	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	689a      	ldr	r2, [r3, #8]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	693a      	ldr	r2, [r7, #16]
 80032bc:	4313      	orrs	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d123      	bne.n	800331a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	08da      	lsrs	r2, r3, #3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	3208      	adds	r2, #8
 80032da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	220f      	movs	r2, #15
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	43db      	mvns	r3, r3
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	4013      	ands	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	691a      	ldr	r2, [r3, #16]
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	fa02 f303 	lsl.w	r3, r2, r3
 8003306:	693a      	ldr	r2, [r7, #16]
 8003308:	4313      	orrs	r3, r2
 800330a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	08da      	lsrs	r2, r3, #3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	3208      	adds	r2, #8
 8003314:	6939      	ldr	r1, [r7, #16]
 8003316:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	2203      	movs	r2, #3
 8003326:	fa02 f303 	lsl.w	r3, r2, r3
 800332a:	43db      	mvns	r3, r3
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	4013      	ands	r3, r2
 8003330:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f003 0203 	and.w	r2, r3, #3
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	fa02 f303 	lsl.w	r3, r2, r3
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	693a      	ldr	r2, [r7, #16]
 800334c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003356:	2b00      	cmp	r3, #0
 8003358:	f000 80a6 	beq.w	80034a8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800335c:	4b5b      	ldr	r3, [pc, #364]	@ (80034cc <HAL_GPIO_Init+0x2e4>)
 800335e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003360:	4a5a      	ldr	r2, [pc, #360]	@ (80034cc <HAL_GPIO_Init+0x2e4>)
 8003362:	f043 0301 	orr.w	r3, r3, #1
 8003366:	6613      	str	r3, [r2, #96]	@ 0x60
 8003368:	4b58      	ldr	r3, [pc, #352]	@ (80034cc <HAL_GPIO_Init+0x2e4>)
 800336a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	60bb      	str	r3, [r7, #8]
 8003372:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003374:	4a56      	ldr	r2, [pc, #344]	@ (80034d0 <HAL_GPIO_Init+0x2e8>)
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	089b      	lsrs	r3, r3, #2
 800337a:	3302      	adds	r3, #2
 800337c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003380:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	f003 0303 	and.w	r3, r3, #3
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	220f      	movs	r2, #15
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	43db      	mvns	r3, r3
 8003392:	693a      	ldr	r2, [r7, #16]
 8003394:	4013      	ands	r3, r2
 8003396:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800339e:	d01f      	beq.n	80033e0 <HAL_GPIO_Init+0x1f8>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a4c      	ldr	r2, [pc, #304]	@ (80034d4 <HAL_GPIO_Init+0x2ec>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d019      	beq.n	80033dc <HAL_GPIO_Init+0x1f4>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a4b      	ldr	r2, [pc, #300]	@ (80034d8 <HAL_GPIO_Init+0x2f0>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d013      	beq.n	80033d8 <HAL_GPIO_Init+0x1f0>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a4a      	ldr	r2, [pc, #296]	@ (80034dc <HAL_GPIO_Init+0x2f4>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d00d      	beq.n	80033d4 <HAL_GPIO_Init+0x1ec>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a49      	ldr	r2, [pc, #292]	@ (80034e0 <HAL_GPIO_Init+0x2f8>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d007      	beq.n	80033d0 <HAL_GPIO_Init+0x1e8>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a48      	ldr	r2, [pc, #288]	@ (80034e4 <HAL_GPIO_Init+0x2fc>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d101      	bne.n	80033cc <HAL_GPIO_Init+0x1e4>
 80033c8:	2305      	movs	r3, #5
 80033ca:	e00a      	b.n	80033e2 <HAL_GPIO_Init+0x1fa>
 80033cc:	2306      	movs	r3, #6
 80033ce:	e008      	b.n	80033e2 <HAL_GPIO_Init+0x1fa>
 80033d0:	2304      	movs	r3, #4
 80033d2:	e006      	b.n	80033e2 <HAL_GPIO_Init+0x1fa>
 80033d4:	2303      	movs	r3, #3
 80033d6:	e004      	b.n	80033e2 <HAL_GPIO_Init+0x1fa>
 80033d8:	2302      	movs	r3, #2
 80033da:	e002      	b.n	80033e2 <HAL_GPIO_Init+0x1fa>
 80033dc:	2301      	movs	r3, #1
 80033de:	e000      	b.n	80033e2 <HAL_GPIO_Init+0x1fa>
 80033e0:	2300      	movs	r3, #0
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	f002 0203 	and.w	r2, r2, #3
 80033e8:	0092      	lsls	r2, r2, #2
 80033ea:	4093      	lsls	r3, r2
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033f2:	4937      	ldr	r1, [pc, #220]	@ (80034d0 <HAL_GPIO_Init+0x2e8>)
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	089b      	lsrs	r3, r3, #2
 80033f8:	3302      	adds	r3, #2
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003400:	4b39      	ldr	r3, [pc, #228]	@ (80034e8 <HAL_GPIO_Init+0x300>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	43db      	mvns	r3, r3
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	4013      	ands	r3, r2
 800340e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d003      	beq.n	8003424 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4313      	orrs	r3, r2
 8003422:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003424:	4a30      	ldr	r2, [pc, #192]	@ (80034e8 <HAL_GPIO_Init+0x300>)
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800342a:	4b2f      	ldr	r3, [pc, #188]	@ (80034e8 <HAL_GPIO_Init+0x300>)
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	43db      	mvns	r3, r3
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	4013      	ands	r3, r2
 8003438:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003446:	693a      	ldr	r2, [r7, #16]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	4313      	orrs	r3, r2
 800344c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800344e:	4a26      	ldr	r2, [pc, #152]	@ (80034e8 <HAL_GPIO_Init+0x300>)
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003454:	4b24      	ldr	r3, [pc, #144]	@ (80034e8 <HAL_GPIO_Init+0x300>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	43db      	mvns	r3, r3
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	4013      	ands	r3, r2
 8003462:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d003      	beq.n	8003478 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003470:	693a      	ldr	r2, [r7, #16]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	4313      	orrs	r3, r2
 8003476:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003478:	4a1b      	ldr	r2, [pc, #108]	@ (80034e8 <HAL_GPIO_Init+0x300>)
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800347e:	4b1a      	ldr	r3, [pc, #104]	@ (80034e8 <HAL_GPIO_Init+0x300>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	43db      	mvns	r3, r3
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	4013      	ands	r3, r2
 800348c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800349a:	693a      	ldr	r2, [r7, #16]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4313      	orrs	r3, r2
 80034a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80034a2:	4a11      	ldr	r2, [pc, #68]	@ (80034e8 <HAL_GPIO_Init+0x300>)
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	3301      	adds	r3, #1
 80034ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	fa22 f303 	lsr.w	r3, r2, r3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f47f ae9d 	bne.w	80031f8 <HAL_GPIO_Init+0x10>
  }
}
 80034be:	bf00      	nop
 80034c0:	bf00      	nop
 80034c2:	371c      	adds	r7, #28
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	40021000 	.word	0x40021000
 80034d0:	40010000 	.word	0x40010000
 80034d4:	48000400 	.word	0x48000400
 80034d8:	48000800 	.word	0x48000800
 80034dc:	48000c00 	.word	0x48000c00
 80034e0:	48001000 	.word	0x48001000
 80034e4:	48001400 	.word	0x48001400
 80034e8:	40010400 	.word	0x40010400

080034ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	460b      	mov	r3, r1
 80034f6:	807b      	strh	r3, [r7, #2]
 80034f8:	4613      	mov	r3, r2
 80034fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034fc:	787b      	ldrb	r3, [r7, #1]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d003      	beq.n	800350a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003502:	887a      	ldrh	r2, [r7, #2]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003508:	e002      	b.n	8003510 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800350a:	887a      	ldrh	r2, [r7, #2]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003510:	bf00      	nop
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	4603      	mov	r3, r0
 8003524:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003526:	4b08      	ldr	r3, [pc, #32]	@ (8003548 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003528:	695a      	ldr	r2, [r3, #20]
 800352a:	88fb      	ldrh	r3, [r7, #6]
 800352c:	4013      	ands	r3, r2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d006      	beq.n	8003540 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003532:	4a05      	ldr	r2, [pc, #20]	@ (8003548 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003534:	88fb      	ldrh	r3, [r7, #6]
 8003536:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003538:	88fb      	ldrh	r3, [r7, #6]
 800353a:	4618      	mov	r0, r3
 800353c:	f7ff faf8 	bl	8002b30 <HAL_GPIO_EXTI_Callback>
  }
}
 8003540:	bf00      	nop
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40010400 	.word	0x40010400

0800354c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d141      	bne.n	80035de <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800355a:	4b4b      	ldr	r3, [pc, #300]	@ (8003688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003562:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003566:	d131      	bne.n	80035cc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003568:	4b47      	ldr	r3, [pc, #284]	@ (8003688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800356a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800356e:	4a46      	ldr	r2, [pc, #280]	@ (8003688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003570:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003574:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003578:	4b43      	ldr	r3, [pc, #268]	@ (8003688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003580:	4a41      	ldr	r2, [pc, #260]	@ (8003688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003582:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003586:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003588:	4b40      	ldr	r3, [pc, #256]	@ (800368c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2232      	movs	r2, #50	@ 0x32
 800358e:	fb02 f303 	mul.w	r3, r2, r3
 8003592:	4a3f      	ldr	r2, [pc, #252]	@ (8003690 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003594:	fba2 2303 	umull	r2, r3, r2, r3
 8003598:	0c9b      	lsrs	r3, r3, #18
 800359a:	3301      	adds	r3, #1
 800359c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800359e:	e002      	b.n	80035a6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	3b01      	subs	r3, #1
 80035a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035a6:	4b38      	ldr	r3, [pc, #224]	@ (8003688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035b2:	d102      	bne.n	80035ba <HAL_PWREx_ControlVoltageScaling+0x6e>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1f2      	bne.n	80035a0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035ba:	4b33      	ldr	r3, [pc, #204]	@ (8003688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035c6:	d158      	bne.n	800367a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80035c8:	2303      	movs	r3, #3
 80035ca:	e057      	b.n	800367c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035cc:	4b2e      	ldr	r3, [pc, #184]	@ (8003688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035d2:	4a2d      	ldr	r2, [pc, #180]	@ (8003688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80035d8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80035dc:	e04d      	b.n	800367a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035e4:	d141      	bne.n	800366a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80035e6:	4b28      	ldr	r3, [pc, #160]	@ (8003688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80035ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035f2:	d131      	bne.n	8003658 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035f4:	4b24      	ldr	r3, [pc, #144]	@ (8003688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035fa:	4a23      	ldr	r2, [pc, #140]	@ (8003688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003600:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003604:	4b20      	ldr	r3, [pc, #128]	@ (8003688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800360c:	4a1e      	ldr	r2, [pc, #120]	@ (8003688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800360e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003612:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003614:	4b1d      	ldr	r3, [pc, #116]	@ (800368c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2232      	movs	r2, #50	@ 0x32
 800361a:	fb02 f303 	mul.w	r3, r2, r3
 800361e:	4a1c      	ldr	r2, [pc, #112]	@ (8003690 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003620:	fba2 2303 	umull	r2, r3, r2, r3
 8003624:	0c9b      	lsrs	r3, r3, #18
 8003626:	3301      	adds	r3, #1
 8003628:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800362a:	e002      	b.n	8003632 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	3b01      	subs	r3, #1
 8003630:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003632:	4b15      	ldr	r3, [pc, #84]	@ (8003688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800363a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800363e:	d102      	bne.n	8003646 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1f2      	bne.n	800362c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003646:	4b10      	ldr	r3, [pc, #64]	@ (8003688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800364e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003652:	d112      	bne.n	800367a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e011      	b.n	800367c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003658:	4b0b      	ldr	r3, [pc, #44]	@ (8003688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800365a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800365e:	4a0a      	ldr	r2, [pc, #40]	@ (8003688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003660:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003664:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003668:	e007      	b.n	800367a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800366a:	4b07      	ldr	r3, [pc, #28]	@ (8003688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003672:	4a05      	ldr	r2, [pc, #20]	@ (8003688 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003674:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003678:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3714      	adds	r7, #20
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr
 8003688:	40007000 	.word	0x40007000
 800368c:	20000058 	.word	0x20000058
 8003690:	431bde83 	.word	0x431bde83

08003694 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003694:	b480      	push	{r7}
 8003696:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003698:	4b05      	ldr	r3, [pc, #20]	@ (80036b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	4a04      	ldr	r2, [pc, #16]	@ (80036b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800369e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80036a2:	6093      	str	r3, [r2, #8]
}
 80036a4:	bf00      	nop
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	40007000 	.word	0x40007000

080036b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b088      	sub	sp, #32
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d101      	bne.n	80036c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e2fe      	b.n	8003cc4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d075      	beq.n	80037be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036d2:	4b97      	ldr	r3, [pc, #604]	@ (8003930 <HAL_RCC_OscConfig+0x27c>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 030c 	and.w	r3, r3, #12
 80036da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036dc:	4b94      	ldr	r3, [pc, #592]	@ (8003930 <HAL_RCC_OscConfig+0x27c>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	f003 0303 	and.w	r3, r3, #3
 80036e4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	2b0c      	cmp	r3, #12
 80036ea:	d102      	bne.n	80036f2 <HAL_RCC_OscConfig+0x3e>
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	2b03      	cmp	r3, #3
 80036f0:	d002      	beq.n	80036f8 <HAL_RCC_OscConfig+0x44>
 80036f2:	69bb      	ldr	r3, [r7, #24]
 80036f4:	2b08      	cmp	r3, #8
 80036f6:	d10b      	bne.n	8003710 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036f8:	4b8d      	ldr	r3, [pc, #564]	@ (8003930 <HAL_RCC_OscConfig+0x27c>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d05b      	beq.n	80037bc <HAL_RCC_OscConfig+0x108>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d157      	bne.n	80037bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	e2d9      	b.n	8003cc4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003718:	d106      	bne.n	8003728 <HAL_RCC_OscConfig+0x74>
 800371a:	4b85      	ldr	r3, [pc, #532]	@ (8003930 <HAL_RCC_OscConfig+0x27c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a84      	ldr	r2, [pc, #528]	@ (8003930 <HAL_RCC_OscConfig+0x27c>)
 8003720:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003724:	6013      	str	r3, [r2, #0]
 8003726:	e01d      	b.n	8003764 <HAL_RCC_OscConfig+0xb0>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003730:	d10c      	bne.n	800374c <HAL_RCC_OscConfig+0x98>
 8003732:	4b7f      	ldr	r3, [pc, #508]	@ (8003930 <HAL_RCC_OscConfig+0x27c>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a7e      	ldr	r2, [pc, #504]	@ (8003930 <HAL_RCC_OscConfig+0x27c>)
 8003738:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800373c:	6013      	str	r3, [r2, #0]
 800373e:	4b7c      	ldr	r3, [pc, #496]	@ (8003930 <HAL_RCC_OscConfig+0x27c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a7b      	ldr	r2, [pc, #492]	@ (8003930 <HAL_RCC_OscConfig+0x27c>)
 8003744:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003748:	6013      	str	r3, [r2, #0]
 800374a:	e00b      	b.n	8003764 <HAL_RCC_OscConfig+0xb0>
 800374c:	4b78      	ldr	r3, [pc, #480]	@ (8003930 <HAL_RCC_OscConfig+0x27c>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a77      	ldr	r2, [pc, #476]	@ (8003930 <HAL_RCC_OscConfig+0x27c>)
 8003752:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003756:	6013      	str	r3, [r2, #0]
 8003758:	4b75      	ldr	r3, [pc, #468]	@ (8003930 <HAL_RCC_OscConfig+0x27c>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a74      	ldr	r2, [pc, #464]	@ (8003930 <HAL_RCC_OscConfig+0x27c>)
 800375e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003762:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d013      	beq.n	8003794 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800376c:	f7ff fc20 	bl	8002fb0 <HAL_GetTick>
 8003770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003772:	e008      	b.n	8003786 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003774:	f7ff fc1c 	bl	8002fb0 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	2b64      	cmp	r3, #100	@ 0x64
 8003780:	d901      	bls.n	8003786 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003782:	2303      	movs	r3, #3
 8003784:	e29e      	b.n	8003cc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003786:	4b6a      	ldr	r3, [pc, #424]	@ (8003930 <HAL_RCC_OscConfig+0x27c>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d0f0      	beq.n	8003774 <HAL_RCC_OscConfig+0xc0>
 8003792:	e014      	b.n	80037be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003794:	f7ff fc0c 	bl	8002fb0 <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800379c:	f7ff fc08 	bl	8002fb0 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b64      	cmp	r3, #100	@ 0x64
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e28a      	b.n	8003cc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037ae:	4b60      	ldr	r3, [pc, #384]	@ (8003930 <HAL_RCC_OscConfig+0x27c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1f0      	bne.n	800379c <HAL_RCC_OscConfig+0xe8>
 80037ba:	e000      	b.n	80037be <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d075      	beq.n	80038b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037ca:	4b59      	ldr	r3, [pc, #356]	@ (8003930 <HAL_RCC_OscConfig+0x27c>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 030c 	and.w	r3, r3, #12
 80037d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037d4:	4b56      	ldr	r3, [pc, #344]	@ (8003930 <HAL_RCC_OscConfig+0x27c>)
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f003 0303 	and.w	r3, r3, #3
 80037dc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	2b0c      	cmp	r3, #12
 80037e2:	d102      	bne.n	80037ea <HAL_RCC_OscConfig+0x136>
 80037e4:	697b      	ldr	r3, [r7, #20]
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d002      	beq.n	80037f0 <HAL_RCC_OscConfig+0x13c>
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	2b04      	cmp	r3, #4
 80037ee:	d11f      	bne.n	8003830 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037f0:	4b4f      	ldr	r3, [pc, #316]	@ (8003930 <HAL_RCC_OscConfig+0x27c>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d005      	beq.n	8003808 <HAL_RCC_OscConfig+0x154>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e25d      	b.n	8003cc4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003808:	4b49      	ldr	r3, [pc, #292]	@ (8003930 <HAL_RCC_OscConfig+0x27c>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	061b      	lsls	r3, r3, #24
 8003816:	4946      	ldr	r1, [pc, #280]	@ (8003930 <HAL_RCC_OscConfig+0x27c>)
 8003818:	4313      	orrs	r3, r2
 800381a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800381c:	4b45      	ldr	r3, [pc, #276]	@ (8003934 <HAL_RCC_OscConfig+0x280>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff fb79 	bl	8002f18 <HAL_InitTick>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d043      	beq.n	80038b4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e249      	b.n	8003cc4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	68db      	ldr	r3, [r3, #12]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d023      	beq.n	8003880 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003838:	4b3d      	ldr	r3, [pc, #244]	@ (8003930 <HAL_RCC_OscConfig+0x27c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a3c      	ldr	r2, [pc, #240]	@ (8003930 <HAL_RCC_OscConfig+0x27c>)
 800383e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003842:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003844:	f7ff fbb4 	bl	8002fb0 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800384c:	f7ff fbb0 	bl	8002fb0 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e232      	b.n	8003cc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800385e:	4b34      	ldr	r3, [pc, #208]	@ (8003930 <HAL_RCC_OscConfig+0x27c>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f0      	beq.n	800384c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800386a:	4b31      	ldr	r3, [pc, #196]	@ (8003930 <HAL_RCC_OscConfig+0x27c>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	691b      	ldr	r3, [r3, #16]
 8003876:	061b      	lsls	r3, r3, #24
 8003878:	492d      	ldr	r1, [pc, #180]	@ (8003930 <HAL_RCC_OscConfig+0x27c>)
 800387a:	4313      	orrs	r3, r2
 800387c:	604b      	str	r3, [r1, #4]
 800387e:	e01a      	b.n	80038b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003880:	4b2b      	ldr	r3, [pc, #172]	@ (8003930 <HAL_RCC_OscConfig+0x27c>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a2a      	ldr	r2, [pc, #168]	@ (8003930 <HAL_RCC_OscConfig+0x27c>)
 8003886:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800388a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388c:	f7ff fb90 	bl	8002fb0 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003894:	f7ff fb8c 	bl	8002fb0 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e20e      	b.n	8003cc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038a6:	4b22      	ldr	r3, [pc, #136]	@ (8003930 <HAL_RCC_OscConfig+0x27c>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1f0      	bne.n	8003894 <HAL_RCC_OscConfig+0x1e0>
 80038b2:	e000      	b.n	80038b6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0308 	and.w	r3, r3, #8
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d041      	beq.n	8003946 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d01c      	beq.n	8003904 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038ca:	4b19      	ldr	r3, [pc, #100]	@ (8003930 <HAL_RCC_OscConfig+0x27c>)
 80038cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038d0:	4a17      	ldr	r2, [pc, #92]	@ (8003930 <HAL_RCC_OscConfig+0x27c>)
 80038d2:	f043 0301 	orr.w	r3, r3, #1
 80038d6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038da:	f7ff fb69 	bl	8002fb0 <HAL_GetTick>
 80038de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038e0:	e008      	b.n	80038f4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038e2:	f7ff fb65 	bl	8002fb0 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d901      	bls.n	80038f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e1e7      	b.n	8003cc4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003930 <HAL_RCC_OscConfig+0x27c>)
 80038f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d0ef      	beq.n	80038e2 <HAL_RCC_OscConfig+0x22e>
 8003902:	e020      	b.n	8003946 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003904:	4b0a      	ldr	r3, [pc, #40]	@ (8003930 <HAL_RCC_OscConfig+0x27c>)
 8003906:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800390a:	4a09      	ldr	r2, [pc, #36]	@ (8003930 <HAL_RCC_OscConfig+0x27c>)
 800390c:	f023 0301 	bic.w	r3, r3, #1
 8003910:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003914:	f7ff fb4c 	bl	8002fb0 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800391a:	e00d      	b.n	8003938 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800391c:	f7ff fb48 	bl	8002fb0 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d906      	bls.n	8003938 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e1ca      	b.n	8003cc4 <HAL_RCC_OscConfig+0x610>
 800392e:	bf00      	nop
 8003930:	40021000 	.word	0x40021000
 8003934:	2000005c 	.word	0x2000005c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003938:	4b8c      	ldr	r3, [pc, #560]	@ (8003b6c <HAL_RCC_OscConfig+0x4b8>)
 800393a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1ea      	bne.n	800391c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0304 	and.w	r3, r3, #4
 800394e:	2b00      	cmp	r3, #0
 8003950:	f000 80a6 	beq.w	8003aa0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003954:	2300      	movs	r3, #0
 8003956:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003958:	4b84      	ldr	r3, [pc, #528]	@ (8003b6c <HAL_RCC_OscConfig+0x4b8>)
 800395a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800395c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d101      	bne.n	8003968 <HAL_RCC_OscConfig+0x2b4>
 8003964:	2301      	movs	r3, #1
 8003966:	e000      	b.n	800396a <HAL_RCC_OscConfig+0x2b6>
 8003968:	2300      	movs	r3, #0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00d      	beq.n	800398a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800396e:	4b7f      	ldr	r3, [pc, #508]	@ (8003b6c <HAL_RCC_OscConfig+0x4b8>)
 8003970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003972:	4a7e      	ldr	r2, [pc, #504]	@ (8003b6c <HAL_RCC_OscConfig+0x4b8>)
 8003974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003978:	6593      	str	r3, [r2, #88]	@ 0x58
 800397a:	4b7c      	ldr	r3, [pc, #496]	@ (8003b6c <HAL_RCC_OscConfig+0x4b8>)
 800397c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800397e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003986:	2301      	movs	r3, #1
 8003988:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800398a:	4b79      	ldr	r3, [pc, #484]	@ (8003b70 <HAL_RCC_OscConfig+0x4bc>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003992:	2b00      	cmp	r3, #0
 8003994:	d118      	bne.n	80039c8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003996:	4b76      	ldr	r3, [pc, #472]	@ (8003b70 <HAL_RCC_OscConfig+0x4bc>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a75      	ldr	r2, [pc, #468]	@ (8003b70 <HAL_RCC_OscConfig+0x4bc>)
 800399c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80039a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039a2:	f7ff fb05 	bl	8002fb0 <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039a8:	e008      	b.n	80039bc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039aa:	f7ff fb01 	bl	8002fb0 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e183      	b.n	8003cc4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039bc:	4b6c      	ldr	r3, [pc, #432]	@ (8003b70 <HAL_RCC_OscConfig+0x4bc>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d0f0      	beq.n	80039aa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d108      	bne.n	80039e2 <HAL_RCC_OscConfig+0x32e>
 80039d0:	4b66      	ldr	r3, [pc, #408]	@ (8003b6c <HAL_RCC_OscConfig+0x4b8>)
 80039d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039d6:	4a65      	ldr	r2, [pc, #404]	@ (8003b6c <HAL_RCC_OscConfig+0x4b8>)
 80039d8:	f043 0301 	orr.w	r3, r3, #1
 80039dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039e0:	e024      	b.n	8003a2c <HAL_RCC_OscConfig+0x378>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	2b05      	cmp	r3, #5
 80039e8:	d110      	bne.n	8003a0c <HAL_RCC_OscConfig+0x358>
 80039ea:	4b60      	ldr	r3, [pc, #384]	@ (8003b6c <HAL_RCC_OscConfig+0x4b8>)
 80039ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039f0:	4a5e      	ldr	r2, [pc, #376]	@ (8003b6c <HAL_RCC_OscConfig+0x4b8>)
 80039f2:	f043 0304 	orr.w	r3, r3, #4
 80039f6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039fa:	4b5c      	ldr	r3, [pc, #368]	@ (8003b6c <HAL_RCC_OscConfig+0x4b8>)
 80039fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a00:	4a5a      	ldr	r2, [pc, #360]	@ (8003b6c <HAL_RCC_OscConfig+0x4b8>)
 8003a02:	f043 0301 	orr.w	r3, r3, #1
 8003a06:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a0a:	e00f      	b.n	8003a2c <HAL_RCC_OscConfig+0x378>
 8003a0c:	4b57      	ldr	r3, [pc, #348]	@ (8003b6c <HAL_RCC_OscConfig+0x4b8>)
 8003a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a12:	4a56      	ldr	r2, [pc, #344]	@ (8003b6c <HAL_RCC_OscConfig+0x4b8>)
 8003a14:	f023 0301 	bic.w	r3, r3, #1
 8003a18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003a1c:	4b53      	ldr	r3, [pc, #332]	@ (8003b6c <HAL_RCC_OscConfig+0x4b8>)
 8003a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a22:	4a52      	ldr	r2, [pc, #328]	@ (8003b6c <HAL_RCC_OscConfig+0x4b8>)
 8003a24:	f023 0304 	bic.w	r3, r3, #4
 8003a28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d016      	beq.n	8003a62 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a34:	f7ff fabc 	bl	8002fb0 <HAL_GetTick>
 8003a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a3a:	e00a      	b.n	8003a52 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a3c:	f7ff fab8 	bl	8002fb0 <HAL_GetTick>
 8003a40:	4602      	mov	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e138      	b.n	8003cc4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a52:	4b46      	ldr	r3, [pc, #280]	@ (8003b6c <HAL_RCC_OscConfig+0x4b8>)
 8003a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0ed      	beq.n	8003a3c <HAL_RCC_OscConfig+0x388>
 8003a60:	e015      	b.n	8003a8e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a62:	f7ff faa5 	bl	8002fb0 <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a68:	e00a      	b.n	8003a80 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a6a:	f7ff faa1 	bl	8002fb0 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e121      	b.n	8003cc4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a80:	4b3a      	ldr	r3, [pc, #232]	@ (8003b6c <HAL_RCC_OscConfig+0x4b8>)
 8003a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1ed      	bne.n	8003a6a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a8e:	7ffb      	ldrb	r3, [r7, #31]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d105      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a94:	4b35      	ldr	r3, [pc, #212]	@ (8003b6c <HAL_RCC_OscConfig+0x4b8>)
 8003a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a98:	4a34      	ldr	r2, [pc, #208]	@ (8003b6c <HAL_RCC_OscConfig+0x4b8>)
 8003a9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a9e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0320 	and.w	r3, r3, #32
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d03c      	beq.n	8003b26 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	699b      	ldr	r3, [r3, #24]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d01c      	beq.n	8003aee <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ab4:	4b2d      	ldr	r3, [pc, #180]	@ (8003b6c <HAL_RCC_OscConfig+0x4b8>)
 8003ab6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003aba:	4a2c      	ldr	r2, [pc, #176]	@ (8003b6c <HAL_RCC_OscConfig+0x4b8>)
 8003abc:	f043 0301 	orr.w	r3, r3, #1
 8003ac0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac4:	f7ff fa74 	bl	8002fb0 <HAL_GetTick>
 8003ac8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003aca:	e008      	b.n	8003ade <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003acc:	f7ff fa70 	bl	8002fb0 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d901      	bls.n	8003ade <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e0f2      	b.n	8003cc4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ade:	4b23      	ldr	r3, [pc, #140]	@ (8003b6c <HAL_RCC_OscConfig+0x4b8>)
 8003ae0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d0ef      	beq.n	8003acc <HAL_RCC_OscConfig+0x418>
 8003aec:	e01b      	b.n	8003b26 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003aee:	4b1f      	ldr	r3, [pc, #124]	@ (8003b6c <HAL_RCC_OscConfig+0x4b8>)
 8003af0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003af4:	4a1d      	ldr	r2, [pc, #116]	@ (8003b6c <HAL_RCC_OscConfig+0x4b8>)
 8003af6:	f023 0301 	bic.w	r3, r3, #1
 8003afa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afe:	f7ff fa57 	bl	8002fb0 <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b04:	e008      	b.n	8003b18 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b06:	f7ff fa53 	bl	8002fb0 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e0d5      	b.n	8003cc4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b18:	4b14      	ldr	r3, [pc, #80]	@ (8003b6c <HAL_RCC_OscConfig+0x4b8>)
 8003b1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1ef      	bne.n	8003b06 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	f000 80c9 	beq.w	8003cc2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b30:	4b0e      	ldr	r3, [pc, #56]	@ (8003b6c <HAL_RCC_OscConfig+0x4b8>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	f003 030c 	and.w	r3, r3, #12
 8003b38:	2b0c      	cmp	r3, #12
 8003b3a:	f000 8083 	beq.w	8003c44 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	69db      	ldr	r3, [r3, #28]
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d15e      	bne.n	8003c04 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b46:	4b09      	ldr	r3, [pc, #36]	@ (8003b6c <HAL_RCC_OscConfig+0x4b8>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a08      	ldr	r2, [pc, #32]	@ (8003b6c <HAL_RCC_OscConfig+0x4b8>)
 8003b4c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003b50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b52:	f7ff fa2d 	bl	8002fb0 <HAL_GetTick>
 8003b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b58:	e00c      	b.n	8003b74 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b5a:	f7ff fa29 	bl	8002fb0 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d905      	bls.n	8003b74 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e0ab      	b.n	8003cc4 <HAL_RCC_OscConfig+0x610>
 8003b6c:	40021000 	.word	0x40021000
 8003b70:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b74:	4b55      	ldr	r3, [pc, #340]	@ (8003ccc <HAL_RCC_OscConfig+0x618>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1ec      	bne.n	8003b5a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b80:	4b52      	ldr	r3, [pc, #328]	@ (8003ccc <HAL_RCC_OscConfig+0x618>)
 8003b82:	68da      	ldr	r2, [r3, #12]
 8003b84:	4b52      	ldr	r3, [pc, #328]	@ (8003cd0 <HAL_RCC_OscConfig+0x61c>)
 8003b86:	4013      	ands	r3, r2
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6a11      	ldr	r1, [r2, #32]
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b90:	3a01      	subs	r2, #1
 8003b92:	0112      	lsls	r2, r2, #4
 8003b94:	4311      	orrs	r1, r2
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003b9a:	0212      	lsls	r2, r2, #8
 8003b9c:	4311      	orrs	r1, r2
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003ba2:	0852      	lsrs	r2, r2, #1
 8003ba4:	3a01      	subs	r2, #1
 8003ba6:	0552      	lsls	r2, r2, #21
 8003ba8:	4311      	orrs	r1, r2
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003bae:	0852      	lsrs	r2, r2, #1
 8003bb0:	3a01      	subs	r2, #1
 8003bb2:	0652      	lsls	r2, r2, #25
 8003bb4:	4311      	orrs	r1, r2
 8003bb6:	687a      	ldr	r2, [r7, #4]
 8003bb8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003bba:	06d2      	lsls	r2, r2, #27
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	4943      	ldr	r1, [pc, #268]	@ (8003ccc <HAL_RCC_OscConfig+0x618>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bc4:	4b41      	ldr	r3, [pc, #260]	@ (8003ccc <HAL_RCC_OscConfig+0x618>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a40      	ldr	r2, [pc, #256]	@ (8003ccc <HAL_RCC_OscConfig+0x618>)
 8003bca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bce:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bd0:	4b3e      	ldr	r3, [pc, #248]	@ (8003ccc <HAL_RCC_OscConfig+0x618>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	4a3d      	ldr	r2, [pc, #244]	@ (8003ccc <HAL_RCC_OscConfig+0x618>)
 8003bd6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bda:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bdc:	f7ff f9e8 	bl	8002fb0 <HAL_GetTick>
 8003be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003be2:	e008      	b.n	8003bf6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003be4:	f7ff f9e4 	bl	8002fb0 <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	2b02      	cmp	r3, #2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e066      	b.n	8003cc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bf6:	4b35      	ldr	r3, [pc, #212]	@ (8003ccc <HAL_RCC_OscConfig+0x618>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d0f0      	beq.n	8003be4 <HAL_RCC_OscConfig+0x530>
 8003c02:	e05e      	b.n	8003cc2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c04:	4b31      	ldr	r3, [pc, #196]	@ (8003ccc <HAL_RCC_OscConfig+0x618>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a30      	ldr	r2, [pc, #192]	@ (8003ccc <HAL_RCC_OscConfig+0x618>)
 8003c0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c10:	f7ff f9ce 	bl	8002fb0 <HAL_GetTick>
 8003c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c16:	e008      	b.n	8003c2a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c18:	f7ff f9ca 	bl	8002fb0 <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d901      	bls.n	8003c2a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003c26:	2303      	movs	r3, #3
 8003c28:	e04c      	b.n	8003cc4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c2a:	4b28      	ldr	r3, [pc, #160]	@ (8003ccc <HAL_RCC_OscConfig+0x618>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1f0      	bne.n	8003c18 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003c36:	4b25      	ldr	r3, [pc, #148]	@ (8003ccc <HAL_RCC_OscConfig+0x618>)
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	4924      	ldr	r1, [pc, #144]	@ (8003ccc <HAL_RCC_OscConfig+0x618>)
 8003c3c:	4b25      	ldr	r3, [pc, #148]	@ (8003cd4 <HAL_RCC_OscConfig+0x620>)
 8003c3e:	4013      	ands	r3, r2
 8003c40:	60cb      	str	r3, [r1, #12]
 8003c42:	e03e      	b.n	8003cc2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	69db      	ldr	r3, [r3, #28]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d101      	bne.n	8003c50 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e039      	b.n	8003cc4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003c50:	4b1e      	ldr	r3, [pc, #120]	@ (8003ccc <HAL_RCC_OscConfig+0x618>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	f003 0203 	and.w	r2, r3, #3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d12c      	bne.n	8003cbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d123      	bne.n	8003cbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c80:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d11b      	bne.n	8003cbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c90:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d113      	bne.n	8003cbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca0:	085b      	lsrs	r3, r3, #1
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d109      	bne.n	8003cbe <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cb4:	085b      	lsrs	r3, r3, #1
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d001      	beq.n	8003cc2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e000      	b.n	8003cc4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3720      	adds	r7, #32
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	019f800c 	.word	0x019f800c
 8003cd4:	feeefffc 	.word	0xfeeefffc

08003cd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b086      	sub	sp, #24
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d101      	bne.n	8003cf0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e11e      	b.n	8003f2e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cf0:	4b91      	ldr	r3, [pc, #580]	@ (8003f38 <HAL_RCC_ClockConfig+0x260>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 030f 	and.w	r3, r3, #15
 8003cf8:	683a      	ldr	r2, [r7, #0]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d910      	bls.n	8003d20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cfe:	4b8e      	ldr	r3, [pc, #568]	@ (8003f38 <HAL_RCC_ClockConfig+0x260>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f023 020f 	bic.w	r2, r3, #15
 8003d06:	498c      	ldr	r1, [pc, #560]	@ (8003f38 <HAL_RCC_ClockConfig+0x260>)
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d0e:	4b8a      	ldr	r3, [pc, #552]	@ (8003f38 <HAL_RCC_ClockConfig+0x260>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 030f 	and.w	r3, r3, #15
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d001      	beq.n	8003d20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e106      	b.n	8003f2e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d073      	beq.n	8003e14 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2b03      	cmp	r3, #3
 8003d32:	d129      	bne.n	8003d88 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d34:	4b81      	ldr	r3, [pc, #516]	@ (8003f3c <HAL_RCC_ClockConfig+0x264>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e0f4      	b.n	8003f2e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003d44:	f000 f99e 	bl	8004084 <RCC_GetSysClockFreqFromPLLSource>
 8003d48:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	4a7c      	ldr	r2, [pc, #496]	@ (8003f40 <HAL_RCC_ClockConfig+0x268>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d93f      	bls.n	8003dd2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003d52:	4b7a      	ldr	r3, [pc, #488]	@ (8003f3c <HAL_RCC_ClockConfig+0x264>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d009      	beq.n	8003d72 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d033      	beq.n	8003dd2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d12f      	bne.n	8003dd2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d72:	4b72      	ldr	r3, [pc, #456]	@ (8003f3c <HAL_RCC_ClockConfig+0x264>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d7a:	4a70      	ldr	r2, [pc, #448]	@ (8003f3c <HAL_RCC_ClockConfig+0x264>)
 8003d7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d80:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003d82:	2380      	movs	r3, #128	@ 0x80
 8003d84:	617b      	str	r3, [r7, #20]
 8003d86:	e024      	b.n	8003dd2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d107      	bne.n	8003da0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d90:	4b6a      	ldr	r3, [pc, #424]	@ (8003f3c <HAL_RCC_ClockConfig+0x264>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d109      	bne.n	8003db0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	e0c6      	b.n	8003f2e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003da0:	4b66      	ldr	r3, [pc, #408]	@ (8003f3c <HAL_RCC_ClockConfig+0x264>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d101      	bne.n	8003db0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e0be      	b.n	8003f2e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003db0:	f000 f8ce 	bl	8003f50 <HAL_RCC_GetSysClockFreq>
 8003db4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	4a61      	ldr	r2, [pc, #388]	@ (8003f40 <HAL_RCC_ClockConfig+0x268>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d909      	bls.n	8003dd2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003dbe:	4b5f      	ldr	r3, [pc, #380]	@ (8003f3c <HAL_RCC_ClockConfig+0x264>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003dc6:	4a5d      	ldr	r2, [pc, #372]	@ (8003f3c <HAL_RCC_ClockConfig+0x264>)
 8003dc8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dcc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003dce:	2380      	movs	r3, #128	@ 0x80
 8003dd0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003dd2:	4b5a      	ldr	r3, [pc, #360]	@ (8003f3c <HAL_RCC_ClockConfig+0x264>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f023 0203 	bic.w	r2, r3, #3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	4957      	ldr	r1, [pc, #348]	@ (8003f3c <HAL_RCC_ClockConfig+0x264>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003de4:	f7ff f8e4 	bl	8002fb0 <HAL_GetTick>
 8003de8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dea:	e00a      	b.n	8003e02 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dec:	f7ff f8e0 	bl	8002fb0 <HAL_GetTick>
 8003df0:	4602      	mov	r2, r0
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d901      	bls.n	8003e02 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	e095      	b.n	8003f2e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e02:	4b4e      	ldr	r3, [pc, #312]	@ (8003f3c <HAL_RCC_ClockConfig+0x264>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f003 020c 	and.w	r2, r3, #12
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d1eb      	bne.n	8003dec <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d023      	beq.n	8003e68 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d005      	beq.n	8003e38 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e2c:	4b43      	ldr	r3, [pc, #268]	@ (8003f3c <HAL_RCC_ClockConfig+0x264>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	4a42      	ldr	r2, [pc, #264]	@ (8003f3c <HAL_RCC_ClockConfig+0x264>)
 8003e32:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003e36:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 0308 	and.w	r3, r3, #8
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d007      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003e44:	4b3d      	ldr	r3, [pc, #244]	@ (8003f3c <HAL_RCC_ClockConfig+0x264>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003e4c:	4a3b      	ldr	r2, [pc, #236]	@ (8003f3c <HAL_RCC_ClockConfig+0x264>)
 8003e4e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003e52:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e54:	4b39      	ldr	r3, [pc, #228]	@ (8003f3c <HAL_RCC_ClockConfig+0x264>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	4936      	ldr	r1, [pc, #216]	@ (8003f3c <HAL_RCC_ClockConfig+0x264>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	608b      	str	r3, [r1, #8]
 8003e66:	e008      	b.n	8003e7a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	2b80      	cmp	r3, #128	@ 0x80
 8003e6c:	d105      	bne.n	8003e7a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003e6e:	4b33      	ldr	r3, [pc, #204]	@ (8003f3c <HAL_RCC_ClockConfig+0x264>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	4a32      	ldr	r2, [pc, #200]	@ (8003f3c <HAL_RCC_ClockConfig+0x264>)
 8003e74:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e78:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e7a:	4b2f      	ldr	r3, [pc, #188]	@ (8003f38 <HAL_RCC_ClockConfig+0x260>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 030f 	and.w	r3, r3, #15
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d21d      	bcs.n	8003ec4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e88:	4b2b      	ldr	r3, [pc, #172]	@ (8003f38 <HAL_RCC_ClockConfig+0x260>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f023 020f 	bic.w	r2, r3, #15
 8003e90:	4929      	ldr	r1, [pc, #164]	@ (8003f38 <HAL_RCC_ClockConfig+0x260>)
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003e98:	f7ff f88a 	bl	8002fb0 <HAL_GetTick>
 8003e9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e9e:	e00a      	b.n	8003eb6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ea0:	f7ff f886 	bl	8002fb0 <HAL_GetTick>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d901      	bls.n	8003eb6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e03b      	b.n	8003f2e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eb6:	4b20      	ldr	r3, [pc, #128]	@ (8003f38 <HAL_RCC_ClockConfig+0x260>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 030f 	and.w	r3, r3, #15
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d1ed      	bne.n	8003ea0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f003 0304 	and.w	r3, r3, #4
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d008      	beq.n	8003ee2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ed0:	4b1a      	ldr	r3, [pc, #104]	@ (8003f3c <HAL_RCC_ClockConfig+0x264>)
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	4917      	ldr	r1, [pc, #92]	@ (8003f3c <HAL_RCC_ClockConfig+0x264>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0308 	and.w	r3, r3, #8
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d009      	beq.n	8003f02 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003eee:	4b13      	ldr	r3, [pc, #76]	@ (8003f3c <HAL_RCC_ClockConfig+0x264>)
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	00db      	lsls	r3, r3, #3
 8003efc:	490f      	ldr	r1, [pc, #60]	@ (8003f3c <HAL_RCC_ClockConfig+0x264>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f02:	f000 f825 	bl	8003f50 <HAL_RCC_GetSysClockFreq>
 8003f06:	4602      	mov	r2, r0
 8003f08:	4b0c      	ldr	r3, [pc, #48]	@ (8003f3c <HAL_RCC_ClockConfig+0x264>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	091b      	lsrs	r3, r3, #4
 8003f0e:	f003 030f 	and.w	r3, r3, #15
 8003f12:	490c      	ldr	r1, [pc, #48]	@ (8003f44 <HAL_RCC_ClockConfig+0x26c>)
 8003f14:	5ccb      	ldrb	r3, [r1, r3]
 8003f16:	f003 031f 	and.w	r3, r3, #31
 8003f1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003f1e:	4a0a      	ldr	r2, [pc, #40]	@ (8003f48 <HAL_RCC_ClockConfig+0x270>)
 8003f20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003f22:	4b0a      	ldr	r3, [pc, #40]	@ (8003f4c <HAL_RCC_ClockConfig+0x274>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7fe fff6 	bl	8002f18 <HAL_InitTick>
 8003f2c:	4603      	mov	r3, r0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3718      	adds	r7, #24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	40022000 	.word	0x40022000
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	04c4b400 	.word	0x04c4b400
 8003f44:	08006d28 	.word	0x08006d28
 8003f48:	20000058 	.word	0x20000058
 8003f4c:	2000005c 	.word	0x2000005c

08003f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003f56:	4b2c      	ldr	r3, [pc, #176]	@ (8004008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 030c 	and.w	r3, r3, #12
 8003f5e:	2b04      	cmp	r3, #4
 8003f60:	d102      	bne.n	8003f68 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f62:	4b2a      	ldr	r3, [pc, #168]	@ (800400c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f64:	613b      	str	r3, [r7, #16]
 8003f66:	e047      	b.n	8003ff8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003f68:	4b27      	ldr	r3, [pc, #156]	@ (8004008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	f003 030c 	and.w	r3, r3, #12
 8003f70:	2b08      	cmp	r3, #8
 8003f72:	d102      	bne.n	8003f7a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f74:	4b26      	ldr	r3, [pc, #152]	@ (8004010 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f76:	613b      	str	r3, [r7, #16]
 8003f78:	e03e      	b.n	8003ff8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003f7a:	4b23      	ldr	r3, [pc, #140]	@ (8004008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 030c 	and.w	r3, r3, #12
 8003f82:	2b0c      	cmp	r3, #12
 8003f84:	d136      	bne.n	8003ff4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f86:	4b20      	ldr	r3, [pc, #128]	@ (8004008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	f003 0303 	and.w	r3, r3, #3
 8003f8e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f90:	4b1d      	ldr	r3, [pc, #116]	@ (8004008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	091b      	lsrs	r3, r3, #4
 8003f96:	f003 030f 	and.w	r3, r3, #15
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2b03      	cmp	r3, #3
 8003fa2:	d10c      	bne.n	8003fbe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003fa4:	4a1a      	ldr	r2, [pc, #104]	@ (8004010 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fac:	4a16      	ldr	r2, [pc, #88]	@ (8004008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fae:	68d2      	ldr	r2, [r2, #12]
 8003fb0:	0a12      	lsrs	r2, r2, #8
 8003fb2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003fb6:	fb02 f303 	mul.w	r3, r2, r3
 8003fba:	617b      	str	r3, [r7, #20]
      break;
 8003fbc:	e00c      	b.n	8003fd8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003fbe:	4a13      	ldr	r2, [pc, #76]	@ (800400c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fc6:	4a10      	ldr	r2, [pc, #64]	@ (8004008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fc8:	68d2      	ldr	r2, [r2, #12]
 8003fca:	0a12      	lsrs	r2, r2, #8
 8003fcc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003fd0:	fb02 f303 	mul.w	r3, r2, r3
 8003fd4:	617b      	str	r3, [r7, #20]
      break;
 8003fd6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8004008 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	0e5b      	lsrs	r3, r3, #25
 8003fde:	f003 0303 	and.w	r3, r3, #3
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003fe8:	697a      	ldr	r2, [r7, #20]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ff0:	613b      	str	r3, [r7, #16]
 8003ff2:	e001      	b.n	8003ff8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003ff8:	693b      	ldr	r3, [r7, #16]
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	371c      	adds	r7, #28
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	40021000 	.word	0x40021000
 800400c:	00f42400 	.word	0x00f42400
 8004010:	016e3600 	.word	0x016e3600

08004014 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004014:	b480      	push	{r7}
 8004016:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004018:	4b03      	ldr	r3, [pc, #12]	@ (8004028 <HAL_RCC_GetHCLKFreq+0x14>)
 800401a:	681b      	ldr	r3, [r3, #0]
}
 800401c:	4618      	mov	r0, r3
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	20000058 	.word	0x20000058

0800402c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004030:	f7ff fff0 	bl	8004014 <HAL_RCC_GetHCLKFreq>
 8004034:	4602      	mov	r2, r0
 8004036:	4b06      	ldr	r3, [pc, #24]	@ (8004050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	0a1b      	lsrs	r3, r3, #8
 800403c:	f003 0307 	and.w	r3, r3, #7
 8004040:	4904      	ldr	r1, [pc, #16]	@ (8004054 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004042:	5ccb      	ldrb	r3, [r1, r3]
 8004044:	f003 031f 	and.w	r3, r3, #31
 8004048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800404c:	4618      	mov	r0, r3
 800404e:	bd80      	pop	{r7, pc}
 8004050:	40021000 	.word	0x40021000
 8004054:	08006d38 	.word	0x08006d38

08004058 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800405c:	f7ff ffda 	bl	8004014 <HAL_RCC_GetHCLKFreq>
 8004060:	4602      	mov	r2, r0
 8004062:	4b06      	ldr	r3, [pc, #24]	@ (800407c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	0adb      	lsrs	r3, r3, #11
 8004068:	f003 0307 	and.w	r3, r3, #7
 800406c:	4904      	ldr	r1, [pc, #16]	@ (8004080 <HAL_RCC_GetPCLK2Freq+0x28>)
 800406e:	5ccb      	ldrb	r3, [r1, r3]
 8004070:	f003 031f 	and.w	r3, r3, #31
 8004074:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004078:	4618      	mov	r0, r3
 800407a:	bd80      	pop	{r7, pc}
 800407c:	40021000 	.word	0x40021000
 8004080:	08006d38 	.word	0x08006d38

08004084 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004084:	b480      	push	{r7}
 8004086:	b087      	sub	sp, #28
 8004088:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800408a:	4b1e      	ldr	r3, [pc, #120]	@ (8004104 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	f003 0303 	and.w	r3, r3, #3
 8004092:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004094:	4b1b      	ldr	r3, [pc, #108]	@ (8004104 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	091b      	lsrs	r3, r3, #4
 800409a:	f003 030f 	and.w	r3, r3, #15
 800409e:	3301      	adds	r3, #1
 80040a0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	2b03      	cmp	r3, #3
 80040a6:	d10c      	bne.n	80040c2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040a8:	4a17      	ldr	r2, [pc, #92]	@ (8004108 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b0:	4a14      	ldr	r2, [pc, #80]	@ (8004104 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040b2:	68d2      	ldr	r2, [r2, #12]
 80040b4:	0a12      	lsrs	r2, r2, #8
 80040b6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80040ba:	fb02 f303 	mul.w	r3, r2, r3
 80040be:	617b      	str	r3, [r7, #20]
    break;
 80040c0:	e00c      	b.n	80040dc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040c2:	4a12      	ldr	r2, [pc, #72]	@ (800410c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ca:	4a0e      	ldr	r2, [pc, #56]	@ (8004104 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040cc:	68d2      	ldr	r2, [r2, #12]
 80040ce:	0a12      	lsrs	r2, r2, #8
 80040d0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80040d4:	fb02 f303 	mul.w	r3, r2, r3
 80040d8:	617b      	str	r3, [r7, #20]
    break;
 80040da:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040dc:	4b09      	ldr	r3, [pc, #36]	@ (8004104 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	0e5b      	lsrs	r3, r3, #25
 80040e2:	f003 0303 	and.w	r3, r3, #3
 80040e6:	3301      	adds	r3, #1
 80040e8:	005b      	lsls	r3, r3, #1
 80040ea:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80040f6:	687b      	ldr	r3, [r7, #4]
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	371c      	adds	r7, #28
 80040fc:	46bd      	mov	sp, r7
 80040fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004102:	4770      	bx	lr
 8004104:	40021000 	.word	0x40021000
 8004108:	016e3600 	.word	0x016e3600
 800410c:	00f42400 	.word	0x00f42400

08004110 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004118:	2300      	movs	r3, #0
 800411a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800411c:	2300      	movs	r3, #0
 800411e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004128:	2b00      	cmp	r3, #0
 800412a:	f000 8098 	beq.w	800425e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800412e:	2300      	movs	r3, #0
 8004130:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004132:	4b43      	ldr	r3, [pc, #268]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10d      	bne.n	800415a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800413e:	4b40      	ldr	r3, [pc, #256]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004142:	4a3f      	ldr	r2, [pc, #252]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004144:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004148:	6593      	str	r3, [r2, #88]	@ 0x58
 800414a:	4b3d      	ldr	r3, [pc, #244]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800414c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800414e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004152:	60bb      	str	r3, [r7, #8]
 8004154:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004156:	2301      	movs	r3, #1
 8004158:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800415a:	4b3a      	ldr	r3, [pc, #232]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a39      	ldr	r2, [pc, #228]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004160:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004164:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004166:	f7fe ff23 	bl	8002fb0 <HAL_GetTick>
 800416a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800416c:	e009      	b.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800416e:	f7fe ff1f 	bl	8002fb0 <HAL_GetTick>
 8004172:	4602      	mov	r2, r0
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	1ad3      	subs	r3, r2, r3
 8004178:	2b02      	cmp	r3, #2
 800417a:	d902      	bls.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800417c:	2303      	movs	r3, #3
 800417e:	74fb      	strb	r3, [r7, #19]
        break;
 8004180:	e005      	b.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004182:	4b30      	ldr	r3, [pc, #192]	@ (8004244 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800418a:	2b00      	cmp	r3, #0
 800418c:	d0ef      	beq.n	800416e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800418e:	7cfb      	ldrb	r3, [r7, #19]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d159      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004194:	4b2a      	ldr	r3, [pc, #168]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004196:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800419a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800419e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d01e      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d019      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041b0:	4b23      	ldr	r3, [pc, #140]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041ba:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041bc:	4b20      	ldr	r3, [pc, #128]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041c2:	4a1f      	ldr	r2, [pc, #124]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041c8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041cc:	4b1c      	ldr	r3, [pc, #112]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041d2:	4a1b      	ldr	r2, [pc, #108]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80041dc:	4a18      	ldr	r2, [pc, #96]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d016      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ee:	f7fe fedf 	bl	8002fb0 <HAL_GetTick>
 80041f2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041f4:	e00b      	b.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041f6:	f7fe fedb 	bl	8002fb0 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004204:	4293      	cmp	r3, r2
 8004206:	d902      	bls.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	74fb      	strb	r3, [r7, #19]
            break;
 800420c:	e006      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800420e:	4b0c      	ldr	r3, [pc, #48]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0ec      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800421c:	7cfb      	ldrb	r3, [r7, #19]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d10b      	bne.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004222:	4b07      	ldr	r3, [pc, #28]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004224:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004228:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004230:	4903      	ldr	r1, [pc, #12]	@ (8004240 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004232:	4313      	orrs	r3, r2
 8004234:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004238:	e008      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800423a:	7cfb      	ldrb	r3, [r7, #19]
 800423c:	74bb      	strb	r3, [r7, #18]
 800423e:	e005      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004240:	40021000 	.word	0x40021000
 8004244:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004248:	7cfb      	ldrb	r3, [r7, #19]
 800424a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800424c:	7c7b      	ldrb	r3, [r7, #17]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d105      	bne.n	800425e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004252:	4ba7      	ldr	r3, [pc, #668]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004256:	4aa6      	ldr	r2, [pc, #664]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004258:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800425c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800426a:	4ba1      	ldr	r3, [pc, #644]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800426c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004270:	f023 0203 	bic.w	r2, r3, #3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	499d      	ldr	r1, [pc, #628]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800427a:	4313      	orrs	r3, r2
 800427c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00a      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800428c:	4b98      	ldr	r3, [pc, #608]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800428e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004292:	f023 020c 	bic.w	r2, r3, #12
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	4995      	ldr	r1, [pc, #596]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800429c:	4313      	orrs	r3, r2
 800429e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0304 	and.w	r3, r3, #4
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00a      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042ae:	4b90      	ldr	r3, [pc, #576]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	498c      	ldr	r1, [pc, #560]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0308 	and.w	r3, r3, #8
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00a      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042d0:	4b87      	ldr	r3, [pc, #540]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042d6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	4984      	ldr	r1, [pc, #528]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0310 	and.w	r3, r3, #16
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00a      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042f2:	4b7f      	ldr	r3, [pc, #508]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	497b      	ldr	r1, [pc, #492]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004302:	4313      	orrs	r3, r2
 8004304:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0320 	and.w	r3, r3, #32
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00a      	beq.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004314:	4b76      	ldr	r3, [pc, #472]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800431a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	4973      	ldr	r1, [pc, #460]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004324:	4313      	orrs	r3, r2
 8004326:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004332:	2b00      	cmp	r3, #0
 8004334:	d00a      	beq.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004336:	4b6e      	ldr	r3, [pc, #440]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004338:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800433c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	69db      	ldr	r3, [r3, #28]
 8004344:	496a      	ldr	r1, [pc, #424]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004346:	4313      	orrs	r3, r2
 8004348:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00a      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004358:	4b65      	ldr	r3, [pc, #404]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800435a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800435e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	4962      	ldr	r1, [pc, #392]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004368:	4313      	orrs	r3, r2
 800436a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00a      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800437a:	4b5d      	ldr	r3, [pc, #372]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800437c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004380:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004388:	4959      	ldr	r1, [pc, #356]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800438a:	4313      	orrs	r3, r2
 800438c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00a      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800439c:	4b54      	ldr	r3, [pc, #336]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800439e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043a2:	f023 0203 	bic.w	r2, r3, #3
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043aa:	4951      	ldr	r1, [pc, #324]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00a      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043be:	4b4c      	ldr	r3, [pc, #304]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043c4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043cc:	4948      	ldr	r1, [pc, #288]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d015      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043e0:	4b43      	ldr	r3, [pc, #268]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043e6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043ee:	4940      	ldr	r1, [pc, #256]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043fe:	d105      	bne.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004400:	4b3b      	ldr	r3, [pc, #236]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	4a3a      	ldr	r2, [pc, #232]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004406:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800440a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004414:	2b00      	cmp	r3, #0
 8004416:	d015      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004418:	4b35      	ldr	r3, [pc, #212]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800441a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800441e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004426:	4932      	ldr	r1, [pc, #200]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004428:	4313      	orrs	r3, r2
 800442a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004432:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004436:	d105      	bne.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004438:	4b2d      	ldr	r3, [pc, #180]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	4a2c      	ldr	r2, [pc, #176]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800443e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004442:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800444c:	2b00      	cmp	r3, #0
 800444e:	d015      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004450:	4b27      	ldr	r3, [pc, #156]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004452:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004456:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800445e:	4924      	ldr	r1, [pc, #144]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004460:	4313      	orrs	r3, r2
 8004462:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800446a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800446e:	d105      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004470:	4b1f      	ldr	r3, [pc, #124]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	4a1e      	ldr	r2, [pc, #120]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004476:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800447a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d015      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004488:	4b19      	ldr	r3, [pc, #100]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800448a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800448e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004496:	4916      	ldr	r1, [pc, #88]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004498:	4313      	orrs	r3, r2
 800449a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044a6:	d105      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044a8:	4b11      	ldr	r3, [pc, #68]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	4a10      	ldr	r2, [pc, #64]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044b2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d019      	beq.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044c0:	4b0b      	ldr	r3, [pc, #44]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ce:	4908      	ldr	r1, [pc, #32]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044de:	d109      	bne.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044e0:	4b03      	ldr	r3, [pc, #12]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	4a02      	ldr	r2, [pc, #8]	@ (80044f0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044ea:	60d3      	str	r3, [r2, #12]
 80044ec:	e002      	b.n	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80044ee:	bf00      	nop
 80044f0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d015      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004500:	4b29      	ldr	r3, [pc, #164]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004506:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800450e:	4926      	ldr	r1, [pc, #152]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004510:	4313      	orrs	r3, r2
 8004512:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800451a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800451e:	d105      	bne.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004520:	4b21      	ldr	r3, [pc, #132]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	4a20      	ldr	r2, [pc, #128]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004526:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800452a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d015      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004538:	4b1b      	ldr	r3, [pc, #108]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800453a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800453e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004546:	4918      	ldr	r1, [pc, #96]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004548:	4313      	orrs	r3, r2
 800454a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004552:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004556:	d105      	bne.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004558:	4b13      	ldr	r3, [pc, #76]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	4a12      	ldr	r2, [pc, #72]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800455e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004562:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d015      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004570:	4b0d      	ldr	r3, [pc, #52]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004572:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004576:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800457e:	490a      	ldr	r1, [pc, #40]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004580:	4313      	orrs	r3, r2
 8004582:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800458a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800458e:	d105      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004590:	4b05      	ldr	r3, [pc, #20]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	4a04      	ldr	r2, [pc, #16]	@ (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004596:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800459a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800459c:	7cbb      	ldrb	r3, [r7, #18]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3718      	adds	r7, #24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	40021000 	.word	0x40021000

080045ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b082      	sub	sp, #8
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e049      	b.n	8004652 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d106      	bne.n	80045d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f7fe fb84 	bl	8002ce0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2202      	movs	r2, #2
 80045dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	3304      	adds	r3, #4
 80045e8:	4619      	mov	r1, r3
 80045ea:	4610      	mov	r0, r2
 80045ec:	f000 ff68 	bl	80054c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3708      	adds	r7, #8
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
	...

0800465c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800466a:	b2db      	uxtb	r3, r3
 800466c:	2b01      	cmp	r3, #1
 800466e:	d001      	beq.n	8004674 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e04c      	b.n	800470e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a26      	ldr	r2, [pc, #152]	@ (800471c <HAL_TIM_Base_Start+0xc0>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d022      	beq.n	80046cc <HAL_TIM_Base_Start+0x70>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800468e:	d01d      	beq.n	80046cc <HAL_TIM_Base_Start+0x70>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a22      	ldr	r2, [pc, #136]	@ (8004720 <HAL_TIM_Base_Start+0xc4>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d018      	beq.n	80046cc <HAL_TIM_Base_Start+0x70>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a21      	ldr	r2, [pc, #132]	@ (8004724 <HAL_TIM_Base_Start+0xc8>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d013      	beq.n	80046cc <HAL_TIM_Base_Start+0x70>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a1f      	ldr	r2, [pc, #124]	@ (8004728 <HAL_TIM_Base_Start+0xcc>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d00e      	beq.n	80046cc <HAL_TIM_Base_Start+0x70>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a1e      	ldr	r2, [pc, #120]	@ (800472c <HAL_TIM_Base_Start+0xd0>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d009      	beq.n	80046cc <HAL_TIM_Base_Start+0x70>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a1c      	ldr	r2, [pc, #112]	@ (8004730 <HAL_TIM_Base_Start+0xd4>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d004      	beq.n	80046cc <HAL_TIM_Base_Start+0x70>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a1b      	ldr	r2, [pc, #108]	@ (8004734 <HAL_TIM_Base_Start+0xd8>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d115      	bne.n	80046f8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689a      	ldr	r2, [r3, #8]
 80046d2:	4b19      	ldr	r3, [pc, #100]	@ (8004738 <HAL_TIM_Base_Start+0xdc>)
 80046d4:	4013      	ands	r3, r2
 80046d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2b06      	cmp	r3, #6
 80046dc:	d015      	beq.n	800470a <HAL_TIM_Base_Start+0xae>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046e4:	d011      	beq.n	800470a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f042 0201 	orr.w	r2, r2, #1
 80046f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046f6:	e008      	b.n	800470a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0201 	orr.w	r2, r2, #1
 8004706:	601a      	str	r2, [r3, #0]
 8004708:	e000      	b.n	800470c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800470a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3714      	adds	r7, #20
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	40012c00 	.word	0x40012c00
 8004720:	40000400 	.word	0x40000400
 8004724:	40000800 	.word	0x40000800
 8004728:	40000c00 	.word	0x40000c00
 800472c:	40013400 	.word	0x40013400
 8004730:	40014000 	.word	0x40014000
 8004734:	40015000 	.word	0x40015000
 8004738:	00010007 	.word	0x00010007

0800473c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b01      	cmp	r3, #1
 800474e:	d001      	beq.n	8004754 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e054      	b.n	80047fe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f042 0201 	orr.w	r2, r2, #1
 800476a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a26      	ldr	r2, [pc, #152]	@ (800480c <HAL_TIM_Base_Start_IT+0xd0>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d022      	beq.n	80047bc <HAL_TIM_Base_Start_IT+0x80>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800477e:	d01d      	beq.n	80047bc <HAL_TIM_Base_Start_IT+0x80>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a22      	ldr	r2, [pc, #136]	@ (8004810 <HAL_TIM_Base_Start_IT+0xd4>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d018      	beq.n	80047bc <HAL_TIM_Base_Start_IT+0x80>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a21      	ldr	r2, [pc, #132]	@ (8004814 <HAL_TIM_Base_Start_IT+0xd8>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d013      	beq.n	80047bc <HAL_TIM_Base_Start_IT+0x80>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a1f      	ldr	r2, [pc, #124]	@ (8004818 <HAL_TIM_Base_Start_IT+0xdc>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d00e      	beq.n	80047bc <HAL_TIM_Base_Start_IT+0x80>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a1e      	ldr	r2, [pc, #120]	@ (800481c <HAL_TIM_Base_Start_IT+0xe0>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d009      	beq.n	80047bc <HAL_TIM_Base_Start_IT+0x80>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a1c      	ldr	r2, [pc, #112]	@ (8004820 <HAL_TIM_Base_Start_IT+0xe4>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d004      	beq.n	80047bc <HAL_TIM_Base_Start_IT+0x80>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a1b      	ldr	r2, [pc, #108]	@ (8004824 <HAL_TIM_Base_Start_IT+0xe8>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d115      	bne.n	80047e8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689a      	ldr	r2, [r3, #8]
 80047c2:	4b19      	ldr	r3, [pc, #100]	@ (8004828 <HAL_TIM_Base_Start_IT+0xec>)
 80047c4:	4013      	ands	r3, r2
 80047c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2b06      	cmp	r3, #6
 80047cc:	d015      	beq.n	80047fa <HAL_TIM_Base_Start_IT+0xbe>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047d4:	d011      	beq.n	80047fa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f042 0201 	orr.w	r2, r2, #1
 80047e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047e6:	e008      	b.n	80047fa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0201 	orr.w	r2, r2, #1
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	e000      	b.n	80047fc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	40012c00 	.word	0x40012c00
 8004810:	40000400 	.word	0x40000400
 8004814:	40000800 	.word	0x40000800
 8004818:	40000c00 	.word	0x40000c00
 800481c:	40013400 	.word	0x40013400
 8004820:	40014000 	.word	0x40014000
 8004824:	40015000 	.word	0x40015000
 8004828:	00010007 	.word	0x00010007

0800482c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e049      	b.n	80048d2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d106      	bne.n	8004858 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2200      	movs	r2, #0
 800484e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f000 f841 	bl	80048da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2202      	movs	r2, #2
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	3304      	adds	r3, #4
 8004868:	4619      	mov	r1, r3
 800486a:	4610      	mov	r0, r2
 800486c:	f000 fe28 	bl	80054c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3708      	adds	r7, #8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80048e2:	bf00      	nop
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
	...

080048f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d109      	bne.n	8004914 <HAL_TIM_PWM_Start+0x24>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b01      	cmp	r3, #1
 800490a:	bf14      	ite	ne
 800490c:	2301      	movne	r3, #1
 800490e:	2300      	moveq	r3, #0
 8004910:	b2db      	uxtb	r3, r3
 8004912:	e03c      	b.n	800498e <HAL_TIM_PWM_Start+0x9e>
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	2b04      	cmp	r3, #4
 8004918:	d109      	bne.n	800492e <HAL_TIM_PWM_Start+0x3e>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b01      	cmp	r3, #1
 8004924:	bf14      	ite	ne
 8004926:	2301      	movne	r3, #1
 8004928:	2300      	moveq	r3, #0
 800492a:	b2db      	uxtb	r3, r3
 800492c:	e02f      	b.n	800498e <HAL_TIM_PWM_Start+0x9e>
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	2b08      	cmp	r3, #8
 8004932:	d109      	bne.n	8004948 <HAL_TIM_PWM_Start+0x58>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b01      	cmp	r3, #1
 800493e:	bf14      	ite	ne
 8004940:	2301      	movne	r3, #1
 8004942:	2300      	moveq	r3, #0
 8004944:	b2db      	uxtb	r3, r3
 8004946:	e022      	b.n	800498e <HAL_TIM_PWM_Start+0x9e>
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	2b0c      	cmp	r3, #12
 800494c:	d109      	bne.n	8004962 <HAL_TIM_PWM_Start+0x72>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004954:	b2db      	uxtb	r3, r3
 8004956:	2b01      	cmp	r3, #1
 8004958:	bf14      	ite	ne
 800495a:	2301      	movne	r3, #1
 800495c:	2300      	moveq	r3, #0
 800495e:	b2db      	uxtb	r3, r3
 8004960:	e015      	b.n	800498e <HAL_TIM_PWM_Start+0x9e>
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	2b10      	cmp	r3, #16
 8004966:	d109      	bne.n	800497c <HAL_TIM_PWM_Start+0x8c>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b01      	cmp	r3, #1
 8004972:	bf14      	ite	ne
 8004974:	2301      	movne	r3, #1
 8004976:	2300      	moveq	r3, #0
 8004978:	b2db      	uxtb	r3, r3
 800497a:	e008      	b.n	800498e <HAL_TIM_PWM_Start+0x9e>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004982:	b2db      	uxtb	r3, r3
 8004984:	2b01      	cmp	r3, #1
 8004986:	bf14      	ite	ne
 8004988:	2301      	movne	r3, #1
 800498a:	2300      	moveq	r3, #0
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	e0a6      	b.n	8004ae4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d104      	bne.n	80049a6 <HAL_TIM_PWM_Start+0xb6>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2202      	movs	r2, #2
 80049a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80049a4:	e023      	b.n	80049ee <HAL_TIM_PWM_Start+0xfe>
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	2b04      	cmp	r3, #4
 80049aa:	d104      	bne.n	80049b6 <HAL_TIM_PWM_Start+0xc6>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2202      	movs	r2, #2
 80049b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80049b4:	e01b      	b.n	80049ee <HAL_TIM_PWM_Start+0xfe>
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2b08      	cmp	r3, #8
 80049ba:	d104      	bne.n	80049c6 <HAL_TIM_PWM_Start+0xd6>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80049c4:	e013      	b.n	80049ee <HAL_TIM_PWM_Start+0xfe>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b0c      	cmp	r3, #12
 80049ca:	d104      	bne.n	80049d6 <HAL_TIM_PWM_Start+0xe6>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2202      	movs	r2, #2
 80049d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80049d4:	e00b      	b.n	80049ee <HAL_TIM_PWM_Start+0xfe>
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	2b10      	cmp	r3, #16
 80049da:	d104      	bne.n	80049e6 <HAL_TIM_PWM_Start+0xf6>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2202      	movs	r2, #2
 80049e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80049e4:	e003      	b.n	80049ee <HAL_TIM_PWM_Start+0xfe>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2202      	movs	r2, #2
 80049ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2201      	movs	r2, #1
 80049f4:	6839      	ldr	r1, [r7, #0]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f001 f9dc 	bl	8005db4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a3a      	ldr	r2, [pc, #232]	@ (8004aec <HAL_TIM_PWM_Start+0x1fc>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d018      	beq.n	8004a38 <HAL_TIM_PWM_Start+0x148>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a39      	ldr	r2, [pc, #228]	@ (8004af0 <HAL_TIM_PWM_Start+0x200>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d013      	beq.n	8004a38 <HAL_TIM_PWM_Start+0x148>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a37      	ldr	r2, [pc, #220]	@ (8004af4 <HAL_TIM_PWM_Start+0x204>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d00e      	beq.n	8004a38 <HAL_TIM_PWM_Start+0x148>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a36      	ldr	r2, [pc, #216]	@ (8004af8 <HAL_TIM_PWM_Start+0x208>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d009      	beq.n	8004a38 <HAL_TIM_PWM_Start+0x148>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a34      	ldr	r2, [pc, #208]	@ (8004afc <HAL_TIM_PWM_Start+0x20c>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d004      	beq.n	8004a38 <HAL_TIM_PWM_Start+0x148>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a33      	ldr	r2, [pc, #204]	@ (8004b00 <HAL_TIM_PWM_Start+0x210>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d101      	bne.n	8004a3c <HAL_TIM_PWM_Start+0x14c>
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e000      	b.n	8004a3e <HAL_TIM_PWM_Start+0x14e>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d007      	beq.n	8004a52 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004a50:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a25      	ldr	r2, [pc, #148]	@ (8004aec <HAL_TIM_PWM_Start+0x1fc>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d022      	beq.n	8004aa2 <HAL_TIM_PWM_Start+0x1b2>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a64:	d01d      	beq.n	8004aa2 <HAL_TIM_PWM_Start+0x1b2>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a26      	ldr	r2, [pc, #152]	@ (8004b04 <HAL_TIM_PWM_Start+0x214>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d018      	beq.n	8004aa2 <HAL_TIM_PWM_Start+0x1b2>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a24      	ldr	r2, [pc, #144]	@ (8004b08 <HAL_TIM_PWM_Start+0x218>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d013      	beq.n	8004aa2 <HAL_TIM_PWM_Start+0x1b2>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a23      	ldr	r2, [pc, #140]	@ (8004b0c <HAL_TIM_PWM_Start+0x21c>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d00e      	beq.n	8004aa2 <HAL_TIM_PWM_Start+0x1b2>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a19      	ldr	r2, [pc, #100]	@ (8004af0 <HAL_TIM_PWM_Start+0x200>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d009      	beq.n	8004aa2 <HAL_TIM_PWM_Start+0x1b2>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a18      	ldr	r2, [pc, #96]	@ (8004af4 <HAL_TIM_PWM_Start+0x204>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d004      	beq.n	8004aa2 <HAL_TIM_PWM_Start+0x1b2>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a18      	ldr	r2, [pc, #96]	@ (8004b00 <HAL_TIM_PWM_Start+0x210>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d115      	bne.n	8004ace <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	4b19      	ldr	r3, [pc, #100]	@ (8004b10 <HAL_TIM_PWM_Start+0x220>)
 8004aaa:	4013      	ands	r3, r2
 8004aac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2b06      	cmp	r3, #6
 8004ab2:	d015      	beq.n	8004ae0 <HAL_TIM_PWM_Start+0x1f0>
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004aba:	d011      	beq.n	8004ae0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f042 0201 	orr.w	r2, r2, #1
 8004aca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004acc:	e008      	b.n	8004ae0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f042 0201 	orr.w	r2, r2, #1
 8004adc:	601a      	str	r2, [r3, #0]
 8004ade:	e000      	b.n	8004ae2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3710      	adds	r7, #16
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	40012c00 	.word	0x40012c00
 8004af0:	40013400 	.word	0x40013400
 8004af4:	40014000 	.word	0x40014000
 8004af8:	40014400 	.word	0x40014400
 8004afc:	40014800 	.word	0x40014800
 8004b00:	40015000 	.word	0x40015000
 8004b04:	40000400 	.word	0x40000400
 8004b08:	40000800 	.word	0x40000800
 8004b0c:	40000c00 	.word	0x40000c00
 8004b10:	00010007 	.word	0x00010007

08004b14 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d101      	bne.n	8004b28 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e097      	b.n	8004c58 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d106      	bne.n	8004b42 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f7fe f88d 	bl	8002c5c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2202      	movs	r2, #2
 8004b46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	6812      	ldr	r2, [r2, #0]
 8004b54:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8004b58:	f023 0307 	bic.w	r3, r3, #7
 8004b5c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	3304      	adds	r3, #4
 8004b66:	4619      	mov	r1, r3
 8004b68:	4610      	mov	r0, r2
 8004b6a:	f000 fca9 	bl	80054c0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	699b      	ldr	r3, [r3, #24]
 8004b7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	6a1b      	ldr	r3, [r3, #32]
 8004b84:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	697a      	ldr	r2, [r7, #20]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b96:	f023 0303 	bic.w	r3, r3, #3
 8004b9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	689a      	ldr	r2, [r3, #8]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	021b      	lsls	r3, r3, #8
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	693a      	ldr	r2, [r7, #16]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004bb4:	f023 030c 	bic.w	r3, r3, #12
 8004bb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004bc0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	68da      	ldr	r2, [r3, #12]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	69db      	ldr	r3, [r3, #28]
 8004bce:	021b      	lsls	r3, r3, #8
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	011a      	lsls	r2, r3, #4
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	031b      	lsls	r3, r3, #12
 8004be4:	4313      	orrs	r3, r2
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004bf2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004bfa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	695b      	ldr	r3, [r3, #20]
 8004c04:	011b      	lsls	r3, r3, #4
 8004c06:	4313      	orrs	r3, r2
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	693a      	ldr	r2, [r7, #16]
 8004c1c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2201      	movs	r2, #1
 8004c42:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3718      	adds	r7, #24
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c70:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004c78:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c80:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c88:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d110      	bne.n	8004cb2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d102      	bne.n	8004c9c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c96:	7b7b      	ldrb	r3, [r7, #13]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d001      	beq.n	8004ca0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e069      	b.n	8004d74 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2202      	movs	r2, #2
 8004ca4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2202      	movs	r2, #2
 8004cac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cb0:	e031      	b.n	8004d16 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	2b04      	cmp	r3, #4
 8004cb6:	d110      	bne.n	8004cda <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cb8:	7bbb      	ldrb	r3, [r7, #14]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d102      	bne.n	8004cc4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cbe:	7b3b      	ldrb	r3, [r7, #12]
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	d001      	beq.n	8004cc8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e055      	b.n	8004d74 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2202      	movs	r2, #2
 8004ccc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2202      	movs	r2, #2
 8004cd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004cd8:	e01d      	b.n	8004d16 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cda:	7bfb      	ldrb	r3, [r7, #15]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d108      	bne.n	8004cf2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ce0:	7bbb      	ldrb	r3, [r7, #14]
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d105      	bne.n	8004cf2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ce6:	7b7b      	ldrb	r3, [r7, #13]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d102      	bne.n	8004cf2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cec:	7b3b      	ldrb	r3, [r7, #12]
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d001      	beq.n	8004cf6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e03e      	b.n	8004d74 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2202      	movs	r2, #2
 8004cfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2202      	movs	r2, #2
 8004d02:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2202      	movs	r2, #2
 8004d0a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2202      	movs	r2, #2
 8004d12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d003      	beq.n	8004d24 <HAL_TIM_Encoder_Start+0xc4>
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	2b04      	cmp	r3, #4
 8004d20:	d008      	beq.n	8004d34 <HAL_TIM_Encoder_Start+0xd4>
 8004d22:	e00f      	b.n	8004d44 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f001 f841 	bl	8005db4 <TIM_CCxChannelCmd>
      break;
 8004d32:	e016      	b.n	8004d62 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	2104      	movs	r1, #4
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f001 f839 	bl	8005db4 <TIM_CCxChannelCmd>
      break;
 8004d42:	e00e      	b.n	8004d62 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	2100      	movs	r1, #0
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f001 f831 	bl	8005db4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2201      	movs	r2, #1
 8004d58:	2104      	movs	r1, #4
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f001 f82a 	bl	8005db4 <TIM_CCxChannelCmd>
      break;
 8004d60:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f042 0201 	orr.w	r2, r2, #1
 8004d70:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3710      	adds	r7, #16
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	f003 0302 	and.w	r3, r3, #2
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d020      	beq.n	8004de0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f003 0302 	and.w	r3, r3, #2
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d01b      	beq.n	8004de0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f06f 0202 	mvn.w	r2, #2
 8004db0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	699b      	ldr	r3, [r3, #24]
 8004dbe:	f003 0303 	and.w	r3, r3, #3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d003      	beq.n	8004dce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f000 fb5c 	bl	8005484 <HAL_TIM_IC_CaptureCallback>
 8004dcc:	e005      	b.n	8004dda <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 fb4e 	bl	8005470 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 fb5f 	bl	8005498 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	f003 0304 	and.w	r3, r3, #4
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d020      	beq.n	8004e2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d01b      	beq.n	8004e2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f06f 0204 	mvn.w	r2, #4
 8004dfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2202      	movs	r2, #2
 8004e02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d003      	beq.n	8004e1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 fb36 	bl	8005484 <HAL_TIM_IC_CaptureCallback>
 8004e18:	e005      	b.n	8004e26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 fb28 	bl	8005470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 fb39 	bl	8005498 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	f003 0308 	and.w	r3, r3, #8
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d020      	beq.n	8004e78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f003 0308 	and.w	r3, r3, #8
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d01b      	beq.n	8004e78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f06f 0208 	mvn.w	r2, #8
 8004e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2204      	movs	r2, #4
 8004e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	f003 0303 	and.w	r3, r3, #3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d003      	beq.n	8004e66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 fb10 	bl	8005484 <HAL_TIM_IC_CaptureCallback>
 8004e64:	e005      	b.n	8004e72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f000 fb02 	bl	8005470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 fb13 	bl	8005498 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	f003 0310 	and.w	r3, r3, #16
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d020      	beq.n	8004ec4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f003 0310 	and.w	r3, r3, #16
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d01b      	beq.n	8004ec4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f06f 0210 	mvn.w	r2, #16
 8004e94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2208      	movs	r2, #8
 8004e9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	69db      	ldr	r3, [r3, #28]
 8004ea2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d003      	beq.n	8004eb2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 faea 	bl	8005484 <HAL_TIM_IC_CaptureCallback>
 8004eb0:	e005      	b.n	8004ebe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 fadc 	bl	8005470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004eb8:	6878      	ldr	r0, [r7, #4]
 8004eba:	f000 faed 	bl	8005498 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ec4:	68bb      	ldr	r3, [r7, #8]
 8004ec6:	f003 0301 	and.w	r3, r3, #1
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00c      	beq.n	8004ee8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d007      	beq.n	8004ee8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f06f 0201 	mvn.w	r2, #1
 8004ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f7fc ff4e 	bl	8001d84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d104      	bne.n	8004efc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00c      	beq.n	8004f16 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d007      	beq.n	8004f16 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004f0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f001 f815 	bl	8005f40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00c      	beq.n	8004f3a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d007      	beq.n	8004f3a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004f32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f001 f80d 	bl	8005f54 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00c      	beq.n	8004f5e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d007      	beq.n	8004f5e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 faa7 	bl	80054ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	f003 0320 	and.w	r3, r3, #32
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00c      	beq.n	8004f82 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f003 0320 	and.w	r3, r3, #32
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d007      	beq.n	8004f82 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f06f 0220 	mvn.w	r2, #32
 8004f7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 ffd5 	bl	8005f2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00c      	beq.n	8004fa6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d007      	beq.n	8004fa6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004f9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f000 ffe1 	bl	8005f68 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00c      	beq.n	8004fca <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d007      	beq.n	8004fca <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004fc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 ffd9 	bl	8005f7c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00c      	beq.n	8004fee <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d007      	beq.n	8004fee <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004fe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 ffd1 	bl	8005f90 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00c      	beq.n	8005012 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d007      	beq.n	8005012 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800500a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 ffc9 	bl	8005fa4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005012:	bf00      	nop
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
	...

0800501c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005028:	2300      	movs	r3, #0
 800502a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005032:	2b01      	cmp	r3, #1
 8005034:	d101      	bne.n	800503a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005036:	2302      	movs	r3, #2
 8005038:	e0ff      	b.n	800523a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2201      	movs	r2, #1
 800503e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2b14      	cmp	r3, #20
 8005046:	f200 80f0 	bhi.w	800522a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800504a:	a201      	add	r2, pc, #4	@ (adr r2, 8005050 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800504c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005050:	080050a5 	.word	0x080050a5
 8005054:	0800522b 	.word	0x0800522b
 8005058:	0800522b 	.word	0x0800522b
 800505c:	0800522b 	.word	0x0800522b
 8005060:	080050e5 	.word	0x080050e5
 8005064:	0800522b 	.word	0x0800522b
 8005068:	0800522b 	.word	0x0800522b
 800506c:	0800522b 	.word	0x0800522b
 8005070:	08005127 	.word	0x08005127
 8005074:	0800522b 	.word	0x0800522b
 8005078:	0800522b 	.word	0x0800522b
 800507c:	0800522b 	.word	0x0800522b
 8005080:	08005167 	.word	0x08005167
 8005084:	0800522b 	.word	0x0800522b
 8005088:	0800522b 	.word	0x0800522b
 800508c:	0800522b 	.word	0x0800522b
 8005090:	080051a9 	.word	0x080051a9
 8005094:	0800522b 	.word	0x0800522b
 8005098:	0800522b 	.word	0x0800522b
 800509c:	0800522b 	.word	0x0800522b
 80050a0:	080051e9 	.word	0x080051e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68b9      	ldr	r1, [r7, #8]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 fabc 	bl	8005628 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	699a      	ldr	r2, [r3, #24]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f042 0208 	orr.w	r2, r2, #8
 80050be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	699a      	ldr	r2, [r3, #24]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 0204 	bic.w	r2, r2, #4
 80050ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	6999      	ldr	r1, [r3, #24]
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	691a      	ldr	r2, [r3, #16]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	430a      	orrs	r2, r1
 80050e0:	619a      	str	r2, [r3, #24]
      break;
 80050e2:	e0a5      	b.n	8005230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68b9      	ldr	r1, [r7, #8]
 80050ea:	4618      	mov	r0, r3
 80050ec:	f000 fb36 	bl	800575c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	699a      	ldr	r2, [r3, #24]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	699a      	ldr	r2, [r3, #24]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800510e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	6999      	ldr	r1, [r3, #24]
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	021a      	lsls	r2, r3, #8
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	619a      	str	r2, [r3, #24]
      break;
 8005124:	e084      	b.n	8005230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68b9      	ldr	r1, [r7, #8]
 800512c:	4618      	mov	r0, r3
 800512e:	f000 fba9 	bl	8005884 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	69da      	ldr	r2, [r3, #28]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f042 0208 	orr.w	r2, r2, #8
 8005140:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	69da      	ldr	r2, [r3, #28]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f022 0204 	bic.w	r2, r2, #4
 8005150:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	69d9      	ldr	r1, [r3, #28]
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	691a      	ldr	r2, [r3, #16]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	430a      	orrs	r2, r1
 8005162:	61da      	str	r2, [r3, #28]
      break;
 8005164:	e064      	b.n	8005230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68b9      	ldr	r1, [r7, #8]
 800516c:	4618      	mov	r0, r3
 800516e:	f000 fc1b 	bl	80059a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	69da      	ldr	r2, [r3, #28]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005180:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	69da      	ldr	r2, [r3, #28]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005190:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	69d9      	ldr	r1, [r3, #28]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	691b      	ldr	r3, [r3, #16]
 800519c:	021a      	lsls	r2, r3, #8
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	61da      	str	r2, [r3, #28]
      break;
 80051a6:	e043      	b.n	8005230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68b9      	ldr	r1, [r7, #8]
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 fc8e 	bl	8005ad0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f042 0208 	orr.w	r2, r2, #8
 80051c2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f022 0204 	bic.w	r2, r2, #4
 80051d2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	691a      	ldr	r2, [r3, #16]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	430a      	orrs	r2, r1
 80051e4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80051e6:	e023      	b.n	8005230 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68b9      	ldr	r1, [r7, #8]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 fcd8 	bl	8005ba4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005202:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005212:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	021a      	lsls	r2, r3, #8
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	430a      	orrs	r2, r1
 8005226:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005228:	e002      	b.n	8005230 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	75fb      	strb	r3, [r7, #23]
      break;
 800522e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005238:	7dfb      	ldrb	r3, [r7, #23]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3718      	adds	r7, #24
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop

08005244 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800524e:	2300      	movs	r3, #0
 8005250:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005258:	2b01      	cmp	r3, #1
 800525a:	d101      	bne.n	8005260 <HAL_TIM_ConfigClockSource+0x1c>
 800525c:	2302      	movs	r3, #2
 800525e:	e0f6      	b.n	800544e <HAL_TIM_ConfigClockSource+0x20a>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2202      	movs	r2, #2
 800526c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800527e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005282:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800528a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a6f      	ldr	r2, [pc, #444]	@ (8005458 <HAL_TIM_ConfigClockSource+0x214>)
 800529a:	4293      	cmp	r3, r2
 800529c:	f000 80c1 	beq.w	8005422 <HAL_TIM_ConfigClockSource+0x1de>
 80052a0:	4a6d      	ldr	r2, [pc, #436]	@ (8005458 <HAL_TIM_ConfigClockSource+0x214>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	f200 80c6 	bhi.w	8005434 <HAL_TIM_ConfigClockSource+0x1f0>
 80052a8:	4a6c      	ldr	r2, [pc, #432]	@ (800545c <HAL_TIM_ConfigClockSource+0x218>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	f000 80b9 	beq.w	8005422 <HAL_TIM_ConfigClockSource+0x1de>
 80052b0:	4a6a      	ldr	r2, [pc, #424]	@ (800545c <HAL_TIM_ConfigClockSource+0x218>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	f200 80be 	bhi.w	8005434 <HAL_TIM_ConfigClockSource+0x1f0>
 80052b8:	4a69      	ldr	r2, [pc, #420]	@ (8005460 <HAL_TIM_ConfigClockSource+0x21c>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	f000 80b1 	beq.w	8005422 <HAL_TIM_ConfigClockSource+0x1de>
 80052c0:	4a67      	ldr	r2, [pc, #412]	@ (8005460 <HAL_TIM_ConfigClockSource+0x21c>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	f200 80b6 	bhi.w	8005434 <HAL_TIM_ConfigClockSource+0x1f0>
 80052c8:	4a66      	ldr	r2, [pc, #408]	@ (8005464 <HAL_TIM_ConfigClockSource+0x220>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	f000 80a9 	beq.w	8005422 <HAL_TIM_ConfigClockSource+0x1de>
 80052d0:	4a64      	ldr	r2, [pc, #400]	@ (8005464 <HAL_TIM_ConfigClockSource+0x220>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	f200 80ae 	bhi.w	8005434 <HAL_TIM_ConfigClockSource+0x1f0>
 80052d8:	4a63      	ldr	r2, [pc, #396]	@ (8005468 <HAL_TIM_ConfigClockSource+0x224>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	f000 80a1 	beq.w	8005422 <HAL_TIM_ConfigClockSource+0x1de>
 80052e0:	4a61      	ldr	r2, [pc, #388]	@ (8005468 <HAL_TIM_ConfigClockSource+0x224>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	f200 80a6 	bhi.w	8005434 <HAL_TIM_ConfigClockSource+0x1f0>
 80052e8:	4a60      	ldr	r2, [pc, #384]	@ (800546c <HAL_TIM_ConfigClockSource+0x228>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	f000 8099 	beq.w	8005422 <HAL_TIM_ConfigClockSource+0x1de>
 80052f0:	4a5e      	ldr	r2, [pc, #376]	@ (800546c <HAL_TIM_ConfigClockSource+0x228>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	f200 809e 	bhi.w	8005434 <HAL_TIM_ConfigClockSource+0x1f0>
 80052f8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80052fc:	f000 8091 	beq.w	8005422 <HAL_TIM_ConfigClockSource+0x1de>
 8005300:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005304:	f200 8096 	bhi.w	8005434 <HAL_TIM_ConfigClockSource+0x1f0>
 8005308:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800530c:	f000 8089 	beq.w	8005422 <HAL_TIM_ConfigClockSource+0x1de>
 8005310:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005314:	f200 808e 	bhi.w	8005434 <HAL_TIM_ConfigClockSource+0x1f0>
 8005318:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800531c:	d03e      	beq.n	800539c <HAL_TIM_ConfigClockSource+0x158>
 800531e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005322:	f200 8087 	bhi.w	8005434 <HAL_TIM_ConfigClockSource+0x1f0>
 8005326:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800532a:	f000 8086 	beq.w	800543a <HAL_TIM_ConfigClockSource+0x1f6>
 800532e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005332:	d87f      	bhi.n	8005434 <HAL_TIM_ConfigClockSource+0x1f0>
 8005334:	2b70      	cmp	r3, #112	@ 0x70
 8005336:	d01a      	beq.n	800536e <HAL_TIM_ConfigClockSource+0x12a>
 8005338:	2b70      	cmp	r3, #112	@ 0x70
 800533a:	d87b      	bhi.n	8005434 <HAL_TIM_ConfigClockSource+0x1f0>
 800533c:	2b60      	cmp	r3, #96	@ 0x60
 800533e:	d050      	beq.n	80053e2 <HAL_TIM_ConfigClockSource+0x19e>
 8005340:	2b60      	cmp	r3, #96	@ 0x60
 8005342:	d877      	bhi.n	8005434 <HAL_TIM_ConfigClockSource+0x1f0>
 8005344:	2b50      	cmp	r3, #80	@ 0x50
 8005346:	d03c      	beq.n	80053c2 <HAL_TIM_ConfigClockSource+0x17e>
 8005348:	2b50      	cmp	r3, #80	@ 0x50
 800534a:	d873      	bhi.n	8005434 <HAL_TIM_ConfigClockSource+0x1f0>
 800534c:	2b40      	cmp	r3, #64	@ 0x40
 800534e:	d058      	beq.n	8005402 <HAL_TIM_ConfigClockSource+0x1be>
 8005350:	2b40      	cmp	r3, #64	@ 0x40
 8005352:	d86f      	bhi.n	8005434 <HAL_TIM_ConfigClockSource+0x1f0>
 8005354:	2b30      	cmp	r3, #48	@ 0x30
 8005356:	d064      	beq.n	8005422 <HAL_TIM_ConfigClockSource+0x1de>
 8005358:	2b30      	cmp	r3, #48	@ 0x30
 800535a:	d86b      	bhi.n	8005434 <HAL_TIM_ConfigClockSource+0x1f0>
 800535c:	2b20      	cmp	r3, #32
 800535e:	d060      	beq.n	8005422 <HAL_TIM_ConfigClockSource+0x1de>
 8005360:	2b20      	cmp	r3, #32
 8005362:	d867      	bhi.n	8005434 <HAL_TIM_ConfigClockSource+0x1f0>
 8005364:	2b00      	cmp	r3, #0
 8005366:	d05c      	beq.n	8005422 <HAL_TIM_ConfigClockSource+0x1de>
 8005368:	2b10      	cmp	r3, #16
 800536a:	d05a      	beq.n	8005422 <HAL_TIM_ConfigClockSource+0x1de>
 800536c:	e062      	b.n	8005434 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800537e:	f000 fcf9 	bl	8005d74 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005390:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	609a      	str	r2, [r3, #8]
      break;
 800539a:	e04f      	b.n	800543c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053ac:	f000 fce2 	bl	8005d74 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689a      	ldr	r2, [r3, #8]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053be:	609a      	str	r2, [r3, #8]
      break;
 80053c0:	e03c      	b.n	800543c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ce:	461a      	mov	r2, r3
 80053d0:	f000 fc54 	bl	8005c7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2150      	movs	r1, #80	@ 0x50
 80053da:	4618      	mov	r0, r3
 80053dc:	f000 fcad 	bl	8005d3a <TIM_ITRx_SetConfig>
      break;
 80053e0:	e02c      	b.n	800543c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053ee:	461a      	mov	r2, r3
 80053f0:	f000 fc73 	bl	8005cda <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2160      	movs	r1, #96	@ 0x60
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 fc9d 	bl	8005d3a <TIM_ITRx_SetConfig>
      break;
 8005400:	e01c      	b.n	800543c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800540e:	461a      	mov	r2, r3
 8005410:	f000 fc34 	bl	8005c7c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2140      	movs	r1, #64	@ 0x40
 800541a:	4618      	mov	r0, r3
 800541c:	f000 fc8d 	bl	8005d3a <TIM_ITRx_SetConfig>
      break;
 8005420:	e00c      	b.n	800543c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4619      	mov	r1, r3
 800542c:	4610      	mov	r0, r2
 800542e:	f000 fc84 	bl	8005d3a <TIM_ITRx_SetConfig>
      break;
 8005432:	e003      	b.n	800543c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	73fb      	strb	r3, [r7, #15]
      break;
 8005438:	e000      	b.n	800543c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800543a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2200      	movs	r2, #0
 8005448:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800544c:	7bfb      	ldrb	r3, [r7, #15]
}
 800544e:	4618      	mov	r0, r3
 8005450:	3710      	adds	r7, #16
 8005452:	46bd      	mov	sp, r7
 8005454:	bd80      	pop	{r7, pc}
 8005456:	bf00      	nop
 8005458:	00100070 	.word	0x00100070
 800545c:	00100060 	.word	0x00100060
 8005460:	00100050 	.word	0x00100050
 8005464:	00100040 	.word	0x00100040
 8005468:	00100030 	.word	0x00100030
 800546c:	00100020 	.word	0x00100020

08005470 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80054b4:	bf00      	nop
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a4c      	ldr	r2, [pc, #304]	@ (8005604 <TIM_Base_SetConfig+0x144>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d017      	beq.n	8005508 <TIM_Base_SetConfig+0x48>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054de:	d013      	beq.n	8005508 <TIM_Base_SetConfig+0x48>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a49      	ldr	r2, [pc, #292]	@ (8005608 <TIM_Base_SetConfig+0x148>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d00f      	beq.n	8005508 <TIM_Base_SetConfig+0x48>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a48      	ldr	r2, [pc, #288]	@ (800560c <TIM_Base_SetConfig+0x14c>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d00b      	beq.n	8005508 <TIM_Base_SetConfig+0x48>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a47      	ldr	r2, [pc, #284]	@ (8005610 <TIM_Base_SetConfig+0x150>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d007      	beq.n	8005508 <TIM_Base_SetConfig+0x48>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a46      	ldr	r2, [pc, #280]	@ (8005614 <TIM_Base_SetConfig+0x154>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d003      	beq.n	8005508 <TIM_Base_SetConfig+0x48>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	4a45      	ldr	r2, [pc, #276]	@ (8005618 <TIM_Base_SetConfig+0x158>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d108      	bne.n	800551a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800550e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	68fa      	ldr	r2, [r7, #12]
 8005516:	4313      	orrs	r3, r2
 8005518:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	4a39      	ldr	r2, [pc, #228]	@ (8005604 <TIM_Base_SetConfig+0x144>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d023      	beq.n	800556a <TIM_Base_SetConfig+0xaa>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005528:	d01f      	beq.n	800556a <TIM_Base_SetConfig+0xaa>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a36      	ldr	r2, [pc, #216]	@ (8005608 <TIM_Base_SetConfig+0x148>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d01b      	beq.n	800556a <TIM_Base_SetConfig+0xaa>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	4a35      	ldr	r2, [pc, #212]	@ (800560c <TIM_Base_SetConfig+0x14c>)
 8005536:	4293      	cmp	r3, r2
 8005538:	d017      	beq.n	800556a <TIM_Base_SetConfig+0xaa>
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a34      	ldr	r2, [pc, #208]	@ (8005610 <TIM_Base_SetConfig+0x150>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d013      	beq.n	800556a <TIM_Base_SetConfig+0xaa>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4a33      	ldr	r2, [pc, #204]	@ (8005614 <TIM_Base_SetConfig+0x154>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d00f      	beq.n	800556a <TIM_Base_SetConfig+0xaa>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a33      	ldr	r2, [pc, #204]	@ (800561c <TIM_Base_SetConfig+0x15c>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d00b      	beq.n	800556a <TIM_Base_SetConfig+0xaa>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a32      	ldr	r2, [pc, #200]	@ (8005620 <TIM_Base_SetConfig+0x160>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d007      	beq.n	800556a <TIM_Base_SetConfig+0xaa>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a31      	ldr	r2, [pc, #196]	@ (8005624 <TIM_Base_SetConfig+0x164>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d003      	beq.n	800556a <TIM_Base_SetConfig+0xaa>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a2c      	ldr	r2, [pc, #176]	@ (8005618 <TIM_Base_SetConfig+0x158>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d108      	bne.n	800557c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005570:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	68fa      	ldr	r2, [r7, #12]
 8005578:	4313      	orrs	r3, r2
 800557a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	695b      	ldr	r3, [r3, #20]
 8005586:	4313      	orrs	r3, r2
 8005588:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	689a      	ldr	r2, [r3, #8]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a18      	ldr	r2, [pc, #96]	@ (8005604 <TIM_Base_SetConfig+0x144>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d013      	beq.n	80055d0 <TIM_Base_SetConfig+0x110>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a1a      	ldr	r2, [pc, #104]	@ (8005614 <TIM_Base_SetConfig+0x154>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d00f      	beq.n	80055d0 <TIM_Base_SetConfig+0x110>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a1a      	ldr	r2, [pc, #104]	@ (800561c <TIM_Base_SetConfig+0x15c>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d00b      	beq.n	80055d0 <TIM_Base_SetConfig+0x110>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a19      	ldr	r2, [pc, #100]	@ (8005620 <TIM_Base_SetConfig+0x160>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d007      	beq.n	80055d0 <TIM_Base_SetConfig+0x110>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a18      	ldr	r2, [pc, #96]	@ (8005624 <TIM_Base_SetConfig+0x164>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d003      	beq.n	80055d0 <TIM_Base_SetConfig+0x110>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a13      	ldr	r2, [pc, #76]	@ (8005618 <TIM_Base_SetConfig+0x158>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d103      	bne.n	80055d8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	691a      	ldr	r2, [r3, #16]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d105      	bne.n	80055f6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	f023 0201 	bic.w	r2, r3, #1
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	611a      	str	r2, [r3, #16]
  }
}
 80055f6:	bf00      	nop
 80055f8:	3714      	adds	r7, #20
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	40012c00 	.word	0x40012c00
 8005608:	40000400 	.word	0x40000400
 800560c:	40000800 	.word	0x40000800
 8005610:	40000c00 	.word	0x40000c00
 8005614:	40013400 	.word	0x40013400
 8005618:	40015000 	.word	0x40015000
 800561c:	40014000 	.word	0x40014000
 8005620:	40014400 	.word	0x40014400
 8005624:	40014800 	.word	0x40014800

08005628 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005628:	b480      	push	{r7}
 800562a:	b087      	sub	sp, #28
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6a1b      	ldr	r3, [r3, #32]
 800563c:	f023 0201 	bic.w	r2, r3, #1
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005656:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800565a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f023 0303 	bic.w	r3, r3, #3
 8005662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	4313      	orrs	r3, r2
 800566c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f023 0302 	bic.w	r3, r3, #2
 8005674:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	697a      	ldr	r2, [r7, #20]
 800567c:	4313      	orrs	r3, r2
 800567e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a30      	ldr	r2, [pc, #192]	@ (8005744 <TIM_OC1_SetConfig+0x11c>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d013      	beq.n	80056b0 <TIM_OC1_SetConfig+0x88>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a2f      	ldr	r2, [pc, #188]	@ (8005748 <TIM_OC1_SetConfig+0x120>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d00f      	beq.n	80056b0 <TIM_OC1_SetConfig+0x88>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a2e      	ldr	r2, [pc, #184]	@ (800574c <TIM_OC1_SetConfig+0x124>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d00b      	beq.n	80056b0 <TIM_OC1_SetConfig+0x88>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	4a2d      	ldr	r2, [pc, #180]	@ (8005750 <TIM_OC1_SetConfig+0x128>)
 800569c:	4293      	cmp	r3, r2
 800569e:	d007      	beq.n	80056b0 <TIM_OC1_SetConfig+0x88>
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a2c      	ldr	r2, [pc, #176]	@ (8005754 <TIM_OC1_SetConfig+0x12c>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d003      	beq.n	80056b0 <TIM_OC1_SetConfig+0x88>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a2b      	ldr	r2, [pc, #172]	@ (8005758 <TIM_OC1_SetConfig+0x130>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d10c      	bne.n	80056ca <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	f023 0308 	bic.w	r3, r3, #8
 80056b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	4313      	orrs	r3, r2
 80056c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f023 0304 	bic.w	r3, r3, #4
 80056c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a1d      	ldr	r2, [pc, #116]	@ (8005744 <TIM_OC1_SetConfig+0x11c>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d013      	beq.n	80056fa <TIM_OC1_SetConfig+0xd2>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a1c      	ldr	r2, [pc, #112]	@ (8005748 <TIM_OC1_SetConfig+0x120>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d00f      	beq.n	80056fa <TIM_OC1_SetConfig+0xd2>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a1b      	ldr	r2, [pc, #108]	@ (800574c <TIM_OC1_SetConfig+0x124>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d00b      	beq.n	80056fa <TIM_OC1_SetConfig+0xd2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a1a      	ldr	r2, [pc, #104]	@ (8005750 <TIM_OC1_SetConfig+0x128>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d007      	beq.n	80056fa <TIM_OC1_SetConfig+0xd2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a19      	ldr	r2, [pc, #100]	@ (8005754 <TIM_OC1_SetConfig+0x12c>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d003      	beq.n	80056fa <TIM_OC1_SetConfig+0xd2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a18      	ldr	r2, [pc, #96]	@ (8005758 <TIM_OC1_SetConfig+0x130>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d111      	bne.n	800571e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005700:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005708:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	4313      	orrs	r3, r2
 8005712:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	4313      	orrs	r3, r2
 800571c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	68fa      	ldr	r2, [r7, #12]
 8005728:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	697a      	ldr	r2, [r7, #20]
 8005736:	621a      	str	r2, [r3, #32]
}
 8005738:	bf00      	nop
 800573a:	371c      	adds	r7, #28
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr
 8005744:	40012c00 	.word	0x40012c00
 8005748:	40013400 	.word	0x40013400
 800574c:	40014000 	.word	0x40014000
 8005750:	40014400 	.word	0x40014400
 8005754:	40014800 	.word	0x40014800
 8005758:	40015000 	.word	0x40015000

0800575c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800575c:	b480      	push	{r7}
 800575e:	b087      	sub	sp, #28
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6a1b      	ldr	r3, [r3, #32]
 8005770:	f023 0210 	bic.w	r2, r3, #16
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800578a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800578e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005796:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	021b      	lsls	r3, r3, #8
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	f023 0320 	bic.w	r3, r3, #32
 80057aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	011b      	lsls	r3, r3, #4
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a2c      	ldr	r2, [pc, #176]	@ (800586c <TIM_OC2_SetConfig+0x110>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d007      	beq.n	80057d0 <TIM_OC2_SetConfig+0x74>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a2b      	ldr	r2, [pc, #172]	@ (8005870 <TIM_OC2_SetConfig+0x114>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d003      	beq.n	80057d0 <TIM_OC2_SetConfig+0x74>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	4a2a      	ldr	r2, [pc, #168]	@ (8005874 <TIM_OC2_SetConfig+0x118>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d10d      	bne.n	80057ec <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	011b      	lsls	r3, r3, #4
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80057ea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a1f      	ldr	r2, [pc, #124]	@ (800586c <TIM_OC2_SetConfig+0x110>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d013      	beq.n	800581c <TIM_OC2_SetConfig+0xc0>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a1e      	ldr	r2, [pc, #120]	@ (8005870 <TIM_OC2_SetConfig+0x114>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d00f      	beq.n	800581c <TIM_OC2_SetConfig+0xc0>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a1e      	ldr	r2, [pc, #120]	@ (8005878 <TIM_OC2_SetConfig+0x11c>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d00b      	beq.n	800581c <TIM_OC2_SetConfig+0xc0>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a1d      	ldr	r2, [pc, #116]	@ (800587c <TIM_OC2_SetConfig+0x120>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d007      	beq.n	800581c <TIM_OC2_SetConfig+0xc0>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a1c      	ldr	r2, [pc, #112]	@ (8005880 <TIM_OC2_SetConfig+0x124>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d003      	beq.n	800581c <TIM_OC2_SetConfig+0xc0>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4a17      	ldr	r2, [pc, #92]	@ (8005874 <TIM_OC2_SetConfig+0x118>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d113      	bne.n	8005844 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005822:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800582a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	695b      	ldr	r3, [r3, #20]
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	4313      	orrs	r3, r2
 8005836:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	699b      	ldr	r3, [r3, #24]
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	4313      	orrs	r3, r2
 8005842:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	621a      	str	r2, [r3, #32]
}
 800585e:	bf00      	nop
 8005860:	371c      	adds	r7, #28
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	40012c00 	.word	0x40012c00
 8005870:	40013400 	.word	0x40013400
 8005874:	40015000 	.word	0x40015000
 8005878:	40014000 	.word	0x40014000
 800587c:	40014400 	.word	0x40014400
 8005880:	40014800 	.word	0x40014800

08005884 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005884:	b480      	push	{r7}
 8005886:	b087      	sub	sp, #28
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
 800588c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a1b      	ldr	r3, [r3, #32]
 8005898:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f023 0303 	bic.w	r3, r3, #3
 80058be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80058d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	021b      	lsls	r3, r3, #8
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	4313      	orrs	r3, r2
 80058dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a2b      	ldr	r2, [pc, #172]	@ (8005990 <TIM_OC3_SetConfig+0x10c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d007      	beq.n	80058f6 <TIM_OC3_SetConfig+0x72>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a2a      	ldr	r2, [pc, #168]	@ (8005994 <TIM_OC3_SetConfig+0x110>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d003      	beq.n	80058f6 <TIM_OC3_SetConfig+0x72>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a29      	ldr	r2, [pc, #164]	@ (8005998 <TIM_OC3_SetConfig+0x114>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d10d      	bne.n	8005912 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80058fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	021b      	lsls	r3, r3, #8
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	4313      	orrs	r3, r2
 8005908:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005910:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a1e      	ldr	r2, [pc, #120]	@ (8005990 <TIM_OC3_SetConfig+0x10c>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d013      	beq.n	8005942 <TIM_OC3_SetConfig+0xbe>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a1d      	ldr	r2, [pc, #116]	@ (8005994 <TIM_OC3_SetConfig+0x110>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d00f      	beq.n	8005942 <TIM_OC3_SetConfig+0xbe>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a1d      	ldr	r2, [pc, #116]	@ (800599c <TIM_OC3_SetConfig+0x118>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d00b      	beq.n	8005942 <TIM_OC3_SetConfig+0xbe>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a1c      	ldr	r2, [pc, #112]	@ (80059a0 <TIM_OC3_SetConfig+0x11c>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d007      	beq.n	8005942 <TIM_OC3_SetConfig+0xbe>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a1b      	ldr	r2, [pc, #108]	@ (80059a4 <TIM_OC3_SetConfig+0x120>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d003      	beq.n	8005942 <TIM_OC3_SetConfig+0xbe>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a16      	ldr	r2, [pc, #88]	@ (8005998 <TIM_OC3_SetConfig+0x114>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d113      	bne.n	800596a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005948:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005950:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	011b      	lsls	r3, r3, #4
 8005958:	693a      	ldr	r2, [r7, #16]
 800595a:	4313      	orrs	r3, r2
 800595c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	011b      	lsls	r3, r3, #4
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	4313      	orrs	r3, r2
 8005968:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	685a      	ldr	r2, [r3, #4]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	621a      	str	r2, [r3, #32]
}
 8005984:	bf00      	nop
 8005986:	371c      	adds	r7, #28
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	40012c00 	.word	0x40012c00
 8005994:	40013400 	.word	0x40013400
 8005998:	40015000 	.word	0x40015000
 800599c:	40014000 	.word	0x40014000
 80059a0:	40014400 	.word	0x40014400
 80059a4:	40014800 	.word	0x40014800

080059a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b087      	sub	sp, #28
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
 80059b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6a1b      	ldr	r3, [r3, #32]
 80059b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a1b      	ldr	r3, [r3, #32]
 80059bc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	69db      	ldr	r3, [r3, #28]
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	021b      	lsls	r3, r3, #8
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80059f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	031b      	lsls	r3, r3, #12
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a2c      	ldr	r2, [pc, #176]	@ (8005ab8 <TIM_OC4_SetConfig+0x110>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d007      	beq.n	8005a1c <TIM_OC4_SetConfig+0x74>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a2b      	ldr	r2, [pc, #172]	@ (8005abc <TIM_OC4_SetConfig+0x114>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d003      	beq.n	8005a1c <TIM_OC4_SetConfig+0x74>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a2a      	ldr	r2, [pc, #168]	@ (8005ac0 <TIM_OC4_SetConfig+0x118>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d10d      	bne.n	8005a38 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005a22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	031b      	lsls	r3, r3, #12
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4a1f      	ldr	r2, [pc, #124]	@ (8005ab8 <TIM_OC4_SetConfig+0x110>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d013      	beq.n	8005a68 <TIM_OC4_SetConfig+0xc0>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4a1e      	ldr	r2, [pc, #120]	@ (8005abc <TIM_OC4_SetConfig+0x114>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d00f      	beq.n	8005a68 <TIM_OC4_SetConfig+0xc0>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a1e      	ldr	r2, [pc, #120]	@ (8005ac4 <TIM_OC4_SetConfig+0x11c>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d00b      	beq.n	8005a68 <TIM_OC4_SetConfig+0xc0>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	4a1d      	ldr	r2, [pc, #116]	@ (8005ac8 <TIM_OC4_SetConfig+0x120>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d007      	beq.n	8005a68 <TIM_OC4_SetConfig+0xc0>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a1c      	ldr	r2, [pc, #112]	@ (8005acc <TIM_OC4_SetConfig+0x124>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d003      	beq.n	8005a68 <TIM_OC4_SetConfig+0xc0>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a17      	ldr	r2, [pc, #92]	@ (8005ac0 <TIM_OC4_SetConfig+0x118>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d113      	bne.n	8005a90 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005a6e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005a76:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	695b      	ldr	r3, [r3, #20]
 8005a7c:	019b      	lsls	r3, r3, #6
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	699b      	ldr	r3, [r3, #24]
 8005a88:	019b      	lsls	r3, r3, #6
 8005a8a:	693a      	ldr	r2, [r7, #16]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	685a      	ldr	r2, [r3, #4]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	621a      	str	r2, [r3, #32]
}
 8005aaa:	bf00      	nop
 8005aac:	371c      	adds	r7, #28
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	40012c00 	.word	0x40012c00
 8005abc:	40013400 	.word	0x40013400
 8005ac0:	40015000 	.word	0x40015000
 8005ac4:	40014000 	.word	0x40014000
 8005ac8:	40014400 	.word	0x40014400
 8005acc:	40014800 	.word	0x40014800

08005ad0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ad0:	b480      	push	{r7}
 8005ad2:	b087      	sub	sp, #28
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a1b      	ldr	r3, [r3, #32]
 8005ae4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005afe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005b14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	041b      	lsls	r3, r3, #16
 8005b1c:	693a      	ldr	r2, [r7, #16]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	4a19      	ldr	r2, [pc, #100]	@ (8005b8c <TIM_OC5_SetConfig+0xbc>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d013      	beq.n	8005b52 <TIM_OC5_SetConfig+0x82>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4a18      	ldr	r2, [pc, #96]	@ (8005b90 <TIM_OC5_SetConfig+0xc0>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d00f      	beq.n	8005b52 <TIM_OC5_SetConfig+0x82>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	4a17      	ldr	r2, [pc, #92]	@ (8005b94 <TIM_OC5_SetConfig+0xc4>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d00b      	beq.n	8005b52 <TIM_OC5_SetConfig+0x82>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a16      	ldr	r2, [pc, #88]	@ (8005b98 <TIM_OC5_SetConfig+0xc8>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d007      	beq.n	8005b52 <TIM_OC5_SetConfig+0x82>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a15      	ldr	r2, [pc, #84]	@ (8005b9c <TIM_OC5_SetConfig+0xcc>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d003      	beq.n	8005b52 <TIM_OC5_SetConfig+0x82>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	4a14      	ldr	r2, [pc, #80]	@ (8005ba0 <TIM_OC5_SetConfig+0xd0>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d109      	bne.n	8005b66 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b58:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	021b      	lsls	r3, r3, #8
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	685a      	ldr	r2, [r3, #4]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	621a      	str	r2, [r3, #32]
}
 8005b80:	bf00      	nop
 8005b82:	371c      	adds	r7, #28
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr
 8005b8c:	40012c00 	.word	0x40012c00
 8005b90:	40013400 	.word	0x40013400
 8005b94:	40014000 	.word	0x40014000
 8005b98:	40014400 	.word	0x40014400
 8005b9c:	40014800 	.word	0x40014800
 8005ba0:	40015000 	.word	0x40015000

08005ba4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b087      	sub	sp, #28
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a1b      	ldr	r3, [r3, #32]
 8005bb8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005bd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	021b      	lsls	r3, r3, #8
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	4313      	orrs	r3, r2
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005bea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	051b      	lsls	r3, r3, #20
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a1a      	ldr	r2, [pc, #104]	@ (8005c64 <TIM_OC6_SetConfig+0xc0>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d013      	beq.n	8005c28 <TIM_OC6_SetConfig+0x84>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a19      	ldr	r2, [pc, #100]	@ (8005c68 <TIM_OC6_SetConfig+0xc4>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d00f      	beq.n	8005c28 <TIM_OC6_SetConfig+0x84>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a18      	ldr	r2, [pc, #96]	@ (8005c6c <TIM_OC6_SetConfig+0xc8>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d00b      	beq.n	8005c28 <TIM_OC6_SetConfig+0x84>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	4a17      	ldr	r2, [pc, #92]	@ (8005c70 <TIM_OC6_SetConfig+0xcc>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d007      	beq.n	8005c28 <TIM_OC6_SetConfig+0x84>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a16      	ldr	r2, [pc, #88]	@ (8005c74 <TIM_OC6_SetConfig+0xd0>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d003      	beq.n	8005c28 <TIM_OC6_SetConfig+0x84>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a15      	ldr	r2, [pc, #84]	@ (8005c78 <TIM_OC6_SetConfig+0xd4>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d109      	bne.n	8005c3c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	695b      	ldr	r3, [r3, #20]
 8005c34:	029b      	lsls	r3, r3, #10
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	621a      	str	r2, [r3, #32]
}
 8005c56:	bf00      	nop
 8005c58:	371c      	adds	r7, #28
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	40012c00 	.word	0x40012c00
 8005c68:	40013400 	.word	0x40013400
 8005c6c:	40014000 	.word	0x40014000
 8005c70:	40014400 	.word	0x40014400
 8005c74:	40014800 	.word	0x40014800
 8005c78:	40015000 	.word	0x40015000

08005c7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b087      	sub	sp, #28
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6a1b      	ldr	r3, [r3, #32]
 8005c8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	f023 0201 	bic.w	r2, r3, #1
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	699b      	ldr	r3, [r3, #24]
 8005c9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ca6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	011b      	lsls	r3, r3, #4
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	f023 030a 	bic.w	r3, r3, #10
 8005cb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cba:	697a      	ldr	r2, [r7, #20]
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	621a      	str	r2, [r3, #32]
}
 8005cce:	bf00      	nop
 8005cd0:	371c      	adds	r7, #28
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b087      	sub	sp, #28
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	60f8      	str	r0, [r7, #12]
 8005ce2:	60b9      	str	r1, [r7, #8]
 8005ce4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6a1b      	ldr	r3, [r3, #32]
 8005cf0:	f023 0210 	bic.w	r2, r3, #16
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	699b      	ldr	r3, [r3, #24]
 8005cfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	031b      	lsls	r3, r3, #12
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005d16:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	011b      	lsls	r3, r3, #4
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	697a      	ldr	r2, [r7, #20]
 8005d2c:	621a      	str	r2, [r3, #32]
}
 8005d2e:	bf00      	nop
 8005d30:	371c      	adds	r7, #28
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b085      	sub	sp, #20
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
 8005d42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005d50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d56:	683a      	ldr	r2, [r7, #0]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	f043 0307 	orr.w	r3, r3, #7
 8005d60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	609a      	str	r2, [r3, #8]
}
 8005d68:	bf00      	nop
 8005d6a:	3714      	adds	r7, #20
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b087      	sub	sp, #28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
 8005d80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	021a      	lsls	r2, r3, #8
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	431a      	orrs	r2, r3
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	697a      	ldr	r2, [r7, #20]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	609a      	str	r2, [r3, #8]
}
 8005da8:	bf00      	nop
 8005daa:	371c      	adds	r7, #28
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b087      	sub	sp, #28
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	f003 031f 	and.w	r3, r3, #31
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	6a1a      	ldr	r2, [r3, #32]
 8005dd2:	697b      	ldr	r3, [r7, #20]
 8005dd4:	43db      	mvns	r3, r3
 8005dd6:	401a      	ands	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	6a1a      	ldr	r2, [r3, #32]
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	f003 031f 	and.w	r3, r3, #31
 8005de6:	6879      	ldr	r1, [r7, #4]
 8005de8:	fa01 f303 	lsl.w	r3, r1, r3
 8005dec:	431a      	orrs	r2, r3
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	621a      	str	r2, [r3, #32]
}
 8005df2:	bf00      	nop
 8005df4:	371c      	adds	r7, #28
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
	...

08005e00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d101      	bne.n	8005e18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e14:	2302      	movs	r3, #2
 8005e16:	e074      	b.n	8005f02 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2202      	movs	r2, #2
 8005e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a34      	ldr	r2, [pc, #208]	@ (8005f10 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d009      	beq.n	8005e56 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a33      	ldr	r2, [pc, #204]	@ (8005f14 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d004      	beq.n	8005e56 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a31      	ldr	r2, [pc, #196]	@ (8005f18 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d108      	bne.n	8005e68 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005e5c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005e6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a21      	ldr	r2, [pc, #132]	@ (8005f10 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d022      	beq.n	8005ed6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e98:	d01d      	beq.n	8005ed6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a1f      	ldr	r2, [pc, #124]	@ (8005f1c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d018      	beq.n	8005ed6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8005f20 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d013      	beq.n	8005ed6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a1c      	ldr	r2, [pc, #112]	@ (8005f24 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d00e      	beq.n	8005ed6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a15      	ldr	r2, [pc, #84]	@ (8005f14 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d009      	beq.n	8005ed6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a18      	ldr	r2, [pc, #96]	@ (8005f28 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d004      	beq.n	8005ed6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a11      	ldr	r2, [pc, #68]	@ (8005f18 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d10c      	bne.n	8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005edc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3714      	adds	r7, #20
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	40012c00 	.word	0x40012c00
 8005f14:	40013400 	.word	0x40013400
 8005f18:	40015000 	.word	0x40015000
 8005f1c:	40000400 	.word	0x40000400
 8005f20:	40000800 	.word	0x40000800
 8005f24:	40000c00 	.word	0x40000c00
 8005f28:	40014000 	.word	0x40014000

08005f2c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f34:	bf00      	nop
 8005f36:	370c      	adds	r7, #12
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr

08005f40 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f5c:	bf00      	nop
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b083      	sub	sp, #12
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b083      	sub	sp, #12
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005f84:	bf00      	nop
 8005f86:	370c      	adds	r7, #12
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005f98:	bf00      	nop
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005fac:	bf00      	nop
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d101      	bne.n	8005fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e042      	b.n	8006050 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d106      	bne.n	8005fe2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f7fc fde5 	bl	8002bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2224      	movs	r2, #36	@ 0x24
 8005fe6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f022 0201 	bic.w	r2, r2, #1
 8005ff8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d002      	beq.n	8006008 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 fb24 	bl	8006650 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 f825 	bl	8006058 <UART_SetConfig>
 800600e:	4603      	mov	r3, r0
 8006010:	2b01      	cmp	r3, #1
 8006012:	d101      	bne.n	8006018 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e01b      	b.n	8006050 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	685a      	ldr	r2, [r3, #4]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006026:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	689a      	ldr	r2, [r3, #8]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006036:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f042 0201 	orr.w	r2, r2, #1
 8006046:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 fba3 	bl	8006794 <UART_CheckIdleState>
 800604e:	4603      	mov	r3, r0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006058:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800605c:	b08c      	sub	sp, #48	@ 0x30
 800605e:	af00      	add	r7, sp, #0
 8006060:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006062:	2300      	movs	r3, #0
 8006064:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006068:	697b      	ldr	r3, [r7, #20]
 800606a:	689a      	ldr	r2, [r3, #8]
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	431a      	orrs	r2, r3
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	431a      	orrs	r2, r3
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	69db      	ldr	r3, [r3, #28]
 800607c:	4313      	orrs	r3, r2
 800607e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	4baa      	ldr	r3, [pc, #680]	@ (8006330 <UART_SetConfig+0x2d8>)
 8006088:	4013      	ands	r3, r2
 800608a:	697a      	ldr	r2, [r7, #20]
 800608c:	6812      	ldr	r2, [r2, #0]
 800608e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006090:	430b      	orrs	r3, r1
 8006092:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	68da      	ldr	r2, [r3, #12]
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	430a      	orrs	r2, r1
 80060a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a9f      	ldr	r2, [pc, #636]	@ (8006334 <UART_SetConfig+0x2dc>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d004      	beq.n	80060c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	6a1b      	ldr	r3, [r3, #32]
 80060be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060c0:	4313      	orrs	r3, r2
 80060c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80060ce:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	6812      	ldr	r2, [r2, #0]
 80060d6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80060d8:	430b      	orrs	r3, r1
 80060da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060e2:	f023 010f 	bic.w	r1, r3, #15
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	430a      	orrs	r2, r1
 80060f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a90      	ldr	r2, [pc, #576]	@ (8006338 <UART_SetConfig+0x2e0>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d125      	bne.n	8006148 <UART_SetConfig+0xf0>
 80060fc:	4b8f      	ldr	r3, [pc, #572]	@ (800633c <UART_SetConfig+0x2e4>)
 80060fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006102:	f003 0303 	and.w	r3, r3, #3
 8006106:	2b03      	cmp	r3, #3
 8006108:	d81a      	bhi.n	8006140 <UART_SetConfig+0xe8>
 800610a:	a201      	add	r2, pc, #4	@ (adr r2, 8006110 <UART_SetConfig+0xb8>)
 800610c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006110:	08006121 	.word	0x08006121
 8006114:	08006131 	.word	0x08006131
 8006118:	08006129 	.word	0x08006129
 800611c:	08006139 	.word	0x08006139
 8006120:	2301      	movs	r3, #1
 8006122:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006126:	e116      	b.n	8006356 <UART_SetConfig+0x2fe>
 8006128:	2302      	movs	r3, #2
 800612a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800612e:	e112      	b.n	8006356 <UART_SetConfig+0x2fe>
 8006130:	2304      	movs	r3, #4
 8006132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006136:	e10e      	b.n	8006356 <UART_SetConfig+0x2fe>
 8006138:	2308      	movs	r3, #8
 800613a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800613e:	e10a      	b.n	8006356 <UART_SetConfig+0x2fe>
 8006140:	2310      	movs	r3, #16
 8006142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006146:	e106      	b.n	8006356 <UART_SetConfig+0x2fe>
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a7c      	ldr	r2, [pc, #496]	@ (8006340 <UART_SetConfig+0x2e8>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d138      	bne.n	80061c4 <UART_SetConfig+0x16c>
 8006152:	4b7a      	ldr	r3, [pc, #488]	@ (800633c <UART_SetConfig+0x2e4>)
 8006154:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006158:	f003 030c 	and.w	r3, r3, #12
 800615c:	2b0c      	cmp	r3, #12
 800615e:	d82d      	bhi.n	80061bc <UART_SetConfig+0x164>
 8006160:	a201      	add	r2, pc, #4	@ (adr r2, 8006168 <UART_SetConfig+0x110>)
 8006162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006166:	bf00      	nop
 8006168:	0800619d 	.word	0x0800619d
 800616c:	080061bd 	.word	0x080061bd
 8006170:	080061bd 	.word	0x080061bd
 8006174:	080061bd 	.word	0x080061bd
 8006178:	080061ad 	.word	0x080061ad
 800617c:	080061bd 	.word	0x080061bd
 8006180:	080061bd 	.word	0x080061bd
 8006184:	080061bd 	.word	0x080061bd
 8006188:	080061a5 	.word	0x080061a5
 800618c:	080061bd 	.word	0x080061bd
 8006190:	080061bd 	.word	0x080061bd
 8006194:	080061bd 	.word	0x080061bd
 8006198:	080061b5 	.word	0x080061b5
 800619c:	2300      	movs	r3, #0
 800619e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061a2:	e0d8      	b.n	8006356 <UART_SetConfig+0x2fe>
 80061a4:	2302      	movs	r3, #2
 80061a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061aa:	e0d4      	b.n	8006356 <UART_SetConfig+0x2fe>
 80061ac:	2304      	movs	r3, #4
 80061ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061b2:	e0d0      	b.n	8006356 <UART_SetConfig+0x2fe>
 80061b4:	2308      	movs	r3, #8
 80061b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061ba:	e0cc      	b.n	8006356 <UART_SetConfig+0x2fe>
 80061bc:	2310      	movs	r3, #16
 80061be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061c2:	e0c8      	b.n	8006356 <UART_SetConfig+0x2fe>
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a5e      	ldr	r2, [pc, #376]	@ (8006344 <UART_SetConfig+0x2ec>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d125      	bne.n	800621a <UART_SetConfig+0x1c2>
 80061ce:	4b5b      	ldr	r3, [pc, #364]	@ (800633c <UART_SetConfig+0x2e4>)
 80061d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061d4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80061d8:	2b30      	cmp	r3, #48	@ 0x30
 80061da:	d016      	beq.n	800620a <UART_SetConfig+0x1b2>
 80061dc:	2b30      	cmp	r3, #48	@ 0x30
 80061de:	d818      	bhi.n	8006212 <UART_SetConfig+0x1ba>
 80061e0:	2b20      	cmp	r3, #32
 80061e2:	d00a      	beq.n	80061fa <UART_SetConfig+0x1a2>
 80061e4:	2b20      	cmp	r3, #32
 80061e6:	d814      	bhi.n	8006212 <UART_SetConfig+0x1ba>
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d002      	beq.n	80061f2 <UART_SetConfig+0x19a>
 80061ec:	2b10      	cmp	r3, #16
 80061ee:	d008      	beq.n	8006202 <UART_SetConfig+0x1aa>
 80061f0:	e00f      	b.n	8006212 <UART_SetConfig+0x1ba>
 80061f2:	2300      	movs	r3, #0
 80061f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061f8:	e0ad      	b.n	8006356 <UART_SetConfig+0x2fe>
 80061fa:	2302      	movs	r3, #2
 80061fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006200:	e0a9      	b.n	8006356 <UART_SetConfig+0x2fe>
 8006202:	2304      	movs	r3, #4
 8006204:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006208:	e0a5      	b.n	8006356 <UART_SetConfig+0x2fe>
 800620a:	2308      	movs	r3, #8
 800620c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006210:	e0a1      	b.n	8006356 <UART_SetConfig+0x2fe>
 8006212:	2310      	movs	r3, #16
 8006214:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006218:	e09d      	b.n	8006356 <UART_SetConfig+0x2fe>
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a4a      	ldr	r2, [pc, #296]	@ (8006348 <UART_SetConfig+0x2f0>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d125      	bne.n	8006270 <UART_SetConfig+0x218>
 8006224:	4b45      	ldr	r3, [pc, #276]	@ (800633c <UART_SetConfig+0x2e4>)
 8006226:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800622a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800622e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006230:	d016      	beq.n	8006260 <UART_SetConfig+0x208>
 8006232:	2bc0      	cmp	r3, #192	@ 0xc0
 8006234:	d818      	bhi.n	8006268 <UART_SetConfig+0x210>
 8006236:	2b80      	cmp	r3, #128	@ 0x80
 8006238:	d00a      	beq.n	8006250 <UART_SetConfig+0x1f8>
 800623a:	2b80      	cmp	r3, #128	@ 0x80
 800623c:	d814      	bhi.n	8006268 <UART_SetConfig+0x210>
 800623e:	2b00      	cmp	r3, #0
 8006240:	d002      	beq.n	8006248 <UART_SetConfig+0x1f0>
 8006242:	2b40      	cmp	r3, #64	@ 0x40
 8006244:	d008      	beq.n	8006258 <UART_SetConfig+0x200>
 8006246:	e00f      	b.n	8006268 <UART_SetConfig+0x210>
 8006248:	2300      	movs	r3, #0
 800624a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800624e:	e082      	b.n	8006356 <UART_SetConfig+0x2fe>
 8006250:	2302      	movs	r3, #2
 8006252:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006256:	e07e      	b.n	8006356 <UART_SetConfig+0x2fe>
 8006258:	2304      	movs	r3, #4
 800625a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800625e:	e07a      	b.n	8006356 <UART_SetConfig+0x2fe>
 8006260:	2308      	movs	r3, #8
 8006262:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006266:	e076      	b.n	8006356 <UART_SetConfig+0x2fe>
 8006268:	2310      	movs	r3, #16
 800626a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800626e:	e072      	b.n	8006356 <UART_SetConfig+0x2fe>
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a35      	ldr	r2, [pc, #212]	@ (800634c <UART_SetConfig+0x2f4>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d12a      	bne.n	80062d0 <UART_SetConfig+0x278>
 800627a:	4b30      	ldr	r3, [pc, #192]	@ (800633c <UART_SetConfig+0x2e4>)
 800627c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006280:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006284:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006288:	d01a      	beq.n	80062c0 <UART_SetConfig+0x268>
 800628a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800628e:	d81b      	bhi.n	80062c8 <UART_SetConfig+0x270>
 8006290:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006294:	d00c      	beq.n	80062b0 <UART_SetConfig+0x258>
 8006296:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800629a:	d815      	bhi.n	80062c8 <UART_SetConfig+0x270>
 800629c:	2b00      	cmp	r3, #0
 800629e:	d003      	beq.n	80062a8 <UART_SetConfig+0x250>
 80062a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062a4:	d008      	beq.n	80062b8 <UART_SetConfig+0x260>
 80062a6:	e00f      	b.n	80062c8 <UART_SetConfig+0x270>
 80062a8:	2300      	movs	r3, #0
 80062aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062ae:	e052      	b.n	8006356 <UART_SetConfig+0x2fe>
 80062b0:	2302      	movs	r3, #2
 80062b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062b6:	e04e      	b.n	8006356 <UART_SetConfig+0x2fe>
 80062b8:	2304      	movs	r3, #4
 80062ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062be:	e04a      	b.n	8006356 <UART_SetConfig+0x2fe>
 80062c0:	2308      	movs	r3, #8
 80062c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062c6:	e046      	b.n	8006356 <UART_SetConfig+0x2fe>
 80062c8:	2310      	movs	r3, #16
 80062ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062ce:	e042      	b.n	8006356 <UART_SetConfig+0x2fe>
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	4a17      	ldr	r2, [pc, #92]	@ (8006334 <UART_SetConfig+0x2dc>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d13a      	bne.n	8006350 <UART_SetConfig+0x2f8>
 80062da:	4b18      	ldr	r3, [pc, #96]	@ (800633c <UART_SetConfig+0x2e4>)
 80062dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062e0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80062e4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80062e8:	d01a      	beq.n	8006320 <UART_SetConfig+0x2c8>
 80062ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80062ee:	d81b      	bhi.n	8006328 <UART_SetConfig+0x2d0>
 80062f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062f4:	d00c      	beq.n	8006310 <UART_SetConfig+0x2b8>
 80062f6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062fa:	d815      	bhi.n	8006328 <UART_SetConfig+0x2d0>
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d003      	beq.n	8006308 <UART_SetConfig+0x2b0>
 8006300:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006304:	d008      	beq.n	8006318 <UART_SetConfig+0x2c0>
 8006306:	e00f      	b.n	8006328 <UART_SetConfig+0x2d0>
 8006308:	2300      	movs	r3, #0
 800630a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800630e:	e022      	b.n	8006356 <UART_SetConfig+0x2fe>
 8006310:	2302      	movs	r3, #2
 8006312:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006316:	e01e      	b.n	8006356 <UART_SetConfig+0x2fe>
 8006318:	2304      	movs	r3, #4
 800631a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800631e:	e01a      	b.n	8006356 <UART_SetConfig+0x2fe>
 8006320:	2308      	movs	r3, #8
 8006322:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006326:	e016      	b.n	8006356 <UART_SetConfig+0x2fe>
 8006328:	2310      	movs	r3, #16
 800632a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800632e:	e012      	b.n	8006356 <UART_SetConfig+0x2fe>
 8006330:	cfff69f3 	.word	0xcfff69f3
 8006334:	40008000 	.word	0x40008000
 8006338:	40013800 	.word	0x40013800
 800633c:	40021000 	.word	0x40021000
 8006340:	40004400 	.word	0x40004400
 8006344:	40004800 	.word	0x40004800
 8006348:	40004c00 	.word	0x40004c00
 800634c:	40005000 	.word	0x40005000
 8006350:	2310      	movs	r3, #16
 8006352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4aae      	ldr	r2, [pc, #696]	@ (8006614 <UART_SetConfig+0x5bc>)
 800635c:	4293      	cmp	r3, r2
 800635e:	f040 8097 	bne.w	8006490 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006362:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006366:	2b08      	cmp	r3, #8
 8006368:	d823      	bhi.n	80063b2 <UART_SetConfig+0x35a>
 800636a:	a201      	add	r2, pc, #4	@ (adr r2, 8006370 <UART_SetConfig+0x318>)
 800636c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006370:	08006395 	.word	0x08006395
 8006374:	080063b3 	.word	0x080063b3
 8006378:	0800639d 	.word	0x0800639d
 800637c:	080063b3 	.word	0x080063b3
 8006380:	080063a3 	.word	0x080063a3
 8006384:	080063b3 	.word	0x080063b3
 8006388:	080063b3 	.word	0x080063b3
 800638c:	080063b3 	.word	0x080063b3
 8006390:	080063ab 	.word	0x080063ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006394:	f7fd fe4a 	bl	800402c <HAL_RCC_GetPCLK1Freq>
 8006398:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800639a:	e010      	b.n	80063be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800639c:	4b9e      	ldr	r3, [pc, #632]	@ (8006618 <UART_SetConfig+0x5c0>)
 800639e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80063a0:	e00d      	b.n	80063be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063a2:	f7fd fdd5 	bl	8003f50 <HAL_RCC_GetSysClockFreq>
 80063a6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80063a8:	e009      	b.n	80063be <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80063b0:	e005      	b.n	80063be <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80063b2:	2300      	movs	r3, #0
 80063b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80063bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80063be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f000 8130 	beq.w	8006626 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ca:	4a94      	ldr	r2, [pc, #592]	@ (800661c <UART_SetConfig+0x5c4>)
 80063cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063d0:	461a      	mov	r2, r3
 80063d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80063d8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	685a      	ldr	r2, [r3, #4]
 80063de:	4613      	mov	r3, r2
 80063e0:	005b      	lsls	r3, r3, #1
 80063e2:	4413      	add	r3, r2
 80063e4:	69ba      	ldr	r2, [r7, #24]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d305      	bcc.n	80063f6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063f0:	69ba      	ldr	r2, [r7, #24]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d903      	bls.n	80063fe <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80063f6:	2301      	movs	r3, #1
 80063f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80063fc:	e113      	b.n	8006626 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006400:	2200      	movs	r2, #0
 8006402:	60bb      	str	r3, [r7, #8]
 8006404:	60fa      	str	r2, [r7, #12]
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800640a:	4a84      	ldr	r2, [pc, #528]	@ (800661c <UART_SetConfig+0x5c4>)
 800640c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006410:	b29b      	uxth	r3, r3
 8006412:	2200      	movs	r2, #0
 8006414:	603b      	str	r3, [r7, #0]
 8006416:	607a      	str	r2, [r7, #4]
 8006418:	e9d7 2300 	ldrd	r2, r3, [r7]
 800641c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006420:	f7fa fba0 	bl	8000b64 <__aeabi_uldivmod>
 8006424:	4602      	mov	r2, r0
 8006426:	460b      	mov	r3, r1
 8006428:	4610      	mov	r0, r2
 800642a:	4619      	mov	r1, r3
 800642c:	f04f 0200 	mov.w	r2, #0
 8006430:	f04f 0300 	mov.w	r3, #0
 8006434:	020b      	lsls	r3, r1, #8
 8006436:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800643a:	0202      	lsls	r2, r0, #8
 800643c:	6979      	ldr	r1, [r7, #20]
 800643e:	6849      	ldr	r1, [r1, #4]
 8006440:	0849      	lsrs	r1, r1, #1
 8006442:	2000      	movs	r0, #0
 8006444:	460c      	mov	r4, r1
 8006446:	4605      	mov	r5, r0
 8006448:	eb12 0804 	adds.w	r8, r2, r4
 800644c:	eb43 0905 	adc.w	r9, r3, r5
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	2200      	movs	r2, #0
 8006456:	469a      	mov	sl, r3
 8006458:	4693      	mov	fp, r2
 800645a:	4652      	mov	r2, sl
 800645c:	465b      	mov	r3, fp
 800645e:	4640      	mov	r0, r8
 8006460:	4649      	mov	r1, r9
 8006462:	f7fa fb7f 	bl	8000b64 <__aeabi_uldivmod>
 8006466:	4602      	mov	r2, r0
 8006468:	460b      	mov	r3, r1
 800646a:	4613      	mov	r3, r2
 800646c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800646e:	6a3b      	ldr	r3, [r7, #32]
 8006470:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006474:	d308      	bcc.n	8006488 <UART_SetConfig+0x430>
 8006476:	6a3b      	ldr	r3, [r7, #32]
 8006478:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800647c:	d204      	bcs.n	8006488 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	6a3a      	ldr	r2, [r7, #32]
 8006484:	60da      	str	r2, [r3, #12]
 8006486:	e0ce      	b.n	8006626 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006488:	2301      	movs	r3, #1
 800648a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800648e:	e0ca      	b.n	8006626 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	69db      	ldr	r3, [r3, #28]
 8006494:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006498:	d166      	bne.n	8006568 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800649a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800649e:	2b08      	cmp	r3, #8
 80064a0:	d827      	bhi.n	80064f2 <UART_SetConfig+0x49a>
 80064a2:	a201      	add	r2, pc, #4	@ (adr r2, 80064a8 <UART_SetConfig+0x450>)
 80064a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a8:	080064cd 	.word	0x080064cd
 80064ac:	080064d5 	.word	0x080064d5
 80064b0:	080064dd 	.word	0x080064dd
 80064b4:	080064f3 	.word	0x080064f3
 80064b8:	080064e3 	.word	0x080064e3
 80064bc:	080064f3 	.word	0x080064f3
 80064c0:	080064f3 	.word	0x080064f3
 80064c4:	080064f3 	.word	0x080064f3
 80064c8:	080064eb 	.word	0x080064eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064cc:	f7fd fdae 	bl	800402c <HAL_RCC_GetPCLK1Freq>
 80064d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064d2:	e014      	b.n	80064fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064d4:	f7fd fdc0 	bl	8004058 <HAL_RCC_GetPCLK2Freq>
 80064d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064da:	e010      	b.n	80064fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064dc:	4b4e      	ldr	r3, [pc, #312]	@ (8006618 <UART_SetConfig+0x5c0>)
 80064de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80064e0:	e00d      	b.n	80064fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064e2:	f7fd fd35 	bl	8003f50 <HAL_RCC_GetSysClockFreq>
 80064e6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064e8:	e009      	b.n	80064fe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80064f0:	e005      	b.n	80064fe <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80064f2:	2300      	movs	r3, #0
 80064f4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80064fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006500:	2b00      	cmp	r3, #0
 8006502:	f000 8090 	beq.w	8006626 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006506:	697b      	ldr	r3, [r7, #20]
 8006508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800650a:	4a44      	ldr	r2, [pc, #272]	@ (800661c <UART_SetConfig+0x5c4>)
 800650c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006510:	461a      	mov	r2, r3
 8006512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006514:	fbb3 f3f2 	udiv	r3, r3, r2
 8006518:	005a      	lsls	r2, r3, #1
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	085b      	lsrs	r3, r3, #1
 8006520:	441a      	add	r2, r3
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	fbb2 f3f3 	udiv	r3, r2, r3
 800652a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800652c:	6a3b      	ldr	r3, [r7, #32]
 800652e:	2b0f      	cmp	r3, #15
 8006530:	d916      	bls.n	8006560 <UART_SetConfig+0x508>
 8006532:	6a3b      	ldr	r3, [r7, #32]
 8006534:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006538:	d212      	bcs.n	8006560 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800653a:	6a3b      	ldr	r3, [r7, #32]
 800653c:	b29b      	uxth	r3, r3
 800653e:	f023 030f 	bic.w	r3, r3, #15
 8006542:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006544:	6a3b      	ldr	r3, [r7, #32]
 8006546:	085b      	lsrs	r3, r3, #1
 8006548:	b29b      	uxth	r3, r3
 800654a:	f003 0307 	and.w	r3, r3, #7
 800654e:	b29a      	uxth	r2, r3
 8006550:	8bfb      	ldrh	r3, [r7, #30]
 8006552:	4313      	orrs	r3, r2
 8006554:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	8bfa      	ldrh	r2, [r7, #30]
 800655c:	60da      	str	r2, [r3, #12]
 800655e:	e062      	b.n	8006626 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006566:	e05e      	b.n	8006626 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006568:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800656c:	2b08      	cmp	r3, #8
 800656e:	d828      	bhi.n	80065c2 <UART_SetConfig+0x56a>
 8006570:	a201      	add	r2, pc, #4	@ (adr r2, 8006578 <UART_SetConfig+0x520>)
 8006572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006576:	bf00      	nop
 8006578:	0800659d 	.word	0x0800659d
 800657c:	080065a5 	.word	0x080065a5
 8006580:	080065ad 	.word	0x080065ad
 8006584:	080065c3 	.word	0x080065c3
 8006588:	080065b3 	.word	0x080065b3
 800658c:	080065c3 	.word	0x080065c3
 8006590:	080065c3 	.word	0x080065c3
 8006594:	080065c3 	.word	0x080065c3
 8006598:	080065bb 	.word	0x080065bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800659c:	f7fd fd46 	bl	800402c <HAL_RCC_GetPCLK1Freq>
 80065a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80065a2:	e014      	b.n	80065ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065a4:	f7fd fd58 	bl	8004058 <HAL_RCC_GetPCLK2Freq>
 80065a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80065aa:	e010      	b.n	80065ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065ac:	4b1a      	ldr	r3, [pc, #104]	@ (8006618 <UART_SetConfig+0x5c0>)
 80065ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80065b0:	e00d      	b.n	80065ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065b2:	f7fd fccd 	bl	8003f50 <HAL_RCC_GetSysClockFreq>
 80065b6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80065b8:	e009      	b.n	80065ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065be:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80065c0:	e005      	b.n	80065ce <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80065c2:	2300      	movs	r3, #0
 80065c4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80065cc:	bf00      	nop
    }

    if (pclk != 0U)
 80065ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d028      	beq.n	8006626 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065d8:	4a10      	ldr	r2, [pc, #64]	@ (800661c <UART_SetConfig+0x5c4>)
 80065da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065de:	461a      	mov	r2, r3
 80065e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	085b      	lsrs	r3, r3, #1
 80065ec:	441a      	add	r2, r3
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80065f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065f8:	6a3b      	ldr	r3, [r7, #32]
 80065fa:	2b0f      	cmp	r3, #15
 80065fc:	d910      	bls.n	8006620 <UART_SetConfig+0x5c8>
 80065fe:	6a3b      	ldr	r3, [r7, #32]
 8006600:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006604:	d20c      	bcs.n	8006620 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006606:	6a3b      	ldr	r3, [r7, #32]
 8006608:	b29a      	uxth	r2, r3
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	60da      	str	r2, [r3, #12]
 8006610:	e009      	b.n	8006626 <UART_SetConfig+0x5ce>
 8006612:	bf00      	nop
 8006614:	40008000 	.word	0x40008000
 8006618:	00f42400 	.word	0x00f42400
 800661c:	08006d40 	.word	0x08006d40
      }
      else
      {
        ret = HAL_ERROR;
 8006620:	2301      	movs	r3, #1
 8006622:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	2201      	movs	r2, #1
 800662a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	2201      	movs	r2, #1
 8006632:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	2200      	movs	r2, #0
 800663a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	2200      	movs	r2, #0
 8006640:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006642:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006646:	4618      	mov	r0, r3
 8006648:	3730      	adds	r7, #48	@ 0x30
 800664a:	46bd      	mov	sp, r7
 800664c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006650 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800665c:	f003 0308 	and.w	r3, r3, #8
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00a      	beq.n	800667a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	430a      	orrs	r2, r1
 8006678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00a      	beq.n	800669c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	430a      	orrs	r2, r1
 800669a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066a0:	f003 0302 	and.w	r3, r3, #2
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00a      	beq.n	80066be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	430a      	orrs	r2, r1
 80066bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c2:	f003 0304 	and.w	r3, r3, #4
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00a      	beq.n	80066e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	430a      	orrs	r2, r1
 80066de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e4:	f003 0310 	and.w	r3, r3, #16
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00a      	beq.n	8006702 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	430a      	orrs	r2, r1
 8006700:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006706:	f003 0320 	and.w	r3, r3, #32
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00a      	beq.n	8006724 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	430a      	orrs	r2, r1
 8006722:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800672c:	2b00      	cmp	r3, #0
 800672e:	d01a      	beq.n	8006766 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	430a      	orrs	r2, r1
 8006744:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800674a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800674e:	d10a      	bne.n	8006766 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	430a      	orrs	r2, r1
 8006764:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800676a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00a      	beq.n	8006788 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	685b      	ldr	r3, [r3, #4]
 8006778:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	430a      	orrs	r2, r1
 8006786:	605a      	str	r2, [r3, #4]
  }
}
 8006788:	bf00      	nop
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b098      	sub	sp, #96	@ 0x60
 8006798:	af02      	add	r7, sp, #8
 800679a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80067a4:	f7fc fc04 	bl	8002fb0 <HAL_GetTick>
 80067a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0308 	and.w	r3, r3, #8
 80067b4:	2b08      	cmp	r3, #8
 80067b6:	d12f      	bne.n	8006818 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067c0:	2200      	movs	r2, #0
 80067c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80067c6:	6878      	ldr	r0, [r7, #4]
 80067c8:	f000 f88e 	bl	80068e8 <UART_WaitOnFlagUntilTimeout>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d022      	beq.n	8006818 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067da:	e853 3f00 	ldrex	r3, [r3]
 80067de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80067e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	461a      	mov	r2, r3
 80067ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80067f2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80067f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067f8:	e841 2300 	strex	r3, r2, [r1]
 80067fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80067fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006800:	2b00      	cmp	r3, #0
 8006802:	d1e6      	bne.n	80067d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2220      	movs	r2, #32
 8006808:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006814:	2303      	movs	r3, #3
 8006816:	e063      	b.n	80068e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 0304 	and.w	r3, r3, #4
 8006822:	2b04      	cmp	r3, #4
 8006824:	d149      	bne.n	80068ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006826:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800682a:	9300      	str	r3, [sp, #0]
 800682c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800682e:	2200      	movs	r2, #0
 8006830:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 f857 	bl	80068e8 <UART_WaitOnFlagUntilTimeout>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d03c      	beq.n	80068ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006848:	e853 3f00 	ldrex	r3, [r3]
 800684c:	623b      	str	r3, [r7, #32]
   return(result);
 800684e:	6a3b      	ldr	r3, [r7, #32]
 8006850:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006854:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	461a      	mov	r2, r3
 800685c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800685e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006860:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006862:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006864:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006866:	e841 2300 	strex	r3, r2, [r1]
 800686a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800686c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1e6      	bne.n	8006840 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	3308      	adds	r3, #8
 8006878:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	e853 3f00 	ldrex	r3, [r3]
 8006880:	60fb      	str	r3, [r7, #12]
   return(result);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f023 0301 	bic.w	r3, r3, #1
 8006888:	64bb      	str	r3, [r7, #72]	@ 0x48
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	3308      	adds	r3, #8
 8006890:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006892:	61fa      	str	r2, [r7, #28]
 8006894:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006896:	69b9      	ldr	r1, [r7, #24]
 8006898:	69fa      	ldr	r2, [r7, #28]
 800689a:	e841 2300 	strex	r3, r2, [r1]
 800689e:	617b      	str	r3, [r7, #20]
   return(result);
 80068a0:	697b      	ldr	r3, [r7, #20]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1e5      	bne.n	8006872 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2220      	movs	r2, #32
 80068aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e012      	b.n	80068e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2220      	movs	r2, #32
 80068be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2220      	movs	r2, #32
 80068c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2200      	movs	r2, #0
 80068d4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80068de:	2300      	movs	r3, #0
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	3758      	adds	r7, #88	@ 0x58
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b084      	sub	sp, #16
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	603b      	str	r3, [r7, #0]
 80068f4:	4613      	mov	r3, r2
 80068f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068f8:	e04f      	b.n	800699a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006900:	d04b      	beq.n	800699a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006902:	f7fc fb55 	bl	8002fb0 <HAL_GetTick>
 8006906:	4602      	mov	r2, r0
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	69ba      	ldr	r2, [r7, #24]
 800690e:	429a      	cmp	r2, r3
 8006910:	d302      	bcc.n	8006918 <UART_WaitOnFlagUntilTimeout+0x30>
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d101      	bne.n	800691c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e04e      	b.n	80069ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f003 0304 	and.w	r3, r3, #4
 8006926:	2b00      	cmp	r3, #0
 8006928:	d037      	beq.n	800699a <UART_WaitOnFlagUntilTimeout+0xb2>
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	2b80      	cmp	r3, #128	@ 0x80
 800692e:	d034      	beq.n	800699a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	2b40      	cmp	r3, #64	@ 0x40
 8006934:	d031      	beq.n	800699a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	69db      	ldr	r3, [r3, #28]
 800693c:	f003 0308 	and.w	r3, r3, #8
 8006940:	2b08      	cmp	r3, #8
 8006942:	d110      	bne.n	8006966 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2208      	movs	r2, #8
 800694a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	f000 f838 	bl	80069c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2208      	movs	r2, #8
 8006956:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e029      	b.n	80069ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	69db      	ldr	r3, [r3, #28]
 800696c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006970:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006974:	d111      	bne.n	800699a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800697e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f000 f81e 	bl	80069c2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	2220      	movs	r2, #32
 800698a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	e00f      	b.n	80069ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	69da      	ldr	r2, [r3, #28]
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	4013      	ands	r3, r2
 80069a4:	68ba      	ldr	r2, [r7, #8]
 80069a6:	429a      	cmp	r2, r3
 80069a8:	bf0c      	ite	eq
 80069aa:	2301      	moveq	r3, #1
 80069ac:	2300      	movne	r3, #0
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	461a      	mov	r2, r3
 80069b2:	79fb      	ldrb	r3, [r7, #7]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d0a0      	beq.n	80068fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3710      	adds	r7, #16
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069c2:	b480      	push	{r7}
 80069c4:	b095      	sub	sp, #84	@ 0x54
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069d2:	e853 3f00 	ldrex	r3, [r3]
 80069d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80069d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	461a      	mov	r2, r3
 80069e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80069ea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80069ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80069f0:	e841 2300 	strex	r3, r2, [r1]
 80069f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80069f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1e6      	bne.n	80069ca <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	3308      	adds	r3, #8
 8006a02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a04:	6a3b      	ldr	r3, [r7, #32]
 8006a06:	e853 3f00 	ldrex	r3, [r3]
 8006a0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a12:	f023 0301 	bic.w	r3, r3, #1
 8006a16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	3308      	adds	r3, #8
 8006a1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a20:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a22:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a28:	e841 2300 	strex	r3, r2, [r1]
 8006a2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d1e3      	bne.n	80069fc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d118      	bne.n	8006a6e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	e853 3f00 	ldrex	r3, [r3]
 8006a48:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	f023 0310 	bic.w	r3, r3, #16
 8006a50:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	461a      	mov	r2, r3
 8006a58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a5a:	61bb      	str	r3, [r7, #24]
 8006a5c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5e:	6979      	ldr	r1, [r7, #20]
 8006a60:	69ba      	ldr	r2, [r7, #24]
 8006a62:	e841 2300 	strex	r3, r2, [r1]
 8006a66:	613b      	str	r3, [r7, #16]
   return(result);
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1e6      	bne.n	8006a3c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2220      	movs	r2, #32
 8006a72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006a82:	bf00      	nop
 8006a84:	3754      	adds	r7, #84	@ 0x54
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr

08006a8e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006a8e:	b480      	push	{r7}
 8006a90:	b085      	sub	sp, #20
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d101      	bne.n	8006aa4 <HAL_UARTEx_DisableFifoMode+0x16>
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	e027      	b.n	8006af4 <HAL_UARTEx_DisableFifoMode+0x66>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2224      	movs	r2, #36	@ 0x24
 8006ab0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f022 0201 	bic.w	r2, r2, #1
 8006aca:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006ad2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2220      	movs	r2, #32
 8006ae6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006b10:	2b01      	cmp	r3, #1
 8006b12:	d101      	bne.n	8006b18 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006b14:	2302      	movs	r3, #2
 8006b16:	e02d      	b.n	8006b74 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2224      	movs	r2, #36	@ 0x24
 8006b24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f022 0201 	bic.w	r2, r2, #1
 8006b3e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	683a      	ldr	r2, [r7, #0]
 8006b50:	430a      	orrs	r2, r1
 8006b52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 f84f 	bl	8006bf8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2220      	movs	r2, #32
 8006b66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3710      	adds	r7, #16
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}

08006b7c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d101      	bne.n	8006b94 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006b90:	2302      	movs	r3, #2
 8006b92:	e02d      	b.n	8006bf0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2224      	movs	r2, #36	@ 0x24
 8006ba0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681a      	ldr	r2, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f022 0201 	bic.w	r2, r2, #1
 8006bba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	683a      	ldr	r2, [r7, #0]
 8006bcc:	430a      	orrs	r2, r1
 8006bce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 f811 	bl	8006bf8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2220      	movs	r2, #32
 8006be2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006bee:	2300      	movs	r3, #0
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3710      	adds	r7, #16
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b085      	sub	sp, #20
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d108      	bne.n	8006c1a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006c18:	e031      	b.n	8006c7e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006c1a:	2308      	movs	r3, #8
 8006c1c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006c1e:	2308      	movs	r3, #8
 8006c20:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	0e5b      	lsrs	r3, r3, #25
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	f003 0307 	and.w	r3, r3, #7
 8006c30:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	0f5b      	lsrs	r3, r3, #29
 8006c3a:	b2db      	uxtb	r3, r3
 8006c3c:	f003 0307 	and.w	r3, r3, #7
 8006c40:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c42:	7bbb      	ldrb	r3, [r7, #14]
 8006c44:	7b3a      	ldrb	r2, [r7, #12]
 8006c46:	4911      	ldr	r1, [pc, #68]	@ (8006c8c <UARTEx_SetNbDataToProcess+0x94>)
 8006c48:	5c8a      	ldrb	r2, [r1, r2]
 8006c4a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006c4e:	7b3a      	ldrb	r2, [r7, #12]
 8006c50:	490f      	ldr	r1, [pc, #60]	@ (8006c90 <UARTEx_SetNbDataToProcess+0x98>)
 8006c52:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c54:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c58:	b29a      	uxth	r2, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c60:	7bfb      	ldrb	r3, [r7, #15]
 8006c62:	7b7a      	ldrb	r2, [r7, #13]
 8006c64:	4909      	ldr	r1, [pc, #36]	@ (8006c8c <UARTEx_SetNbDataToProcess+0x94>)
 8006c66:	5c8a      	ldrb	r2, [r1, r2]
 8006c68:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006c6c:	7b7a      	ldrb	r2, [r7, #13]
 8006c6e:	4908      	ldr	r1, [pc, #32]	@ (8006c90 <UARTEx_SetNbDataToProcess+0x98>)
 8006c70:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c72:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c76:	b29a      	uxth	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006c7e:	bf00      	nop
 8006c80:	3714      	adds	r7, #20
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	08006d58 	.word	0x08006d58
 8006c90:	08006d60 	.word	0x08006d60

08006c94 <memset>:
 8006c94:	4402      	add	r2, r0
 8006c96:	4603      	mov	r3, r0
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d100      	bne.n	8006c9e <memset+0xa>
 8006c9c:	4770      	bx	lr
 8006c9e:	f803 1b01 	strb.w	r1, [r3], #1
 8006ca2:	e7f9      	b.n	8006c98 <memset+0x4>

08006ca4 <__libc_init_array>:
 8006ca4:	b570      	push	{r4, r5, r6, lr}
 8006ca6:	4d0d      	ldr	r5, [pc, #52]	@ (8006cdc <__libc_init_array+0x38>)
 8006ca8:	4c0d      	ldr	r4, [pc, #52]	@ (8006ce0 <__libc_init_array+0x3c>)
 8006caa:	1b64      	subs	r4, r4, r5
 8006cac:	10a4      	asrs	r4, r4, #2
 8006cae:	2600      	movs	r6, #0
 8006cb0:	42a6      	cmp	r6, r4
 8006cb2:	d109      	bne.n	8006cc8 <__libc_init_array+0x24>
 8006cb4:	4d0b      	ldr	r5, [pc, #44]	@ (8006ce4 <__libc_init_array+0x40>)
 8006cb6:	4c0c      	ldr	r4, [pc, #48]	@ (8006ce8 <__libc_init_array+0x44>)
 8006cb8:	f000 f818 	bl	8006cec <_init>
 8006cbc:	1b64      	subs	r4, r4, r5
 8006cbe:	10a4      	asrs	r4, r4, #2
 8006cc0:	2600      	movs	r6, #0
 8006cc2:	42a6      	cmp	r6, r4
 8006cc4:	d105      	bne.n	8006cd2 <__libc_init_array+0x2e>
 8006cc6:	bd70      	pop	{r4, r5, r6, pc}
 8006cc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ccc:	4798      	blx	r3
 8006cce:	3601      	adds	r6, #1
 8006cd0:	e7ee      	b.n	8006cb0 <__libc_init_array+0xc>
 8006cd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cd6:	4798      	blx	r3
 8006cd8:	3601      	adds	r6, #1
 8006cda:	e7f2      	b.n	8006cc2 <__libc_init_array+0x1e>
 8006cdc:	08006d70 	.word	0x08006d70
 8006ce0:	08006d70 	.word	0x08006d70
 8006ce4:	08006d70 	.word	0x08006d70
 8006ce8:	08006d74 	.word	0x08006d74

08006cec <_init>:
 8006cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cee:	bf00      	nop
 8006cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cf2:	bc08      	pop	{r3}
 8006cf4:	469e      	mov	lr, r3
 8006cf6:	4770      	bx	lr

08006cf8 <_fini>:
 8006cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cfa:	bf00      	nop
 8006cfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cfe:	bc08      	pop	{r3}
 8006d00:	469e      	mov	lr, r3
 8006d02:	4770      	bx	lr
